---
title: "03_Reweighter.Output.Summaries"
format: html
editor: visual
---

# 0.0 Environment Set Up

# 0.1 Filepath Set Up

```{r}
#===============================================================================
#TODO: 
# 1. Create a way to loop through:
# - MAPC vintages (101 or 97)
# 2. Create output table function 
# 3. Create way to loop through Scenarios for Output tables
# 4. QA/QC of Tables based on reweighter inputs
# 3. Writing to workbook
# 4. Data Visualizations
#===============================================================================

### Set Scenario Names ###
#Population Scenario
scen <- 'Scenario_2'
#Headship rate Scenario
hdshp <- 'scen2'

#Use when Rproject is open
#root <- '../../../../Data/Working/Regional_Control_Totals/'

# Base root. Toggle between S: and K: drive depedning on mapped paths on your computer
base <- "K:/DataServices/Projects/Current_Projects/"
#base <- "S:/Network Shares/K Drive/DataServices/Projects/Current_Projects/"

# General K drive filepath
root <- paste0(base, "Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/")

# Set output filepath
output_path <- paste0(base, "Housing/StatewideHousingPlan/04_Analysis/Data/Final_Outputs/", scen, "/")

# Reweighter files path
rwt_path <- paste0(base, "Housing/StatewideHousingPlan/04_Analysis/Data/Working/Reweighter/", scen, "/Output_Files/")

# Set knitr path
knitr::opts_knit$set(root.dir = root)
```

# 0.2 Set Package Dependencies + Set Environment Variables

```{r}
library(tidycensus)
library(tidyverse)
library(data.table)
library(reticulate)
library(mapcdatakeys)
library(janitor)
library(readxl)

##get rid of scientific notation
options(scipen = 999)
#Set random seed
set.seed(351)

```

# 1.0 Load Reweighter Output Data

```{r}
# Set a list of years corresponding to the projection years considered
years <- c(2020,2025,2030,2035,2040,2045,2050)

#Set a list of Scenarios to be processed
scen <- c("Scenario_2")

# Create null objects for each scenario's full reweighted PUMS dataset. 
# One will be used per script run depending on the value given to "scen" at the outset of the script.
rwt.pums.df <- NULL

pums.df<- NULL

# Standardized function for reading reweighted PUMS data for each scenario and projection year.
# - scenario: data that is generated to reflect population and headship rate scenarios. See xx for further detail
# - year: a year in a list of years created earlier in this code block. Typically in 5-year or 10-year intervals.
read_rwt.files <- function(scenario, year){
  read_csv(
      paste0(rwt_path, "reweighted_PUMS_",scenario,"_MAPC101_",hdshp,"_",year,".csv")
    )
}

read_PUMS.files <- function(scenario, year){
  read_csv(
    paste0(rwt_path,'PUMS_data/PUMS2021_',scenario,'_',year,'.csv')
  )
}

if(scen == "Scenario_1"){
  
  # Loads in reweighted PUMS data for each year and scenario.
  # Compiles data into a single dataframe which is generated earlier.
  for (i in scen) {
    for (j in years) {
      # Reads in the reweighted PUMS data by year.
      tmp <- read_rwt.files(scenario = i, year = j)
      
      # Appends to dataframe.
      rwt.pums.df <- bind_rows(rwt.pums.df, tmp)
      
      # Removes the temporary file.
      rm(tmp)
      
      # Print statement when loop has completed running.
      print(paste0("Finished Reading and Appending ", i, " ", j, "."))
      
    }
    
    # Cleans up names of variables in the dataframe for output tables generated in subsequent sections.
    rwt.pums.df <- rwt.pums.df |>
      mutate(
        # Creates a group designation based on the number of children in a household.
        CHILDHH_Group = case_when(
          Child_Total == 0 ~ "No Children",
          Child_Total == 1 ~ "One Child",
          Child_Total == 2 ~ "Two Children",
          Child_Total == 3 ~ "Three Children",
          Child_Total >= 4 ~ "Four or More Children",
          .default = "Unknown"
        ),
        # Creates a group designation based on household income.
        Income_Group = case_when(
          WAGPALLC_US == 1 ~ "<=$35,000",
          WAGPALLC_US == 2 ~ "$35,001 - $75,000",
          WAGPALLC_US == 3 ~ "$75,001 - $125,000",
          WAGPALLC_US == 4 ~ "$125,001 - $225,000",
          WAGPALLC_US == 5 ~ ">$225,000",
          .default = "Unknown"
        ),
        # Creates a group designation based on the age of householder.
        Age_Group = case_when(
          ageCAT6 == 1 ~ "00-04",
          ageCAT6 == 2 ~ "05-09",
          ageCAT6 == 3 ~ "10-14",
          ageCAT6 == 4 ~ "15-19",
          ageCAT6 == 5 ~ "20-24",
          ageCAT6 == 6 ~ "25-29",
          ageCAT6 == 7 ~ "30-34",
          ageCAT6 == 8 ~ "35-39",
          ageCAT6 == 9 ~ "40-44",
          ageCAT6 == 10 ~ "45-49",
          ageCAT6 == 11 ~ "50-54",
          ageCAT6 == 12 ~ "55-59",
          ageCAT6 == 13 ~ "60-64",
          ageCAT6 == 14 ~ "65-69",
          ageCAT6 == 15 ~ "70-74",
          ageCAT6 == 16 ~ "75-79",
          ageCAT6 == 17 ~ "80-84",
          ageCAT6 == 18 ~ "85 plus",
          .default = "Unknown"
        ),
        # Creates a group designation based on the type of household.
        HHtype_Group = case_when(
          HHtype == 1 ~ "Household w Children",
          HHtype == 3 ~ "Household w 2 plus Adults wo Children",
          HHtype == 5 ~ "Single Person Household",
          .default = "Unknown"
        ),
        # Creates a group designation based on the number of people in a household.
        Size_Group = case_when(
          size == 1 ~ "One Person",
          size == 2 ~ "Two person",
          size == 3 ~ "Three Person",
          size == 4 ~ "Four Person",
          size == 5 ~ "Five Person",
          size == 6 ~ "Six Person",
          size >= 7 ~ "Seven or More Persons",
          .default = "Unknown"
        ),
        # Creates a group designation based on the tenure of the household.
        TEN_Group = case_when(tenure == 1 ~ "Own",
                              tenure == 2 ~ "Rent",
                              .default = "Unknown"),
        # Creates a group designation based on the number of workers in a household.
        WRKHH_Group = case_when(
          WRKHH == 0 ~ "No Workers",
          WRKHH == 1 ~ "One Worker",
          WRKHH == 2 ~ "Two Workers",
          WRKHH >= 3 ~ "Three or More Workers",
          .default = "Unknown"
        )
      )
    
    # Assigns a unique scenario id to the dataframe.
    assign(paste0("rwt.pums.df_", i), rwt.pums.df)
    
    # Removes intermediate dataframe.
    rm(rwt.pums.df)
    
    # Print statement when loop finishes running.
    print(paste0("Finished Loading ", i))
  }
  
} else if (scen == "Scenario_2"){
  
  for (i in scen) {
    for (j in years) {
      # Reads in the reweighted PUMS data by year.
      tmp.rwt <- read_rwt.files(scenario = i, year = j) |>
        #select(SERIALNO.adj, new_WGTP)
        
      tmp.pums <- read_PUMS.files(scenario = i, year = j) |>
        mutate(year = j)
        
      # Appends to dataframe.
      rwt.pums.df <- bind_rows(rwt.pums.df, tmp.rwt)
        
      pums.df <- bind_rows(pums.df, tmp.pums)
        
      # Removes the temporary file.
      rm(tmp.rwt)
        
      rm(tmp.pums)
        
      # Print statement when loop has completed running.
      print(paste0("Finished Reading and Appending ", i, " ", j, "."))
        
    }
    
    # Join the new weights to the 
    rwt.pums.df.join <- left_join(
      rwt.pums.df,
      pums.df,
      by = c("SERIALNO.adj", "year")
    )  |>
      mutate(
        # Creates a group designation based on the number of children in a household.
        CHILDHH_Group = case_when(
          Child_Total.adj == 0 ~ "No Children",
          Child_Total.adj == 1 ~ "One Child",
          Child_Total.adj == 2 ~ "Two Children",
          Child_Total.adj == 3 ~ "Three Children",
          Child_Total.adj >= 4 ~ "Four or More Children",
          .default = "Unknown"
        ),
        # Creates a group designation based on household income.
        Income_Group = case_when(
          WAGPALLC_US.adj == 1 ~ "<=$35,000",
          WAGPALLC_US.adj == 2 ~ "$35,001 - $75,000",
          WAGPALLC_US.adj == 3 ~ "$75,001 - $125,000",
          WAGPALLC_US.adj == 4 ~ "$125,001 - $225,000",
          WAGPALLC_US.adj == 5 ~ ">$225,000",
          .default = "Unknown"
        ),
        # Creates a group designation based on the age of householder.
        Age_Group = case_when(
          ageCAT6 == 1 ~ "00-04",
          ageCAT6 == 2 ~ "05-09",
          ageCAT6 == 3 ~ "10-14",
          ageCAT6 == 4 ~ "15-19",
          ageCAT6 == 5 ~ "20-24",
          ageCAT6 == 6 ~ "25-29",
          ageCAT6 == 7 ~ "30-34",
          ageCAT6 == 8 ~ "35-39",
          ageCAT6 == 9 ~ "40-44",
          ageCAT6 == 10 ~ "45-49",
          ageCAT6 == 11 ~ "50-54",
          ageCAT6 == 12 ~ "55-59",
          ageCAT6 == 13 ~ "60-64",
          ageCAT6 == 14 ~ "65-69",
          ageCAT6 == 15 ~ "70-74",
          ageCAT6 == 16 ~ "75-79",
          ageCAT6 == 17 ~ "80-84",
          ageCAT6 == 18 ~ "85 plus",
          .default = "Unknown"
        ),
        # Creates a group designation based on the type of household.
        HHtype_Group = case_when(
          HHtype.adj == 1 ~ "Household w Children",
          HHtype.adj == 3 ~ "Household w 2 plus Adults wo Children",
          HHtype.adj == 5 ~ "Single Person Household",
          .default = "Unknown"
        ),
        # Creates a group designation based on the number of people in a household.
        Size_Group = case_when(
          size.adj == 1 ~ "One Person",
          size.adj == 2 ~ "Two person",
          size.adj == 3 ~ "Three Person",
          size.adj == 4 ~ "Four Person",
          size.adj == 5 ~ "Five Person",
          size.adj == 6 ~ "Six Person",
          size >= 7 ~ "Seven or More Persons",
          .default = "Unknown"
        ),
        # Creates a group designation based on the tenure of the household.
        TEN_Group = case_when(
          tenure == 1 ~ "Own",
          tenure == 2 ~ "Rent",
          .default = "Unknown"
        ),
        # Creates a group designation based on the number of workers in a household.
        WRKHH_Group = case_when(
          WRKHH.adj == 0 ~ "No Workers",
          WRKHH.adj == 1 ~ "One Worker",
          WRKHH.adj == 2 ~ "Two Workers",
          WRKHH.adj >= 3 ~ "Three or More Workers",
          .default = "Unknown"
        )
      )
    
    # Assigns a unique scenario id to the dataframe.
    assign(paste0("rwt.pums.df.join_", i), rwt.pums.df.join)
    
    # Removes intermediate dataframe.
    rm(rwt.pums.df.join)
    
    # Print statement when loop finishes running.
    print(paste0("Finished Loading ", i))
    
  }
  
} else if (scen == "Scenario_3"){
  
} else if (scen == "Scenario_4"){
  
}

```

# 2.0 QA/QC For Total Households and Reweighter Parameters

# 2.1 Load in Target File Data for a Scenario

```{r}
```

# 2.2 Compare Reweighter PUMS data to Reweighter Target Files

-   .1 Total Households by Year
-   .2 Total Households by RPA
-   .3 Total Households by Year and RPA
-   .4 Households by Type
-   .5 Households by Age of Householder

```{r}
#===============================================================================
# -.1 Total Households by Year
test <- s1.df |> 
  filter(SPORDER == 1 & TYPEHUGQ == 1) |> 
  group_by(year) |> 
  summarise(
    hhd = sum(new_WGTP)
  ) |> 
  ungroup()

print(sum(test$new_WGTP))
#===============================================================================
# -.2 Total Households by RPA

#===============================================================================
# -.3 Total Households by Year and RPA

#===============================================================================
# -.4 Households by Household Type

#===============================================================================
# -.5 Households by Age of Householder
```

# 3.0 Univariate Output Tables For UrbanSim

-   .1 UrbanSim Household Income Groupings
-   .2 5-year Age Groupings (ageCAT6)
-   .3 Household Type

```{r}
#===============================================================================
# .1 UrbanSim Household Income Groupings
tbl.1 <- rwt.pums.df_Scenario_1 |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    year,
    Income_Group
  ) |> 
  summarise(
    hhds = round(sum(new_WGTP), 0)
  ) |> 
  ungroup()

#Write Output tables to K Drive
write.csv(
  tbl.1,
  paste0(output_path,"/output.tbl_",scen,"_Households.by.IncomeGroups.csv"),
  row.names = FALSE
)

#===============================================================================
# .2 5-year Age Groupings (ageCAT6)
tbl.2 <- rwt.pums.df_Scenario_1 |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    year,
    Age_Group
  ) |> 
  summarise(
    hhds = round(sum(new_WGTP),0)
  ) |> 
  ungroup()

#Write Output Tables ot K Drive
write.csv(
  tbl.2,
  paste0(output_path,"/output.tbl_",scen,"_Households.by.AgeGroups.csv"),
  row.names = FALSE
)

#===============================================================================
# .3 Household Type
tbl.3 <- rwt.pums.df_Scenario_1  |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    year,
    HHtype_Group
  ) |> 
  summarise(
    hhds = round(sum(new_WGTP), 0)
  ) |> 
  ungroup()

# Write output tables to K drive
write.csv(
  tbl.3,
  paste0(output_path,"/output.tbl_",scen,"_Households.by.HHtypeGroups.csv"),
  row.names = FALSE
)

```

#4.0 Univariate Output Tables for Statewide Housing Plan Deliverables - .4 Number of Children in a Household - .5 Size of Household - .6 Tenure - .7 Number of Workers in a Household

```{r}
#===============================================================================
# .4 Number of Children in a Household
tbl.4 <- rwt.pums.df_Scenario_1  |>
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    year,
    CHILDHH_Group
  ) |> 
  summarise(
    hhds = round(sum(new_WGTP), 0)
  ) |> 
  ungroup()

# Write output tables to K drive
write.csv(
  tbl.4,
  paste0(output_path,"/output.tbl_",scen,"_Households.by.NumberOfChildren.csv"),
  row.names = FALSE
)

#===============================================================================
# .5 Size of Household
tbl.5 <- rwt.pums.df_Scenario_1  |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    year,
    Size_Group
  ) |> 
  summarise(
    hhds = round(sum(new_WGTP), 0)
  ) |> 
  ungroup()

# Write output tables to K drive
write.csv(
  tbl.5,
  paste0(output_path,"/output.tbl_",scen,"_Households.by.HHsize.csv"),
  row.names = FALSE
)

#===============================================================================
# .6 Tenure
tbl.6 <- rwt.pums.df_Scenario_1  |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    year,
    TEN_Group
  ) |> 
  summarise(
    hhds = round(sum(new_WGTP), 0)
  ) |> 
  ungroup()

# Write output tables to K drive
write.csv(
  tbl.6,
  paste0(output_path,"/output.tbl_",scen,"_Households.by.Tenure.csv"),
  row.names = FALSE
)

#===============================================================================
# .7 Number of Workers in a Household
tbl.7 <- rwt.pums.df_Scenario_1  |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    year,
    WRKHH_Group
  ) |> 
  summarise(
    hhds = round(sum(new_WGTP), 0)
  ) |> 
  ungroup()

# Write output tables to K drive
write.csv(
  tbl.7,
  paste0(output_path,"/output.tbl_",scen,"_Households.by.NumberOfWorkers.csv"),
  row.names = FALSE
)
```

# 5.0 Mutlivariate Output Tables for UrbanSim

-   .8 Household Type by Household Income Groups
-   .9 Household Type by Householder Age Group
-   .10 Household Income Groups by Householder Age Groups
-   .11 Household Type by Household Income Groups by Householder Age Groups

```{r}
```

# 6.0 Multivariate Output Tables for Statewide Housing Plan

```{r}

```

# 7.0 Full Crosstab

```{r}
full.crosstab <- rwt.pums.df_Scenario_1  |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>
  group_by(
    rpa_acr,
    year,
    Income_Group,
    Age_Group,
    HHtype_Group,
    CHILDHH_Group,
    Size_Group,
    TEN_Group,
    WRKHH_Group
  ) |> 
  summarise(
    hhds = sum(new_WGTP)
  ) |> 
  ungroup()

#Write Output tables to K Drive
write.csv(
  full.crosstab,
  paste0(output_path,"/output.tbl_",scen,"_full.crosstab.csv"),
  row.names = FALSE
)
```

---
title: "03_Immigration"
format: html
editor: visual
---

# 0.0 Setup - Define helper functions, set knitr path, load necessary packages, set muni data keys

#Set up libraries for the analysis

```{r}
library(tidycensus)
library(tidyverse)
library(survey)
library(srvyr)
library(data.table)
library(janitor) 
library(dplyr)
library(knitr)
library(readxl)
library(writexl)
library(openxlsx)
library(devtools)
```

# 0.1 - Set knitr path + root for inputs

```{r}
#Optional - Set up project using MAPC's organization method

#Use when Rproject is open
#root <- 

#General J drive filepath
#root <-"J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI"

#PUMS J drive filepath
#pums_path <- "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI"

#Set output filepath
#output_path <- ":/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output"

#Set knitr path
#knitr::opts_knit$set(root.dir = pums_path)
```

# 0.2 - Set package dependencies, set environment, set up data keys

```{r}
#Load PUMS data 
pums <- read.xlsx("J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/pums_immig_hh_2021_V_2024-10-29.xlsx")
```

# 0.3 PUMA to RPA Crosswalk

```{r}
#Load in PUMA crosswalk - didn't end up using this one but here if needed
#RPA_crosswalk <- read.csv ("J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/PUMA10_RPA_crosswalk.csv")

#install mapc package for geographies
devtools::install_github("MAPC/mapcdatakeys", force = TRUE)
library(mapcdatakeys)
```


```{r}
#Load in puma crosswalk and use mapc package to match geos 
ma_muni_puma10_join <- read_csv("ma_muni_puma10_join.csv")

mkeys <- mapcdatakeys::all_muni_data_keys |>  select(muni_id,rpa_acr,mpo)

#Load in the municipality to PUMA crosswalk - using MAPC code to create same regions
psf <- ma_muni_puma10_join|>
  dplyr::rename(
    muni_id=TOWN_ID,
    PUMA = PUMACE10
  ) |>
  left_join(
    mkeys,
    by = c('muni_id')
  ) |> 
  select(-c(muni_id)) |> 
  distinct(
    PUMA,
    .keep_all = TRUE
  ) |> 
  mutate(
    PUMA = str_pad(PUMA, 5, side = "left", pad = "0")
  )

#Manufacturing MVC and NPEDC RPAs manually
#Create an empty matrix with 2x1 dimenstions
matrix <- matrix(nrow = 1, ncol = 3)
#Set the column names to match the PUMA to RPA/MPO crosswalk
col_names <- c("rpa_acr", "mpo", "PUMA")

#Create dataframes with matrix dimensions for both RPAs
mvc <- data.frame(matrix = matrix)
ccc <- data.frame(matrix = matrix)

#Assign column names to the dataframes
colnames(mvc) <- col_names
colnames(ccc) <- col_names

#Populate data into the MVC and MPEDC dataframes
mvc[[1]] <- "MVC"
mvc[[2]] <- "MVC"
mvc[[3]] <- "04800"
ccc[[1]] <- "CCC"
ccc[[2]] <- "CCC"
ccc[[3]] <- "04800"

#Append MVC and NPEDC data to PUMA to RPA/MPO crosswalk
xw <- bind_rows(psf, mvc, ccc)

#Remove intermediate dataframes.
rm(matrix, col_names, mvc, ccc, psf)
gc()

```

# 0.4 PUMS Data Cleaning

```{r}
#Other data cleaning first before joining RPA

#To replicate income groups that mapc used
    # Adjust Household income (HINCP) to constant dollars (USD2021)
pums <- pums %>%
  mutate(
    HINCP_adj = HINCP * ADJINC,  # Create the adjusted income column
    HH.Income.Grp = case_when(
      HINCP_adj <= 35000 ~ "$35,000 or less",
      HINCP_adj > 35000 & HINCP_adj <= 75000 ~ "$35,001-$75,000",
      HINCP_adj > 75000 & HINCP_adj <= 125000 ~ "$75,001-$125,000",
      HINCP_adj > 125000 & HINCP_adj <= 225000 ~ "$125,001-$225,000",
      HINCP_adj > 225000 ~ "$225,000 or more",
      TRUE ~ NA_character_)) 


##Joining the PUMA to RPA crosswalk to the PUMS data
#converting puma to numeric to join
xw$PUMA <- as.numeric(xw$PUMA)

#join RPA crosswalk to pums data for RPA data set
pums_RPA <- left_join(
  pums,
  xw,
  by = c("PUMA"))

```

# PUMS Analysis

# State-level

Identify households whose head of household is foreign born.

```{r}
#Number and share of hhlds in the state where the head of household is foreign born
#### The first person in each hhld is the head of hhld - can also use SPORDER == 1 to do this

#Calculate weighted total of all hhlds in data set 
household_data <- pums %>%
filter(RT == "H") %>%
filter(TYPEHUGQ == 1) %>%                # filters out group quarters
filter(NP > 0)                           # filter out vacant units that have 0 people in it 
#Sum weights for total household number
total_weighted_households <- sum(household_data$WGTP, na.rm = TRUE) 

#Calculate number of hhlds with foreign born head of household
household_foreign_born_summary_table <- pums %>%
  filter(RT != "H") %>%   # exclude hhlds because nativity is a person-level data point
  group_by(SERIALNO) %>%  # group by household 
  summarise(first_weight = first(WGTP, na.rm = TRUE), # get the first person's weight for hhld
    NATIVITY = first(NATIVITY), .groups = "drop") %>% # get the nativity for the first person        
  group_by(NATIVITY) %>%                              # group by nativity to calculate total weights for each type
  summarise(total_by_nativity= sum(first_weight, na.rm = TRUE), # sum the weights by nativity
    .groups = "drop") %>%                                       
  mutate(NATIVITY = case_when(                             # rename variables 
    NATIVITY == 1 ~ "Native",
    NATIVITY == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(percentage_of_total = (total_by_nativity / total_weighted_households) * 100) # Calculate percent out of all hhlds

```

```{r}
#Export table
 write.xlsx(list('Households by nativity' = household_foreign_born_summary_table), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_hhlder_nativity.xlsx") 
```

```{r}
#Checking calculation of the weighted number of foreign born hhlds
households_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds because nativity is a person-level data point
 group_by(SERIALNO) %>% 
 summarise(
    first_weight = first(WGTP, na.rm = TRUE),  # get the first person's weight for the household
    first_person_nativity = first(NATIVITY, na.rm = TRUE),  # get the nativity of the first person
    .groups = "drop") %>%
  filter(first_person_nativity == 2) 

#checking total foreign born hhlds
total_foreign_hhld <- sum(households_foreign_born$first_weight)
```

```{r}
#Household type - HHT variable 
household_type_foreign_born <- pums %>%
  filter(RT != "H") %>%   # exclude hhlds because nativity is a person-level data point
  select(uniq_obs, SERIALNO, WGTP, HHT, NATIVITY) %>% 
  group_by(SERIALNO) %>% 
  summarise(
    household_type = first(HHT, na.rm = TRUE),  # get the first person's household type
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, household_type) %>%  # group by nativity and type
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and type
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(household_type = case_when(        # rename hhld type categories
    household_type == 1 ~ "Married couple household",
    household_type == 2 ~ "Other family: male no spouse",
    household_type == 3 ~ "Other family: female no spouse",
    household_type == 4 ~ "Nonfamily: male living alone",
    household_type == 5 ~ "Nonfamily: male not living alone",
    household_type == 6 ~ "Nonfamily: female living alone",
    household_type == 7 ~ "Nonfamily: female not living alone",
    TRUE ~ NA_character_)) %>%
  filter(!is.na(household_type)) %>%
  arrange(householder_nativity, household_type)

```

```{r}
#Export hhld type table
 write.xlsx(list('Type of hhld' = household_type_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_hhld_type.xlsx") 
```

```{r}
#Age of householder for foreign born vs. native hhlds 
householder_age_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, HHLDRAGEP, NATIVITY) %>% 
 mutate(age_range = case_when(                  # create age ranges
    HHLDRAGEP >= 0 & HHLDRAGEP < 5 ~ "Under 5",
    HHLDRAGEP >= 5 & HHLDRAGEP < 18 ~ "5-17",
    HHLDRAGEP >= 18 & HHLDRAGEP < 35 ~ "18-34",
    HHLDRAGEP >= 35 & HHLDRAGEP < 65 ~ "35-64",
    HHLDRAGEP >= 65 & HHLDRAGEP < 75 ~ "65-74",
    HHLDRAGEP >= 75 ~ "75 and over")) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_age = first(HHLDRAGEP, na.rm = TRUE),  # get the first person's householder age
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    age_range = first(age_range, na.rm = TRUE),  # get age range for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, age_range) %>%  # group by nativity and age range
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and age range
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate (age_range = factor(age_range, levels = c(   # order groups in correct order
      "5-17",
      "18-34",
      "35-64",
      "65-74",
      "75 and over"))) %>%
   arrange(householder_nativity, age_range)
```

```{r}
#Share of each age group that is either foreign born or native 
household_age_by_nativity <- pums %>%
  filter(RT != "H") %>%   # exclude hhlds
  select(RT, uniq_obs, SERIALNO, WGTP, HHLDRAGEP, NATIVITY) %>% 
  mutate(age_range = case_when(
    HHLDRAGEP >= 0 & HHLDRAGEP < 5 ~ "Under 5",
    HHLDRAGEP >= 5 & HHLDRAGEP < 18 ~ "5-17",
    HHLDRAGEP >= 18 & HHLDRAGEP < 35 ~ "18-34",
    HHLDRAGEP >= 35 & HHLDRAGEP < 65 ~ "35-64",
    HHLDRAGEP >= 65 & HHLDRAGEP < 75 ~ "65-74",
    HHLDRAGEP >= 75 ~ "75 and over")) %>% 
  group_by(SERIALNO) %>%  # group by household
  summarise(
    householder_age_range = first(age_range, na.rm = TRUE),  # get age range of the householder
    householder_nativity = first(NATIVITY, na.rm = TRUE),    # get nativity of the householder
    first_weight = first(WGTP, na.rm = TRUE),                # get weight for the householder
    .groups = "drop") %>%
  mutate(householder_nativity = case_when(                   # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  group_by(householder_age_range, householder_nativity) %>%  # group by age range and nativity
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # calculate total weight for each age and nativity group
    .groups = "drop") %>%
  group_by(householder_age_range) %>%  # group by age range to calculate percentages within each age group
  mutate(
    total_weight_by_age_range = sum(total_weight, na.rm = TRUE),  # total weight by age group
    percentage_within_age_range = (total_weight / total_weight_by_age_range) * 100) %>%  # calculate percentage within each age group
    mutate (householder_age_range = factor(householder_age_range, levels = c(   # order groups in correct order
      "5-17",
      "18-34",
      "35-64",
      "65-74",
      "75 and over"))) %>%
  arrange(householder_age_range, householder_nativity)  # sort by age range and nativity
```

```{r}
#Export age tables
 write.xlsx(list('Age of householders' = householder_age_foreign_born,
                 'Share of age group by nativity' = household_age_by_nativity), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_age_of_hhlder.xlsx") 
```


```{r}
#Race of householder 
householder_race_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds 
 select(uniq_obs, SERIALNO, PUMA, WGTP, HHLDRRAC1P, HHLDRHISP, NATIVITY) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_race = first(HHLDRRAC1P, na.rm = TRUE),  # get the first person's householder race
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_race) %>%  # group by nativity and race
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and race
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(householder_race = case_when(  # rename race categories
    householder_race == 1 ~ "White alone",
    householder_race == 2 ~ "Black or African American alone",
    householder_race == 3 ~ "American Native alone",
    householder_race == 4 ~ "Alaska Native alone",
    householder_race == 5 ~ "American Indian and Alaska Native",
    householder_race == 6 ~ "Asian alone",
    householder_race == 7 ~ "Native Hawaiian and Other Pacific Islander alone",
    householder_race == 8 ~ "Some other race alone",
    householder_race == 9 ~ "Two or more races",
    TRUE ~ "Unknown"))
```

```{r}
# Ethnicity of householder
householder_hisp_foreign_born <- pums %>%
  filter(RT != "H") %>%   # exclude hhlds 
  select(uniq_obs, SERIALNO, PUMA, WGTP, HHLDRRAC1P, HHLDRHISP, NATIVITY) %>% 
  group_by(SERIALNO) %>% 
  summarise(
    householder_hisp = first(HHLDRHISP, na.rm = TRUE),  # get the first person's householder ethnicity
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # Get the weight for the first person (householder)
    .groups = "drop") %>%
  mutate(householder_hisp = case_when(     # rename race categories, and group detailed Hispanic into one category
    householder_hisp == "1" ~ "Not Hispanic or Latino",
    as.numeric(householder_hisp) >= 2 & as.numeric(householder_hisp) <= 24 ~ "Hispanic or Latino",  # convert to numeric for comparison
    is.na(householder_hisp) | householder_hisp == "" ~ "Unknown",  # for NA and empty strings
    TRUE ~ NA_character_)) %>%
  filter(!is.na(householder_hisp)) %>%  # remove rows where householder_hisp is NA
  group_by(householder_nativity, householder_hisp) %>%  # group by nativity and hispanic status
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and race
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown"))
```

```{r}
#Race for only non-hispanic householders 
householder_race_non_hisp <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds 
 filter(as.numeric(HHLDRHISP) == 1) %>% # for non-hispanic only
 select(uniq_obs, SERIALNO, PUMA, WGTP, HHLDRRAC1P, HHLDRHISP, NATIVITY) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_race = first(HHLDRRAC1P, na.rm = TRUE),    # get the first person's householder race
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_race) %>%  # group by nativity and race
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and race
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(householder_race = case_when(  # rename race categories
    householder_race == 1 ~ "White alone",
    householder_race == 2 ~ "Black or African American alone",
    householder_race == 3 ~ "American Native alone",
    householder_race == 4 ~ "Alaska Native alone",
    householder_race == 5 ~ "American Indian and Alaska Native",
    householder_race == 6 ~ "Asian alone",
    householder_race == 7 ~ "Native Hawaiian and Other Pacific Islander alone",
    householder_race == 8 ~ "Some other race alone",
    householder_race == 9 ~ "Two or more races",
    TRUE ~ "Unknown"))
```

```{r}
#Export race and ethnicity tables 
 write.xlsx(list('Race of householder by nativity' = householder_race_foreign_born, 
                 'Ethnicity of hhldr by nativity' = householder_hisp_foreign_born, 
                 'Race of non-hisp householder' = householder_race_non_hisp), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_race_eth_of_hhlder.xlsx") 
```


```{r}
#Year of entry, YOEP - bottom coded at 1934, so 1933 is everything before then 

household_year_entry_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds 
 mutate(Year.Entry = case_when(      # create year of entry groups - might need to change around
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 1954 ~ "1934 to 1954",
      YOEP >= 1955 & YOEP <= 1974 ~ "1955 to 1974",
      YOEP >= 1975 & YOEP <= 1994 ~ "1975 to 1994",
      YOEP >= 1995 & YOEP <= 2004 ~ "1995 to 2004",
      YOEP >= 2005 & YOEP <= 2014 ~ "2005 to 2014",
      YOEP >= 2015 & YOEP <= 2024 ~ "2015 to 2024",
      TRUE ~ "0")) %>%
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, Year.Entry) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_entry = first(Year.Entry, na.rm = TRUE),  # get the first person's year of entry
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  filter(householder_nativity == 2) %>% # only including foreign born hhlds 
  group_by(householder_nativity, householder_entry) %>%  # group by nativity and year of entry
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and year of entry
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
  mutate(householder_nativity = "Foreign born") %>%
   mutate (householder_entry = factor(householder_entry, levels = c(   # order groups in correct order
      "Before 1934",
      "1934 to 1954",
      "1955 to 1974",
      "1975 to 1994",
      "1995 to 2004",
      "2005 to 2014",
      "2015 to 2024"))) %>%
   arrange(householder_nativity, householder_entry)

```

```{r}
#Export year of entry table 
 write.xlsx(list('Year entry of householder' = household_year_entry_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_year_entry_hhlder.xlsx") 
```


```{r}
#Size of hhld
#NP is number of persons associated with housing record

#Size of household by number of people by nativity 
household_size_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds 
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, NP) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    household_size = first(NP, na.rm = TRUE),  # get the number of people in hhld for first person
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  mutate(household_size_category = case_when(   # create household size categories
    household_size >= 10 ~ "10 or more",
    household_size < 10 ~ as.character(household_size),  # keep sizes less than 10 as strings to categorize them
    TRUE ~ "Unknown")) %>%
  group_by(householder_nativity, household_size_category) %>%  # group by nativity and size
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and size
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  arrange(householder_nativity, household_size_category)

```

```{r}
#Also check median hhld size by nativity 
median_household_size_by_nativity <- pums %>%
  filter(RT != "H") %>%   
  select(SERIALNO, NATIVITY, NP) %>%  
  group_by(SERIALNO) %>% 
  summarise(
    household_size = first(NP, na.rm = TRUE),  # get the number of people in hhld for the first person
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of the first person (householder)
    .groups = "drop"
  ) %>%
  group_by(householder_nativity) %>%  # group by nativity
  summarise(
    median_household_size = median(household_size, na.rm = TRUE),  # galculate median household size
    .groups = "drop"
  ) %>%
  mutate(householder_nativity = case_when(  # Rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown"))
```

The median size for both foreign-born households and native households is 2. 

```{r}
#Presence of children in hhld by nativity - presence of children variables, HUPAC, HUPAOC, HUPARC
household_children_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds 
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, HUPAC) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    household_children = first(HUPAC, na.rm = TRUE),  # get the presence of children in hhld for first person
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, household_children) %>%  # group by nativity and size
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and size
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
   mutate(household_children = case_when(                             # rename variables 
    household_children == 1 ~ "With children under 6 years only",
    household_children == 2 ~ "With children 6 to 17 years only",
    household_children == 3 ~ "With children under 6 years and 6 to 17 years",
    household_children == 4 ~ "No children",
    TRUE ~ NA_character_)) %>%
  filter(!is.na(household_children)) %>%
  arrange(householder_nativity, household_children)
```

```{r}
#Export hhld size and presence of children tables 
write.xlsx(list('Size of household' = household_size_foreign_born,
                'Presence of children' = household_children_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_size_children_hhld.xlsx") 
```


```{r}
#Income
householder_income_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, HH.Income.Grp) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_income = first(HH.Income.Grp, na.rm = TRUE),  # get the first person's income
    householder_nativity = first(NATIVITY, na.rm = TRUE),     # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_income) %>%  # group by nativity and income
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and income
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>% # calculate percentage within each group
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(householder_income = factor(householder_income, levels = c(     # order income groups in correct order
      "$35,000 or less", 
      "$35,001-$75,000", 
      "$75,001-$125,000", 
      "$125,001-$225,000", 
      "$225,000 or more", 
      "0"))) %>%
  arrange(householder_nativity, householder_income)

```

```{r}
#Export income table
 write.xlsx(list('Income of householder' = householder_income_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_income_hhlder.xlsx") 
```

```{r}
#Tenure 
householder_tenure_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, TEN) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_tenure = first(TEN, na.rm = TRUE),  # get the first person's tenure
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_tenure) %>%  # group by nativity and tenure
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and tenure
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(householder_tenure = case_when(                             # rename tenure variables 
    householder_tenure == 1 ~ "Owned with mortgage",
    householder_tenure == 2 ~ "Owned without mortgage",
    householder_tenure == 3 ~ "Rented",
    householder_tenure == 4 ~ "Occupied without payment of rent",
    TRUE ~ NA_character_)) %>%
  filter(!is.na(householder_tenure)) %>%
  arrange(householder_nativity, householder_tenure)

```

```{r}
#Export tenure table
 write.xlsx(list('Tenure of householder' = householder_tenure_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_tenure_hhlder.xlsx") 
```


```{r}
#Cost burden - renter and owner cost burden - GRPIP OCPIP

#Renter cost burden 
household_renter_burden_foreign_born <- pums %>%
 filter(RT != "H") %>%                # exclude hhlds 
 filter(TEN == 3) %>%                 # filter for just renters
 mutate(Cost.Burden = case_when(      # create cost burden groups 
      GRPIP <= 30 ~ "No cost burden",
      GRPIP > 30 & GRPIP <= 50 ~ "Cost burden",
      GRPIP > 50 ~ "Severe cost burden",
      TRUE ~ "0")) %>%
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, Cost.Burden) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_renter_burden = first(Cost.Burden, na.rm = TRUE),  # get the first person's cost burden
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_renter_burden) %>%  # group by nativity and cost burden
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and cost burden
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
   mutate (householder_renter_burden = factor(householder_renter_burden, levels = c(        # order groups in correct order
      "No cost burden", 
      "Cost burden", 
      "Severe cost burden"))) %>%
   arrange(householder_nativity, householder_renter_burden)

#Owner cost burden 
household_owner_burden_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 filter(TEN == 1 | TEN == 2) %>%                 # filter for just owners
 mutate(Cost.Burden = case_when(                 # create cost burden groups 
      OCPIP <= 30 ~ "No cost burden",
      OCPIP > 30 & OCPIP <= 50 ~ "Cost burden",
      OCPIP > 50 ~ "Severe cost burden",
      TRUE ~ "0")) %>% 
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, Cost.Burden) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_owner_burden = first(Cost.Burden, na.rm = TRUE),  # get the first person's cost burden
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_owner_burden) %>%  # group by nativity and cost burden
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and cost burden
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
   mutate (householder_owner_burden = factor(householder_owner_burden, levels = c(            # order groups in correct order
      "No cost burden", 
      "Cost burden", 
      "Severe cost burden"))) %>%
   arrange(householder_nativity, householder_owner_burden)

```

```{r}
#Export cost burden tables 
 write.xlsx(list('Renter cost burden' = household_renter_burden_foreign_born,
                 'Owner cost burden' = household_owner_burden_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_cost_burden.xlsx") 
```


```{r}
#English language proficiency 
household_english_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, ENG) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_english = first(ENG, na.rm = TRUE),  # get the first person's english level
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  filter(householder_nativity == 2) %>% # only including foreign born hhlds 
  group_by(householder_nativity, householder_english) %>%  # group by nativity and tenure
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and tenure
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(householder_english = case_when(                             # rename variables 
    householder_english == 1 ~ "Very well",
    householder_english == 2 ~ "Well",
    householder_english == 3 ~ "Not well",
    householder_english == 4 ~ "Not at all",
    TRUE ~ "N/A")) %>%
  arrange(householder_nativity, householder_english)
```

```{r}
#English spoken at home
#LANX is language other than english spoken at home

household_language_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, LANX) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_language = first(LANX, na.rm = TRUE),      # get the first person's language
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  #filter(householder_nativity == 2) %>%       # if only including foreign born hhlds 
  group_by(householder_nativity, householder_language) %>%  # group by nativity and lang
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and language
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100 ) %>%  # calculate percentage within each group
    mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ NA_character_)) %>%
    mutate(householder_language = case_when(                             # rename variables 
    householder_language == 1 ~ "Yes, speaks another language",
    householder_language == 2 ~ "No, speaks only English",
    TRUE ~ NA_character_)) %>%
  filter(!is.na(householder_language)) %>%
  arrange(householder_nativity, householder_language)

```

```{r}
#Limited english speaking hhld
#LNGI is a hhld variable for limited english speaking household

household_limited_lang_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, LNGI) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_language = first(LNGI, na.rm = TRUE),      # get the first person's language
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  filter(householder_nativity == 2) %>%       # if only including foreign born hhlds 
  group_by(householder_nativity, householder_language) %>%  # group by nativity and lang
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and language
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
    mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ NA_character_)) %>%
    mutate(householder_language = case_when(                             # rename variables 
    householder_language == 1 ~ "At least one person speaks English",
    householder_language == 2 ~ "No one speaks English",
    TRUE ~ NA_character_)) %>%
  filter(!is.na(householder_language)) %>%
  arrange(householder_nativity, householder_language)

```


```{r}
#Export English table
 write.xlsx(list('English ability' = household_english_foreign_born, 
                 'Language' = household_language_foreign_born,
                 'Limited Eng Hhld' = household_limited_lang_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_english_ability.xlsx") 
```


```{r}
#Place of origin - broad categories - WAOB
household_world_origin_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, WAOB) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_origin = first(WAOB, na.rm = TRUE),        # get the first person's place of birth
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_origin) %>%  # group by nativity and tenure
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and tenure
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(householder_origin = case_when(                             # rename variables 
    householder_origin == 1 ~ "US state",
    householder_origin == 2 ~ "PR and US Islands",
    householder_origin == 3 ~ "Latin America",
    householder_origin == 4 ~ "Asia",
    householder_origin == 5 ~ "Europe",
    householder_origin == 6 ~ "Africa",
    householder_origin == 7 ~ "Northern America",
    householder_origin == 8 ~ "Oceania and at sea",
    TRUE ~ NA_character_)) %>%
  arrange(householder_nativity, householder_origin)
```

```{r}
#Export place of origin table 
 write.xlsx(list('Place of origin' = household_world_origin_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_origin.xlsx") 
```

```{r}
#Educational attainment for  head of household - SCHL variable
householder_edu_foreign_born <- pums %>%
 filter(RT != "H") %>%    # exclude hhlds 
 filter(AGEP >= 25) %>%   # only adults 25+
 mutate(EDU = case_when(      # create edu groups
      as.numeric(SCHL) >= 1 & as.numeric(SCHL) <= 15 ~ "Less than high school diploma",
      as.numeric(SCHL) >= 16 & as.numeric(SCHL) <= 17 ~ "High school diploma or equivalent",
      as.numeric(SCHL) >= 18 & as.numeric(SCHL) <= 19 ~ "Some college",
      as.numeric(SCHL) == 20 ~ "Associate degree",
      as.numeric(SCHL) == 21 ~ "Bachelor's degree",
      as.numeric(SCHL) >= 22 & as.numeric(SCHL) <= 24 ~ "Graduate, professional, or doctorate degree",
      TRUE ~ "0")) %>% 
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, EDU) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_edu = first(EDU, na.rm = TRUE),  # get the first person's educational attainment
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, householder_edu) %>%  # group by nativity and year of entry
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and year of entry
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
    mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
   mutate (householder_edu = factor(householder_edu, levels = c(   # order groups in correct order
     "Less than high school diploma",
     "High school diploma or equivalent",
     "Some college",
     "Associate degree",
     "Bachelor's degree",
     "Graduate, professional, or doctorate degree"))) %>%
   arrange(householder_nativity, householder_edu)
```

```{r}
#Edu attainment for all household members 
household_member_edu_foreign_born <- pums %>%
 filter(RT != "H") %>%      # exclude households
 filter(AGEP >= 25) %>%     # only population 25 and over
 mutate(EDU = case_when(    # create edu groups
      as.numeric(SCHL) >= 1 & as.numeric(SCHL) <= 15 ~ "Less than high school diploma",
      as.numeric(SCHL) >= 16 & as.numeric(SCHL) <= 17 ~ "High school diploma or equivalent",
      as.numeric(SCHL) >= 18 & as.numeric(SCHL) <= 19 ~ "Some college",
      as.numeric(SCHL) == 20 ~ "Associate degree",
      as.numeric(SCHL) == 21 ~ "Bachelor's degree",
      as.numeric(SCHL) >= 22 & as.numeric(SCHL) <= 24 ~ "Graduate, professional, or doctorate degree",
      TRUE ~ "0")) %>% 
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, EDU) %>%
 group_by(SERIALNO, EDU, NATIVITY) %>%  # group by household ID, education, and nativity
 summarise(
    total_weight = sum(WGTP, na.rm = TRUE),  # sum weights for each edu level within households
    .groups = "drop") %>%
 group_by(NATIVITY, EDU) %>%  # group by nativity and education
 summarise(
    total_weight_by_edu_nativity = sum(total_weight, na.rm = TRUE),  # total weight by edu and nativity group
    .groups = "drop") %>%
 group_by(NATIVITY) %>%
 mutate(
    total_weight_by_nativity = sum(total_weight_by_edu_nativity, na.rm = TRUE),  # calculate nativity group totals
    percentage_within_nativity = (total_weight_by_edu_nativity / total_weight_by_nativity) * 100  # calculate percentage
 ) %>%
 mutate(NATIVITY = case_when(  # rename nativity categories
    NATIVITY == 1 ~ "Native",
    NATIVITY == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
     mutate (EDU = factor(EDU, levels = c(   # order groups in correct order
     "Less than high school diploma",
     "High school diploma or equivalent",
     "Some college",
     "Associate degree",
     "Bachelor's degree",
     "Graduate, professional, or doctorate degree"))) %>%
 arrange(NATIVITY, EDU)
```

```{r}
#Export education tables
write.xlsx(list('Householder edu attainment' = householder_edu_foreign_born, 
                'Household member edu' = household_member_edu_foreign_born), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_edu.xlsx") 
```

# RPA level

Identify households whose head of household is foreign born in each RPA

```{r}
#Calculate the total number of households in sample by RPA
household_data_RPA <- pums_RPA %>%
  filter(RT == "H") %>%
  filter(TYPEHUGQ == 1) %>%
  filter(NP > 0) %>%         # excluding vacant units
  group_by(rpa_acr) %>%
  summarise(total_weighted_sum = sum(WGTP)) 

#calculate share of foreign born for each RPA
household_foreign_born_summary_table_RPA <- pums_RPA %>%
  filter(RT != "H") %>%   # exclude hhlds because nativity is a person-level data point
  group_by(SERIALNO, rpa_acr) %>%  # group by household and rpa
  summarise(first_weight = first(WGTP, na.rm = TRUE), # get the first person's weight for hhld - head of hhld
    NATIVITY = first(NATIVITY), .groups = "drop") %>%           # get the nativity for the first person                          
  group_by(NATIVITY, rpa_acr) %>%                               # group by nativity to calculate total weights for each type
  summarise(total_by_nativity= sum(first_weight, na.rm = TRUE), # sum the weights by nativity
    .groups = "drop") %>%                                       
  mutate(NATIVITY = case_when(                                  # rename variables 
    NATIVITY == 1 ~ "Native",
    NATIVITY == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) 

#combine tables  
RPA_foreign_born_table <- household_foreign_born_summary_table_RPA %>%
  left_join(household_data_RPA, by = c("rpa_acr")) %>%
  mutate(percentage = (total_by_nativity / total_weighted_sum) * 100) %>%
  arrange(rpa_acr)

```

```{r}
#Export RPA nativity data 
 write.xlsx(list('RPA nativity' = RPA_foreign_born_table), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_RPA.xlsx") 
```

#Sub group analysis of hhld where the head of hhld is recent immigrant, e.g. year of entry 2014 or more recent. 

```{r}
#Cost burden for recent immigrants - head of hhld 
#Cost burden - renter and owner cost burden - GRPIP OCPIP

#Renter cost burden 
household_renter_burden_recent_immig <- pums %>%
 filter(RT != "H") %>%                # exclude households 
 filter(TEN == 3) %>%                 # filter for just renters
 mutate(Cost.Burden = case_when(      # create cost burden groups 
      GRPIP <= 30 ~ "No cost burden",
      GRPIP > 30 & GRPIP <= 50 ~ "Cost burden",
      GRPIP > 50 ~ "Severe cost burden",
      TRUE ~ "0")) %>%
 mutate(Year.Entry = case_when(      # create year of entry groups
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 2013 ~ "1934 to 2013",
      YOEP >= 2014 & YOEP <= 2024 ~ "2014 and later",
      TRUE ~ "0")) %>%
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, Cost.Burden, Year.Entry) %>%
 group_by(SERIALNO) %>%
 summarise(
    householder_renter_burden = first(Cost.Burden, na.rm = TRUE),  # get the first person's cost burden
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    year_entry = first(Year.Entry, na.rm = TRUE),  # get the year entry for the first person (householder)
    .groups = "drop") %>%
 filter(householder_nativity == 2) %>%  # filter for foreign-born householders only
 group_by(householder_nativity, year_entry, householder_renter_burden) %>%  # group by nativity, year entry, and cost burden
 summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity, year entry, and cost burden
    .groups = "drop") %>%
 group_by(householder_nativity, year_entry) %>%  # group by nativity and year entry to calculate totals within each group
 mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
 ) %>%
 mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
 mutate(householder_renter_burden = factor(householder_renter_burden, levels = c(        # order groups in correct order
    "No cost burden", 
    "Cost burden", 
    "Severe cost burden"))) %>%
 arrange(householder_nativity, year_entry, householder_renter_burden)


#Owner cost burden 
household_owner_burden_recent_immig <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 filter(TEN == 1 | TEN == 2) %>%                 # filter for just owners
 mutate(Cost.Burden = case_when(                 # create cost burden groups 
      OCPIP <= 30 ~ "No cost burden",
      OCPIP > 30 & OCPIP <= 50 ~ "Cost burden",
      OCPIP > 50 ~ "Severe cost burden",
      TRUE ~ "0")) %>% 
 mutate(Year.Entry = case_when(      # create year of entry groups
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 2013 ~ "1934 to 2013",
      YOEP >= 2014 & YOEP <= 2024 ~ "2014 and later",
      TRUE ~ "0")) %>%
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, Cost.Burden, Year.Entry) %>%
 group_by(SERIALNO) %>%
 summarise(
    householder_owner_burden = first(Cost.Burden, na.rm = TRUE),  # get the first person's cost burden
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    year_entry = first(Year.Entry, na.rm = TRUE),  # get the year entry for the first person (householder)
    .groups = "drop") %>%
 filter(householder_nativity == 2) %>%  # filter for foreign-born householders only
 group_by(householder_nativity, year_entry, householder_owner_burden) %>%  # group by nativity, year entry, and cost burden
 summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity, year entry, and cost burden
    .groups = "drop") %>%
 group_by(householder_nativity, year_entry) %>%  # group by nativity and year entry to calculate totals within each group
 mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
 ) %>%
 mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
 mutate(householder_renter_burden = factor(householder_owner_burden, levels = c(        # order groups in correct order
    "No cost burden", 
    "Cost burden", 
    "Severe cost burden"))) %>%
 arrange(householder_nativity, year_entry, householder_owner_burden)

```

```{r}
#Export cost burden tables
 write.xlsx(list('Recent immig renter burden' = household_renter_burden_recent_immig,
                 'Recent immig owner burden' = household_owner_burden_recent_immig), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_recent_cost_burden.xlsx") 
```

```{r}
#tenure for recent immigrants
householder_tenure_recent_immig <- pums %>%
 filter(RT != "H") %>%   # exclude households
 mutate(Year.Entry = case_when(      # create year of entry groups
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 2013 ~ "1934 to 2013",
      YOEP >= 2014 & YOEP <= 2024 ~ "2014 and later",
      TRUE ~ "0")) %>%
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, TEN, Year.Entry) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_tenure = first(TEN, na.rm = TRUE),         # get the first person's tenure
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),              # get the weight for the first person (householder)
    year_entry = first(Year.Entry, na.rm = TRUE),          # get the year entry for the first person (householder)
    .groups = "drop") %>%
 filter(householder_nativity == 2) %>%                     # filter for foreign-born householders only
 group_by(year_entry, householder_tenure) %>%              # group by year entry and tenure for sum
 summarise(
    total_weight = sum(first_weight, na.rm = TRUE),        # summarize total weights by year entry and tenure
    .groups = "drop") %>%
 group_by(year_entry) %>%                                  # group by year entry for nativity weight totals
 mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),       # calculate the total weight for each year entry group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100) %>%  # calculate percentage within each group
 mutate(householder_tenure = case_when(                               # rename tenure categories
    householder_tenure == "1" ~ "Owned with mortgage",
    householder_tenure == "2" ~ "Owned without mortgage",
    householder_tenure == "3" ~ "Rented",
    householder_tenure == "4" ~ "Occupied without payment of rent",
    TRUE ~ NA_character_)) %>%
 filter(!is.na(householder_tenure)) %>%
 arrange(year_entry, householder_tenure)

```

```{r}
#Export tenure table
write.xlsx(list('Tenure of recent immig' = householder_tenure_recent_immig), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_recent_tenure.xlsx") 
```

```{r}
#Household size for recent immigrants 
household_size_recent_immig <- pums %>%
 filter(RT != "H") %>%      # exclude hhlds 
 #filter(NATIVITY == 2) %>%  # filter for only foreign born
 mutate(Year.Entry = case_when(      # create year of entry groups
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 2013 ~ "1934 to 2013",
      YOEP >= 2014 & YOEP <= 2024 ~ "2014 and later",
      TRUE ~ "0")) %>%
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, NP, Year.Entry) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    household_size = first(NP, na.rm = TRUE),              # get the number of people in hhld for first person
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),              # get the weight for the first person (householder) 
    year_entry = first(Year.Entry, na.rm = TRUE),          # get the year entry for the first person (householder)
    .groups = "drop") %>%
  filter(householder_nativity == 2) %>%                     # filter for foreign-born householders only
  mutate(household_size_category = case_when(              # create household size categories
    household_size >= 10 ~ "10 or more",
    household_size < 10 ~ as.character(household_size),    # keep sizes less than 10 as strings to categorize them
    TRUE ~ "Unknown")) %>%
  group_by(household_size_category, year_entry) %>%  # group by size and year of entry group
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each size and year of entry group
    .groups = "drop") %>%
  group_by(year_entry) %>%                 # group by year of entry to calculate totals within each group
  mutate(
    total_weight_by_entry = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each entry group
    percentage_within_entry = (total_weight / total_weight_by_entry) * 100) %>%       # calculate percentage within each group
      mutate (household_size_category = factor(household_size_category, levels = c(   # order groups in correct order
     "1",
     "2",
     "3",
     "4",
     "5",
     "6",
     "7",
     "8",
     "9",
     "10 or more"))) %>%
  arrange(year_entry, household_size_category)
```

```{r}
#Export hhld size table for recent immigrants
write.xlsx(list('Hhld size of recent immig' = household_size_recent_immig), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_recent_hhld_size.xlsx") 
```


```{r}
#Edu attainment for recent immigrants - all members in household
household_member_edu_recent_immig <- pums %>%
 filter(RT != "H") %>%      # exclude household data points
 filter(AGEP >= 25) %>%     # only population 25 and over
 filter(NATIVITY == 2) %>%  # filter for only foreign born
 mutate(Year.Entry = case_when(      # create year of entry groups
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 2013 ~ "1934 to 2013",
      YOEP >= 2014 & YOEP <= 2024 ~ "2014 and later",
      TRUE ~ "0")) %>%
 mutate(EDU = case_when(            # create edu groups
      as.numeric(SCHL) >= 1 & as.numeric(SCHL) <= 15 ~ "Less than high school diploma",
      as.numeric(SCHL) >= 16 & as.numeric(SCHL) <= 17 ~ "High school diploma or equivalent",
      as.numeric(SCHL) >= 18 & as.numeric(SCHL) <= 19 ~ "Some college",
      as.numeric(SCHL) == 20 ~ "Associate degree",
      as.numeric(SCHL) == 21 ~ "Bachelor's degree",
      as.numeric(SCHL) >= 22 & as.numeric(SCHL) <= 24 ~ "Graduate, professional, or doctorate degree",
      TRUE ~ "0")) %>% 
 select(uniq_obs, SERIALNO, WGTP, NATIVITY, EDU, Year.Entry) %>%
 group_by(SERIALNO, EDU, Year.Entry) %>%     # group by household ID, education, and year of entry
 summarise(
    total_weight = sum(WGTP, na.rm = TRUE),  # sum weights for each edu level within households
    .groups = "drop") %>%
 group_by(Year.Entry, EDU) %>%  # group by year of entry and education
 summarise(
    total_weight_by_edu_nativity = sum(total_weight, na.rm = TRUE),  # total weight by edu and nativity group
    .groups = "drop") %>%
 group_by(Year.Entry) %>%
 mutate(
    total_weight_by_entry = sum(total_weight_by_edu_nativity, na.rm = TRUE),  # calculate nativity group totals
    percentage_within_entry = (total_weight_by_edu_nativity / total_weight_by_entry) * 100) %>%  # calculate percentage
    mutate (EDU = factor(EDU, levels = c(   # order groups in correct order
     "Less than high school diploma",
     "High school diploma or equivalent",
     "Some college",
     "Associate degree",
     "Bachelor's degree",
     "Graduate, professional, or doctorate degree"))) %>%
 arrange(Year.Entry, EDU)
```

```{r}
#Export edu table for recent immigrants 
write.xlsx(list('Edu of recent immig' = household_member_edu_recent_immig), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_recent_edu.xlsx") 
```


```{r}
#Age of recent immigrant householders 

# code copied below from above analysis - need to add year of entry groups 

#Age of householder for foreign born vs. native hhlds 
householder_age_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds
 select(uniq_obs, SERIALNO, WGTP, HHLDRAGEP, NATIVITY) %>% 
 mutate(age_range = case_when(                  # create age ranges
    HHLDRAGEP >= 0 & HHLDRAGEP < 5 ~ "Under 5",
    HHLDRAGEP >= 5 & HHLDRAGEP < 18 ~ "5-17",
    HHLDRAGEP >= 18 & HHLDRAGEP < 35 ~ "18-34",
    HHLDRAGEP >= 35 & HHLDRAGEP < 65 ~ "35-64",
    HHLDRAGEP >= 65 & HHLDRAGEP < 75 ~ "65-74",
    HHLDRAGEP >= 75 ~ "75 and over")) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_age = first(HHLDRAGEP, na.rm = TRUE),  # get the first person's householder age
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    age_range = first(age_range, na.rm = TRUE),  # get age range for the first person (householder)
    .groups = "drop") %>%
  group_by(householder_nativity, age_range) %>%  # group by nativity and age range
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and age range
    .groups = "drop") %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate (age_range = factor(age_range, levels = c(   # order groups in correct order
      "5-17",
      "18-34",
      "35-64",
      "65-74",
      "75 and over"))) %>%
   arrange(householder_nativity, age_range)
```

```{r}
#In progress

#Share of each age group that is either foreign born or native 
household_age_by_nativity <- pums %>%
  filter(RT != "H") %>%   # exclude hhlds
  select(RT, uniq_obs, SERIALNO, WGTP, HHLDRAGEP, NATIVITY) %>% 
  mutate(age_range = case_when(
    HHLDRAGEP >= 0 & HHLDRAGEP < 5 ~ "Under 5",
    HHLDRAGEP >= 5 & HHLDRAGEP < 18 ~ "5-17",
    HHLDRAGEP >= 18 & HHLDRAGEP < 35 ~ "18-34",
    HHLDRAGEP >= 35 & HHLDRAGEP < 65 ~ "35-64",
    HHLDRAGEP >= 65 & HHLDRAGEP < 75 ~ "65-74",
    HHLDRAGEP >= 75 ~ "75 and over")) %>% 
  group_by(SERIALNO) %>%  # group by household
  summarise(
    householder_age_range = first(age_range, na.rm = TRUE),  # get age range of the householder
    householder_nativity = first(NATIVITY, na.rm = TRUE),    # get nativity of the householder
    first_weight = first(WGTP, na.rm = TRUE),                # get weight for the householder
    .groups = "drop") %>%
  mutate(householder_nativity = case_when(                   # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  group_by(householder_age_range, householder_nativity) %>%  # group by age range and nativity
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # calculate total weight for each age and nativity group
    .groups = "drop") %>%
  group_by(householder_age_range) %>%  # group by age range to calculate percentages within each age group
  mutate(
    total_weight_by_age_range = sum(total_weight, na.rm = TRUE),  # total weight by age group
    percentage_within_age_range = (total_weight / total_weight_by_age_range) * 100) %>%  # calculate percentage within each age group
    mutate (householder_age_range = factor(householder_age_range, levels = c(   # order groups in correct order
      "5-17",
      "18-34",
      "35-64",
      "65-74",
      "75 and over"))) %>%
  arrange(householder_age_range, householder_nativity)  # sort by age range and nativity
```

```{r}
#Export age tables for recent immigrants
 write.xlsx(list('Age' = householder_age_,
                 'Share of age group' = household_age_), 
           file = "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output/immig_age_of_hhlder.xlsx") 
```

```{r}
#Count of hhlds headed by recent immigrants by RPA and year of entry groups

########DRAFT code, not finished 


household_data_recent_immig_RPA <- pums_RPA %>%
  filter(RT != "H") %>%      #exclude household data points, use SERIALNO as household grouping instead
  filter(TYPEHUGQ == 1) %>%
  filter(NP > 0) %>%         # excluding vacant units
  filter(NATIVITY == 2) %>%  # filter for only foreign born people
     mutate(Year.Entry = case_when(      # create year of entry groups
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 2013 ~ "1934 to 2013",
      YOEP >= 2014 & YOEP <= 2024 ~ "2014 and later",
      TRUE ~ "0")) %>%
  group_by(rpa_acr, SERIALNO, Year.Entry) %>%
  summarise(total_weighted_sum = first(WGTP), .groups= "drop") 




#calculate share of foreign born for each RPA by year of entry groups
household_recent_immig_summary_table_RPA <- pums_RPA %>%
  filter(RT != "H") %>%   # exclude hhlds 
  filter(NATIVITY == 2) %>%  # filter for only foreign born
   mutate(Year.Entry = case_when(      # create year of entry groups
      YOEP < 1934 ~ "Before 1934",
      YOEP >= 1934 & YOEP <= 2013 ~ "1934 to 2013",
      YOEP >= 2014 & YOEP <= 2024 ~ "2014 and later",
      TRUE ~ "0")) %>%
  group_by(SERIALNO, rpa_acr, Year.Entry) %>%                   # group by household, rpa, and year of entry
  summarise(first_weight = first(WGTP, na.rm = TRUE),           # get the first person's weight for hhld - head of hhld
            .groups = "drop") %>%                                   
  group_by(Year.Entry, rpa_acr) %>%                               # group by year of entry and rpa to calculate total weights for each
  summarise(total_by_entry= sum(first_weight, na.rm = TRUE),   # sum the weights by entry groups
    .groups = "drop")                                       


#combine tables  
RPA_foreign_born_table <- household_foreign_born_summary_table_RPA %>%
  left_join(household_data_RPA, by = c("rpa_acr")) %>%
  mutate(percentage = (total_by_nativity / total_weighted_sum) * 100) %>%
  arrange(rpa_acr)
```

```{r}
#Any other household variables for recent immigrants

```


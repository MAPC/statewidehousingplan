---
title: "Control Totals"
format: html
editor: visual
---

# 0.0 Setup - Define helper functions, set knitr path, load necessary packages, set muni data keys

# 0.1 - Set knitr path + root for inputs

```{r}

# Set Scenario Names

#Population Scenario
scen <- 'Scenario_1'
#Headship rate Scenario
hdshp <- 'acs1721'

#Use when Rproject is open
#root <- '../../../../Data/Working/Regional_Control_Totals/'

# base <- "K:/DataServices/Projects/Current_Projects/"
base <- "S:/Network Shares/K Drive/DataServices/Projects/Current_Projects/"

#General K drive filepath
root <- paste0(base, "Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/")

#Set output filepath
output_path <- paste0(base, "Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/", scen, "/")

#Set knitr path
knitr::opts_knit$set(root.dir = root)
```

# 0.2 - Set package dependencies, set environment, set up data keys

```{r}
library(tidycensus)
library(tidyverse)
library(data.table)
library(reticulate)
library(mapcdatakeys)
library(janitor)
library(readxl)

##get rid of scientific notation
options(scipen = 999)
#Set random seed
set.seed(351)

#Set up muni data keys
#MPO Data Keys
keys.mpo <- mapcdatakeys::all_muni_data_keys |> 
  select(
    muni_id, muni_name, mpo
  ) |> 
  mutate(
    muni_id = as.character(muni_id),
    muni_name = ifelse(muni_name == "Manchester-by-the-Sea", "Manchester", muni_name)
  )

#RPA Data Keys
keys.rpa <- mapcdatakeys::all_muni_data_keys |> 
  select(
    muni_id, muni_name, rpa_acr
  ) |> 
  mutate(
    muni_id = as.character(muni_id),
    muni_name = ifelse(muni_name == "Manchester-by-the-Sea", "Manchester", muni_name)
  )

#Municipal GEOIDs for 2010 Decennial Census
GEOID.10 <- mapcdatakeys::all_muni_data_keys |>  
  select(muni_id, cosub_cn10) |> 
  mutate(
    GEOID = as.character(cosub_cn10)
  ) |> 
  select(GEOID, muni_id)

#Municipal GEOIDs for 2020 Decennial Census
GEOID.20 <- mapcdatakeys::all_muni_data_keys |>  
  select(muni_id, cosub_cn20) |> 
  mutate(
    GEOID = as.character(cosub_cn20)
  ) |> 
  select(GEOID, muni_id)

#County GEOIDs for 2010 Decennial Census
GEOID.cn.10 <- mapcdatakeys::all_muni_data_keys |>  
  mutate(
    GEOID = as.character(str_sub(cosub_cn10, 1, 5))
  ) |> 
  select(county_id, GEOID) |> 
  distinct(
    GEOID,
    .keep_all = TRUE
  )

#County GEOIDs for 2020 Decennial Census
GEOID.cn.20 <- mapcdatakeys::all_muni_data_keys |>  
  mutate(
    GEOID = as.character(str_sub(cosub_cn20, 1, 5))
  ) |> 
  select(county_id, GEOID) |> 
  distinct(
    GEOID,
    .keep_all = TRUE
  )


```

# 0.3 - Define Helper Functions

```{r}
sun <- function(x){
  sort(unique(x))}
lun <- function(x){
  length(unique(x))}
sna <- function(x){
  sort(names(x))}

#Decennial Census API Query Function
#Load 2010 Decennial variables for easier filtering
vars.dec10 <- load_variables(2010, dataset = c("sf1"))

#Load 2020 Decennial variables for easier filtering
vars.dec20 <- load_variables(2020, dataset = c("dhc"))

#decennial_call - Decennial Census Data API Query
#decennial.var_name: list of variables to query the API
#year: vintage of decennial census
decennial_call <- function(decennial.var_name, geog, year){
  if (year == 2010){
    get_decennial(
      variables = decennial.var_name,
      geography = geog, #Specify the level of geography
      state = "MA", #Only evaluating MA municipalities
      year = year, #Set the year in the function call (either 2010 or 2020)
      sumfile = "sf1" #Different summary files depending on year
    )
    
  } else{
    get_decennial(
      variables = decennial.var_name,
      geography = geog, #Specify the level of geography
      state = "MA", #Only evaluating MA municipalities
      year = year, #Set the year in the function call (either 2010 or 2020)
      sumfile = "dhc" #Different summary files depending on year
    )
  }
}

#Decennial Data Cleaning Functions
#dec.vars - loads a list of variables to pass to the decennial census query
#vars: dataframe of all variables in decennial census. pick from vars.dec10 and vars.dec20
#concept: string of the "concept" variable in the vars dataframe
dec.vars <- function(vars, con){
  vars |>  
  filter(concept == con) |> 
  select(name) |> 
  mutate(
    name = as.character(name)
  ) |>  
  pull(name) 
}

#dec.labels - Attaches relevant data labels to data pulled from the decennial census
#by five-year age group
#year: dataframe of all variables in decennial census. pick from vars.dec10 and vars.dec20
#con: string of the "concept" variable in the vars dataframe
dec.labels <- function(year, con){
  if (year == "2010"){
      vars.dec10 |>  
      filter(concept == con) |> #Filter the data to the specific concept
      select(name, label) |>  #Select relevant variables
      filter(str_detect(label, "years")) |> #Removing overhead categories
      #Mutate the text of the label variable to make easier cross-reference to ageCAT6
      #age groups later on in the analysis
      mutate( 
        sex1 = str_extract(label, "Female"),
        sex2 = str_extract(label, "Male"),
        sex = coalesce(sex1,sex2),
        label = gsub("Total!!Male!!","", label),
        label = gsub("Total!!Female!!","", label),
        label = gsub(" ", "_", label),
        label = paste0("pop_", label)
      ) |> 
      #Remove superfluous variables used to coalesce
      select(-c(sex1, sex2)) |>  
      na.omit()
    
  } else{
    vars.dec20 |>  
      filter(concept == con) |> #Filter the data to the specific concept
      select(name, label) |>  #Select relevant variables
      filter(str_detect(label, "years")) |> #Removing overhead categories
      #Mutate the text of the label variable to make easier cross-reference to ageCAT6
      #age groups later on in the analysis
      mutate(
        sex1 = str_extract(label, "Female"),
        sex2 = str_extract(label, "Male"),
        sex = coalesce(sex1,sex2),
        label = gsub("!!Total:!!Male:","", label),
        label = gsub("!!Total:!!Female:","", label),
        label = gsub(" ", "_", label),
        label = sub("!!", "", label),
        label = paste0("pop", label),
      ) |> 
      #Remove superfluous variables used to coalesce
      select(-c(sex1, sex2)) |>  
      na.omit()
    
  }
}

#Group Quarters Cleaning function
gq.clean <- function(df){
    df |> 
    # Mutate the text of the label variable to make easier cross-reference to ageCAT6
    # age groups later on in the analysis
    mutate(
      label = str_replace(label,"\\s*\\([^\\)]+\\)",""),
      label = str_replace(label, "Total_!!Male!!",""),
      label = str_replace(label, "Total_!!Female!!",""),
      label = str_replace(label, "Total_:!!Male:!!",""),
      label = str_replace(label, "Total_:!!Female:!!","")
    )
}
```

# 1.0 - Processing UMDI population data

```{r}
# Set Years of Interest
yrs <- c(2020,2030,2035,2040,2045,2050)

# Load in Household Population Projections
umdi_pop <- fread(paste0(root, "UMDI/",scen,"/UMDI_",scen,".csv")) |>
  filter(Year %in% yrs) |> 
  select(MCD,`MCD Code`,`Age Group`,Sex, Year, Population) |> 
  dplyr::rename(
    muni_name = MCD,
    muni_id = `MCD Code`,
    ageCAT6 = `Age Group`,
    year = Year,
    pop = Population
  ) |>  
  #Change the data type of both "year" and "pop" variables
  mutate(
    year = as.numeric(year),
    pop = as.numeric(gsub(',','',pop)),
    muni_id = as.character(muni_id),
    ageCAT6 = as.character(ageCAT6)
  )

#RPA Aggregations (MAPC101)
umdi.pop.MAPC101 <- left_join(
  umdi_pop,
  keys.rpa,
  by = c("muni_id", "muni_name")
) |> 
  group_by(
    rpa_acr,
    #Sex,
    ageCAT6,
    year
  ) |> 
  summarise(
    pop = sum(pop)
  ) |> 
  ungroup()

#MPO Aggregations (MAPC97)
umdi.pop.MAPC97 <- left_join(
  umdi_pop,
  keys.mpo,
  by = c("muni_id", "muni_name")
)|> 
  group_by(
    mpo,
    #Sex,
    ageCAT6,
    year
  ) |> 
  summarise(
    pop = sum(pop)
  ) |> 
  ungroup()

#Remove topline umdi population projections
rm(umdi_pop)


```

# 2.0 Querying and Processing Census Population Data

# 2.1 Total Population by Age by Sex from 2010 and 2020 Decennial Censuses

```{r}
#===============================================================================
#Decennial 2010 Population
#Creates a list of sex by age population variables to use in the API query
pop.vars <- dec.vars(vars.dec10, "SEX BY AGE")
pop.vars <- data.frame(pop.vars) |> dplyr::slice(1:49) |> pull(pop.vars)

#Assigns appropriate labels to the Decennial Census variables
pop.labels <- dec.labels("2010", "SEX BY AGE") |> slice(1:46)

#Queries the Census API via {tidycensus} to retrieve data about the population
pop.values <- decennial_call(pop.vars, geog = "county subdivision", 2010)

#Clean the Population data.
pop.10 <- pop.values |> 
  filter(GEOID %in% GEOID.10$GEOID) |> 
  right_join(
    pop.labels,
    by = c("variable"="name")
  ) |> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == 'pop_Under_5_years' ~ '1',
      label == "pop_5_to_9_years" ~ '2',
      label == "pop_10_to_14_years" ~ '3',
      label %in% c("pop_15_to_17_years","pop_18_and_19_years") ~ '4',
      label %in% c("pop_20_years","pop_21_years","pop_22_to_24_years") ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label %in% c("pop_60_and_61_years","pop_62_to_64_years") ~ '13',
      label %in% c("pop_65_and_66_years","pop_67_to_69_years") ~ '14',
      label == "pop_70_to_74_years" ~ '15',
      label == "pop_75_to_79_years" ~ '16',
      label == "pop_80_to_84_years" ~ '17',
      label == "pop_85_years_and_over" ~ '18'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.10,
    by = c('GEOID')
  ) |>  
  mutate(
    muni_id = as.character(muni_id)
  ) |> 
  dplyr::rename(
    Population = value,
    Sex = sex
  ) |>  
  select(muni_id, Sex, ageCAT6, Population) |>  
  group_by(
    muni_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    Population = sum(Population)
  ) |>  
  ungroup()

#Remove dataframes no longer needed in the process.
rm(pop.labels, pop.values, pop.vars)

#===============================================================================
#Decennial 2020 Population
#Creates a list of sex by age population variables to use in the API query
pop.vars <- dec.vars(vars.dec20, "SEX BY AGE FOR SELECTED AGE CATEGORIES")

#Assigns appropriate labels to the Decennial Census variables
pop.labels <- dec.labels("2020", "SEX BY AGE FOR SELECTED AGE CATEGORIES")

#Queries the Census API via {tidycensus} to retrieve data about the population
pop.values <- decennial_call(pop.vars, geog = "county subdivision", 2020)

#Clean the Population data.
pop.20 <- pop.values |> 
  filter(GEOID %in% GEOID.20$GEOID) |> 
  right_join(
    pop.labels,
    by = c("variable"="name")
  ) |> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == 'pop_Under_5_years' ~ '1',
      label == "pop_5_to_9_years" ~ '2',
      label == "pop_10_to_14_years" ~ '3',
      label %in% c("pop_15_to_17_years","pop_18_and_19_years") ~ '4',
      label %in% c("pop_20_years","pop_21_years","pop_22_to_24_years") ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label %in% c("pop_60_and_61_years","pop_62_to_64_years") ~ '13',
      label %in% c("pop_65_and_66_years","pop_67_to_69_years") ~ '14',
      label == "pop_70_to_74_years" ~ '15',
      label == "pop_75_to_79_years" ~ '16',
      label == "pop_80_to_84_years" ~ '17',
      label == "pop_85_years_and_over" ~ '18'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.20,
    by = c('GEOID')
  ) |>  
  mutate(
    muni_id = as.character(muni_id)
  ) |> 
  dplyr::rename(
    Population = value,
    Sex = sex
  ) |>  
  select(muni_id, Sex, ageCAT6, Population) |>  
  group_by(
    muni_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    Population = sum(Population)
  ) |>  
  ungroup()

#Remove dataframes no longer needed in the process.
rm(pop.labels, pop.values, pop.vars)
gc()
```

# 2.2 Query Census Household Population data for 2010 and 2020

```{r}
#===============================================================================
#Decennial 2010 Population in Households
#Creates a list of sex by age population variables to use in the API query
pa.vars <- dec.vars(vars.dec10, "SEX BY AGE FOR THE POPULATION IN HOUSEHOLDS")

#Assigns appropriate labels to the Decennial Census variables
pa.labels <- dec.labels("2010", "SEX BY AGE FOR THE POPULATION IN HOUSEHOLDS")

#Queries the Census API via {tidycensus} to retrieve data about the population
#in households
pa.values <- decennial_call(pa.vars, geog = "county subdivision", 2010)

#Clean the Household Population data.
hhpop.10 <- pa.values |> 
  filter(GEOID %in% GEOID.10$GEOID) |> 
  right_join(
    pa.labels,
    by = c("variable"="name")
  ) |> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == 'pop_Under_5_years' ~ '1',
      label == "pop_5_to_9_years" ~ '2',
      label == "pop_10_to_14_years" ~ '3',
      label %in% c("pop_15_to_17_years","pop_18_and_19_years") ~ '4',
      label %in% c("pop_20_years","pop_21_years","pop_22_to_24_years") ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label %in% c("pop_60_and_61_years","pop_62_to_64_years") ~ '13',
      label %in% c("pop_65_and_66_years","pop_67_to_69_years") ~ '14',
      label == "pop_70_to_74_years" ~ '15',
      label == "pop_75_to_79_years" ~ '16',
      label == "pop_80_to_84_years" ~ '17',
      label == "pop_85_years_and_over" ~ '18'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.10,
    by = c('GEOID')
  ) |>  
  mutate(
    muni_id = as.character(muni_id)
  ) |> 
  dplyr::rename(
    HHPopulation = value,
    Sex = sex
  ) |>  
  select(muni_id, Sex, ageCAT6, HHPopulation) |>  
  group_by(
    muni_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    HHPopulation = sum(HHPopulation)
  ) |>  
  ungroup()

#Remove dataframes no longer needed in the process.
rm(pa.labels, pa.values, pa.vars)

#===============================================================================
#Decennial 2020 Population in Households
#Creates a list of sex by age population variables to use in the API query
pa.vars <- dec.vars(vars.dec20, "SEX BY AGE FOR THE POPULATION IN HOUSEHOLDS")

#Assigns appropriate labels to the Decennial Census variables
pa.labels <- dec.labels("2020", "SEX BY AGE FOR THE POPULATION IN HOUSEHOLDS")

#Queries the Census API via {tidycensus} to retrieve data about the population
#in households
pa.values <- decennial_call(pa.vars, geog = "county subdivision", 2020)

#Clean the 2020 Household Population data
hhpop.20 <- pa.values |> 
  filter(GEOID %in% GEOID.20$GEOID) |> 
  right_join(
    pa.labels,
    by = c("variable"="name")
  ) |> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == 'pop_Under_5_years' ~ '1',
      label == "pop_5_to_9_years" ~ '2',
      label == "pop_10_to_14_years" ~ '3',
      label %in% c("pop_15_to_17_years","pop_18_and_19_years") ~ '4',
      label %in% c("pop_20_years","pop_21_years","pop_22_to_24_years") ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label %in% c("pop_60_and_61_years","pop_62_to_64_years") ~ '13',
      label %in% c("pop_65_and_66_years","pop_67_to_69_years") ~ '14',
      label == "pop_70_to_74_years" ~ '15',
      label == "pop_75_to_79_years" ~ '16',
      label == "pop_80_to_84_years" ~ '17',
      label == "pop_85_years_and_over" ~ '18'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.20,
    by = c('GEOID')
  ) |>  
  mutate(
    muni_id = as.character(muni_id)
  ) |> 
  dplyr::rename(
    HHPopulation = value,
    Sex = sex
  ) |>  
  select(muni_id, Sex, ageCAT6, HHPopulation) |>  
  group_by(
    muni_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    HHPopulation = sum(HHPopulation)
  ) |>  
  ungroup()

#Remove dataframes no longer needed in the process.
rm(pa.labels, pa.values, pa.vars)
gc()
```

# 2.3.Sidebar Pull Household Type Data from 2020 Decennial Census

```{r}
#===============================================================================
#Decennial 2020 Population in Households
#Creates a list of sex by age population variables to use in the API query
hhtyp.vars <- dec.vars(vars.dec20, "HOUSEHOLD SIZE BY HOUSEHOLD TYPE BY PRESENCE OF OWN CHILDREN")

#Assigns appropriate labels to the Decennial Census variables
hhtyp.labels <- vars.dec20 |> 
      filter(name %in% hhtyp.vars) |> #Filter the data to the specific concept
      select(name, label) |>  #Select relevant variables
      filter(name %in% c("PCT2_002N", "PCT2_009N", "PCT2_013N", "PCT2_016N",
                         "PCT2_018N", "PCT2_0019N", "PCT2_008N", "PCT2_012N",
                         "PCT2_015N")) #Filtering for the relevant HH type categories

#Queries the Census API via {tidycensus} to retrieve data about the population
#in households
hhtyp.values <- decennial_call(hhtyp.vars, geog = "county subdivision", 2020)

#Clean the 2020 Household Population data
hhtyp.20 <- hhtyp.values |> 
  filter(GEOID %in% GEOID.20$GEOID) |> 
  inner_join(
    hhtyp.labels,
    by = c("variable"="name")
  )

```

# 2.3 Join 2010 and 2020 Population and Household Population data

```{r}
#Join Census Population and Household Population 
population.df <- purrr::reduce(
  list(pop.10, pop.20, hhpop.10,hhpop.20),
  dplyr::left_join, by = c("muni_id", "Sex", "ageCAT6")
  ) |> 
  #Rename variables for legibility.
  dplyr::rename(
    Population.10 = Population.x,
    Population.20 = Population.y,
    HHPopulation.10 = HHPopulation.x,
    HHPopulation.20 = HHPopulation.y
  ) |> 
  rowwise() |> 
  #Calculate Group Quarters population using Census Pop and HHpop data.
  mutate(
    GQPopulation.10 = Population.10 - HHPopulation.10,
    GQPopulation.20 = Population.20 - HHPopulation.20
  )

```

# 3.0 Group Quarters

# 3.1 Group Quarters Population - Total

```{r}
#===============================================================================
#Group Quarters Population 2010
#Creates a list of sex by age group quarters population variables to use in the API query
gq.vars <- dec.vars(vars.dec10, "GROUP QUARTERS POPULATION BY SEX BY AGE")

#Assigns appropriate labels to the Decennial Census variables
gq.labels <- dec.labels("2010", "GROUP QUARTERS POPULATION BY SEX BY AGE") |> gq.clean()

#Queries the Census API via {tidycensus} to retrieve data about the group 
#quarters population
gq.values <- decennial_call(gq.vars, geog = "county", 2010)

#Clean the 2010 Group Quarters Population data
gqpop.10 <- gq.values |> 
  filter(GEOID %in% GEOID.cn.10$GEOID) |> 
  right_join(
    gq.labels,
    by = c("variable" = "name")
  )|> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == 'pop_Under_5_years' ~ '1',
      label == "pop_5_to_9_years" ~ '2',
      label == "pop_10_to_14_years" ~ '3',
      label == "pop_15_to_19_years" ~ '4',
      label == "pop_20_to_24_years" ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label == "pop_60_to_64_years" ~ '13',
      label == "pop_65_to_69_years" ~ '14',
      label == "pop_70_to_74_years" ~ '15',
      label == "pop_75_to_79_years" ~ '16',
      label == "pop_80_to_84_years" ~ '17',
      label == "pop_85_years_and_over" ~ '18'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.cn.10,
    by = c('GEOID')
  ) |>  
  mutate(
    county_id = as.character(county_id)
  ) |> 
  dplyr::rename(
    GQPopulation = value,
    Sex = sex
  ) |>  
  select(county_id, Sex, ageCAT6, GQPopulation) |>  
  group_by(
    county_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    GQPopulation = sum(GQPopulation)
  ) |>  
  ungroup()
  
#Remove dataframes no longer needed in the process.
rm(gq.labels, gq.values, gq.vars)

#===============================================================================
#Group Quarters Population 2020
#Creates a list of sex by age group quarters population variables to use in the API query
gq.vars <- dec.vars(vars.dec20, "GROUP QUARTERS POPULATION BY SEX BY AGE")

#Assigns appropriate labels to the Decennial Census variables
gq.labels <- dec.labels("2020", "GROUP QUARTERS POPULATION BY SEX BY AGE") |> gq.clean()

#Queries the Census API via {tidycensus} to retrieve data about the group 
#quarters population
gq.values <- decennial_call(gq.vars, geog = "county", 2020)

#Clean the 2020 Group Quarters Population data
gqpop.20 <- gq.values |> 
  filter(GEOID %in% GEOID.cn.20$GEOID) |> 
  right_join(
    gq.labels,
    by = c("variable" = "name")
  )|> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == 'pop_Under_5_years' ~ '1',
      label == "pop_5_to_9_years" ~ '2',
      label == "pop_10_to_14_years" ~ '3',
      label == "pop_15_to_19_years" ~ '4',
      label == "pop_20_to_24_years" ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label == "pop_60_to_64_years" ~ '13',
      label == "pop_65_to_69_years" ~ '14',
      label == "pop_70_to_74_years" ~ '15',
      label == "pop_75_to_79_years" ~ '16',
      label == "pop_80_to_84_years" ~ '17',
      label == "pop_85_years_and_over" ~ '18'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.cn.20,
    by = c('GEOID')
  ) |>  
  mutate(
    county_id = as.character(county_id)
  ) |> 
  dplyr::rename(
    GQPopulation = value,
    Sex = sex
  ) |>  
  select(county_id, Sex, ageCAT6, GQPopulation) |>  
  group_by(
    county_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    GQPopulation = sum(GQPopulation)
  ) |>  
  ungroup()

#Remove dataframes no longer needed in the process.
rm(gq.labels, gq.values, gq.vars)
gc()
```

# 3.2 Group Quarters Population - University/College Students

```{r}
#===============================================================================
#Group Quarters Population - College and University Student Housing 2020
#Creates a list of sex by age group quarters population variables to use in the API query
gq.vars <- dec.vars(vars.dec10, "GROUP QUARTERS POPULATION IN COLLEGE/UNIVERSITY STUDENT HOUSING BY SEX BY AGE")

#Assigns appropriate labels to the Decennial Census variables
gq.labels <- dec.labels("2010", "GROUP QUARTERS POPULATION IN COLLEGE/UNIVERSITY STUDENT HOUSING BY SEX BY AGE") |> gq.clean()

#Queries the Census API via {tidycensus} to retrieve data about the group 
#quarters population in college or university housing
gq.values <- decennial_call(gq.vars, geog = "county", 2010)

#Clean the 2020 Group Quarters Population data
cu.gqpop.10 <- gq.values |> 
  filter(GEOID %in% GEOID.cn.10$GEOID) |> 
  right_join(
    gq.labels,
    by = c("variable" = "name")
  )|> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == 'pop_Under_5_years' ~ '1',
      label == "pop_5_to_9_years" ~ '2',
      label == "pop_10_to_14_years" ~ '3',
      label == "pop_15_to_19_years" ~ '4',
      label == "pop_20_to_24_years" ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label == "pop_60_to_64_years" ~ '13',
      label == "pop_65_to_69_years" ~ '14',
      label == "pop_70_to_74_years" ~ '15',
      label == "pop_75_to_79_years" ~ '16',
      label == "pop_80_to_84_years" ~ '17',
      label == "pop_85_years_and_over" ~ '18'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.cn.10,
    by = c('GEOID')
  ) |>  
  mutate(
    county_id = as.character(county_id)
  ) |> 
  dplyr::rename(
    CU.GQPopulation = value,
    Sex = sex
  ) |>  
  select(county_id, Sex, ageCAT6, CU.GQPopulation) |>  
  group_by(
    county_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    CU.GQPopulation = sum(CU.GQPopulation)
  ) |>  
  ungroup()

#Remove dataframes no longer needed in the process.
rm(gq.labels, gq.values, gq.vars)

#===============================================================================
#Group Quarters Population - College and University Student Housing 2020
#Creates a list of sex by age group quarters population variables to use in the API query
gq.vars <- dec.vars(vars.dec20, "GROUP QUARTERS POPULATION IN COLLEGE/UNIVERSITY STUDENT HOUSING BY SEX BY AGE")

#Assigns appropriate labels to the Decennial Census variables
gq.labels <- dec.labels("2020", "GROUP QUARTERS POPULATION IN COLLEGE/UNIVERSITY STUDENT HOUSING BY SEX BY AGE") |> gq.clean()

#Queries the Census API via {tidycensus} to retrieve data about the group 
#quarters population in college or university housing
gq.values <- decennial_call(gq.vars, geog = "county", 2020)

#Clean the 2020 Group Quarters Population data
cu.gqpop.20 <- gq.values |> 
  filter(GEOID %in% GEOID.cn.20$GEOID) |> 
  right_join(
    gq.labels,
    by = c("variable" = "name")
  )|> 
  #Change the Census age category levels to match the ageCAT6 labels
  mutate(
    ageCAT6 = case_when(
      label == "pop_Under_20_years" ~ '4',
      label == "pop_20_to_24_years" ~ '5',
      label == "pop_25_to_29_years" ~ '6',
      label == "pop_30_to_34_years" ~ '7',
      label == "pop_35_to_39_years" ~ '8',
      label == "pop_40_to_44_years" ~ '9',
      label == "pop_45_to_49_years" ~ '10',
      label == "pop_50_to_54_years" ~ '11',
      label == "pop_55_to_59_years" ~ '12',
      label == "pop_60_to_64_years" ~ '13',
      label == "pop_65_and_over" ~ '14'
    )
  ) |> 
  filter(!is.na(ageCAT6)) |>  
  right_join(
    GEOID.cn.20,
    by = c('GEOID')
  ) |>  
  mutate(
    county_id = as.character(county_id)
  ) |> 
  dplyr::rename(
    CU.GQPopulation = value,
    Sex = sex
  ) |>  
  select(county_id, Sex, ageCAT6, CU.GQPopulation) |>  
  group_by(
    county_id,
    Sex,
    ageCAT6
  ) |> 
  summarise(
    CU.GQPopulation = sum(CU.GQPopulation)
  ) |>  
  ungroup()

#Remove dataframes no longer needed in the process.
rm(gq.labels, gq.values, gq.vars)
gc()
```

# 3.3 Calculate the percentage of the group quarters population living in University/College Housing

```{r}
#Join the total GQ Population and University/College GQ Population
gqpop.df <- purrr::reduce(
  list(gqpop.10, gqpop.20, cu.gqpop.10, cu.gqpop.20),
  dplyr::left_join, by = c("county_id", "Sex", "ageCAT6")
  ) |> 
  mutate(across(everything(), ~ replace_na(., 0))) |> 
  #Rename variables
  dplyr::rename(
    GQPopulation.10 = GQPopulation.x,
    GQPopulation.20 = GQPopulation.y,
    CU.GQPopulation.10 = CU.GQPopulation.x,
    CU.GQPopulation.20 = CU.GQPopulation.y
  ) |> 
  rowwise() |> 
  #Calculate the proportion of the gqpopulation living in university or college
  #housing by age and sex for both 2010 and 2020
  mutate(
    pct_CU.GQPopulation.10 = CU.GQPopulation.10/GQPopulation.10,
    pct_CU.GQPopulation.20 = CU.GQPopulation.20/GQPopulation.20
  )

#Write the comparison to .csv as an intermediate data product.
write.csv(
  gqpop.df,
  paste0(output_path,"prop.College.Uni_to_Total.GQ.1020.csv"),
  row.names = FALSE
)

#Remove intermediate dataframes
rm(cu.gqpop.10, cu.gqpop.20)
gc()
```

# 3.4 QC Check - Compare the calculated GQ Population to the GQ Population at the county level (by age by sex)

```{r}
#Create a municipality to county crosswalk with {mapcdatakeys}
muni_county.xw <- mapcdatakeys::all_muni_data_keys |> 
  select(muni_id,muni_name,county_id,county) |> 
  #Make all variables characters
  mutate(across(everything(), ~as.character(.)))

#Join the municipal level population data to the county to muni crosswalk
qc.population.df <- left_join(
  population.df,
  muni_county.xw,
  by = c("muni_id")
) |> 
  group_by(
    county_id,
    Sex,
    ageCAT6
  ) |> 
  #Aggregate municipal level calculated group quarters to the county level
  summarise(
    calc.GQPopulation.10 = sum(GQPopulation.10),
    calc.GQPopulation.20 = sum(GQPopulation.20)
  ) |> 
  ungroup()

#Join gq population calculated in from the population - household population data
#aggregated to county level to the gq population data pulled directly from the Census
qc.population.df <- purrr::reduce(
  list(qc.population.df, gqpop.10, gqpop.20),
  dplyr::left_join, by = c("county_id", "Sex", "ageCAT6")
) |> 
  dplyr::rename(
    GQPopulation.10 = GQPopulation.x,
    GQPopulation.20 = GQPopulation.y,
  ) |> 
  #Calculate the difference between the calculated gq population and the available gq population
  mutate(
    gq.check.10 = calc.GQPopulation.10 - GQPopulation.10,
    gq.check.20 = calc.GQPopulation.20 - GQPopulation.20
  )

#Print terms to automatically tell the user if they have passed the QC check.
if (sum(qc.population.df$gq.check.10 > 0)){
  print("STOP! Please check 2010 Census data queries and Group Quarters population calculations.")
} else{
  print("PROCEED!")
}

if(sum(qc.population.df$gq.check.20 > 0)){
  print("STOP! Please check 2020 Census data queries and Group Quarters population calculations.")
} else{
  print("PROCEED!")
  
  #Remove unneeded dataframes
  rm(qc.population.df, muni_county.xw, gqpop.10, gqpop.20, gqpop.df, hhpop.10, hhpop.20,
     pop.10, pop.20)
}

```

# 4.0 QC Check - Compare Census Population by Age by Sex to Projected Population data

```{r}
#Projections 
proj.pop.10 <- umdi.pop.MAPC101 |> 
  filter(year == 2010) |> 
  mutate(
    muni_id = as.character(muni_id),
    ageCAT6 = as.character(ageCAT6)
  ) |> 
  select(
    muni_id,
    Sex,
    ageCAT6,
    pop
  )

proj.pop.20 <- umdi.pop.MAPC101 |> 
  filter(year == 2020) |> 
  mutate(
    muni_id = as.character(muni_id),
    ageCAT6 = as.character(ageCAT6)
  ) |> 
  select(
    muni_id,
    Sex,
    ageCAT6,
    pop
  )

#Census
pop.10 <- population.df |> 
  select(
    muni_id,
    Sex,
    ageCAT6,
    Population.10
  )
  
pop.20 <- population.df |> 
  select(
    muni_id,
    Sex,
    ageCAT6,
    Population.20
  )

#QC Check - 2010 Population
qc.population.10 <- left_join(
  pop.10,
  proj.pop.10,
  by = c("muni_id", "Sex", "ageCAT6")
) |> 
  mutate(
    qc.check = Population.10 - pop
  )

#Print terms to automatically tell the user if they have passed the QC check.
if (sum(qc.population.10$qc.check > 0)){
  print("STOP! Please check 2010 Census data queries and UMDI Population Projections data.")
} else{
  print("PROCEED!")
  
  #Remove QC dataframes
  rm(qc.population.10, pop.10, proj.pop.10)
}

#QC Check - 2020 Population
qc.population.20 <- left_join(
  pop.20,
  proj.pop.20,
  by = c("muni_id", "Sex", "ageCAT6")
) |> 
  mutate(
    qc.check = Population.20 - pop
  )

#Print terms to automatically tell the user if they have passed the QC check
if(sum(qc.population.20$qc.check > 0)){
  print("STOP! Please check 2020 Census data queries and UMDI Population Projections data.")
} else{
  print("PROCEED!")
  
  #Remove QC dataframes
  rm(qc.population.20, pop.20, proj.pop.20)
}

```

# 5.1 Calculate the Percentage of People in Households by RPA and MPO

```{r}
#===============================================================================
#Calculating MAPC101 Population in Households Rate by RPA, Sex, Age Category
population.MAPC101.df <- population.df |> 
  left_join(
    keys.rpa,
    by = c("muni_id")
  ) |> 
  group_by(
    rpa_acr,
    ageCAT6
  ) |> 
  #Sum Population, Household Population, and Group Quarters population to higher order groups.
  summarise(
    Population.10 = sum(Population.10),
    Population.20 = sum(Population.20),
    HHPopulation.10 = sum(HHPopulation.10),
    HHPopulation.20 = sum(HHPopulation.20),
    GQPopulation.10 = sum(GQPopulation.10),
    GQPopulation.20 = sum(GQPopulation.20)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  #Calculate the percentage of people in households by RPA and 5-year Age Category
  mutate(
    pct_pop.in.hhd.10 = HHPopulation.10/Population.10,
    pct_pop.in.hhd.20 = HHPopulation.20/Population.20
  ) |> 
  select(
    rpa_acr,
    ageCAT6,
    GQPopulation.10,
    GQPopulation.20,
    pct_pop.in.hhd.10,
    pct_pop.in.hhd.20
  )

#Write the intermediate dataframe to .csv.
write.csv(
  population.MAPC101.df,
  paste0(output_path,"pct_pop.in.hhds.MAPC101_by.RPA.ageCAT6.csv"),
  row.names = FALSE
)

#===============================================================================
#Calculating MAPC97 Population in Households Rate by MPO and Age Category
population.MAPC97.df <- population.df |> 
  left_join(
    keys.mpo,
    by = c("muni_id")
  ) |> 
  group_by(
    mpo,
    ageCAT6
  ) |> 
  #Sum Population, Household Population, and Group Quarters population to higher order groups.
  summarise(
    Population.10 = sum(Population.10),
    Population.20 = sum(Population.20),
    HHPopulation.10 = sum(HHPopulation.10),
    HHPopulation.20 = sum(HHPopulation.20),
    GQPopulation.10 = sum(GQPopulation.10),
    GQPopulation.20 = sum(GQPopulation.20)
  ) |> 
  ungroup() |> 
  rowwise() |>
  #Calculate the percentage of people in households by MPO and 5-year Age Category
  mutate(
    pct_pop.in.hhd.10 = HHPopulation.10/Population.10,
    pct_pop.in.hhd.20 = HHPopulation.20/Population.20
  ) |> 
  select(
    mpo,
    ageCAT6,
    GQPopulation.10,
    GQPopulation.20,
    pct_pop.in.hhd.10,
    pct_pop.in.hhd.20
  )

#Write the intermediate dataframe to .csv.
write.csv(
  population.MAPC97.df,
  paste0(output_path,"pct_pop.in.hhds.MAPC97_by.MPO.ageCAT6.csv"),
  row.names = FALSE
)

```

# 5.2 Calculate the projected number of people in households

```{r}
#===============================================================================
#Calculating the MAPC101 Projected Population in Households by RPA and Age Category
umdi.pop.MAPC101 <- left_join(
  umdi.pop.MAPC101,
  population.MAPC101.df,
  by = c("rpa_acr","ageCAT6")
) |> 
  #Create projected household population using % of people in household rates created in the 
  #preceding code bloc.
  
  #2010 Household Population is calculated using rates generated from 2010 Decennial Census data.
  #2020-2050 Household Population is calulcated using rates generated from 2020 Decennial Census data.
  
  #Household Population for age groups 15-19 (ageCAT6 == 4) and 20-24 (ageCAT6 == 5) is calculated
  #using a constant number of GQ population (representing a consistent number of students in GQ).
  mutate(
    hhpop = case_when(
      year == 2010 & ageCAT6 == "1" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "2" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "3" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "4" ~ pop - GQPopulation.10,
      year == 2010 & ageCAT6 == "5" ~ pop - GQPopulation.10,
      year == 2010 & ageCAT6 == "6" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "7" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "8" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "9" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "10" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "11" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "12" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "13" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "14" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "15" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "16" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "17" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "18" ~ pop*pct_pop.in.hhd.10,
      year != 2010 & ageCAT6 == "1" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "2" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "3" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "4" ~ pop - GQPopulation.20,
      year != 2010 & ageCAT6 == "5" ~ pop - GQPopulation.20,
      year != 2010 & ageCAT6 == "6" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "7" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "8" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "9" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "10" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "11" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "12" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "13" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "14" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "15" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "16" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "17" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "18" ~ pop*pct_pop.in.hhd.20,
    ),
    #Round the Household Population to the nearest whole number (person).
    hhpop = round(hhpop, 0)
  ) |> 
  select(
    -c(
      GQPopulation.10,
      GQPopulation.20,
      pct_pop.in.hhd.10,
      pct_pop.in.hhd.20
    )
  )

#===============================================================================
#Calculating the MAPC97 Projected Population in Households by MPO and Age Category
umdi.pop.MAPC97 <- left_join(
  umdi.pop.MAPC97,
  population.MAPC97.df,
  by = c("mpo","ageCAT6")
) |> 
  #Create projected household population using % of people in household rates created in the 
  #preceding code bloc.
  
  #2010 Household Population is calculated using rates generated from 2010 Decennial Census data.
  #2020-2050 Household Population is calulcated using rates generated from 2020 Decennial Census data.
  
  #Household Population for age groups 15-19 (ageCAT6 == 4) and 20-24 (ageCAT6 == 5) is calculated
  #using a constant number of GQ population (representing a consistent number of students in GQ).
  mutate(
    hhpop = case_when(
      year == 2010 & ageCAT6 == "1" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "2" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "3" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "4" ~ pop - GQPopulation.10,
      year == 2010 & ageCAT6 == "5" ~ pop - GQPopulation.10,
      year == 2010 & ageCAT6 == "6" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "7" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "8" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "9" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "10" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "11" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "12" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "13" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "14" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "15" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "16" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "17" ~ pop*pct_pop.in.hhd.10,
      year == 2010 & ageCAT6 == "18" ~ pop*pct_pop.in.hhd.10,
      year != 2010 & ageCAT6 == "1" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "2" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "3" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "4" ~ pop - GQPopulation.20,
      year != 2010 & ageCAT6 == "5" ~ pop - GQPopulation.20,
      year != 2010 & ageCAT6 == "6" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "7" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "8" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "9" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "10" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "11" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "12" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "13" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "14" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "15" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "16" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "17" ~ pop*pct_pop.in.hhd.20,
      year != 2010 & ageCAT6 == "18" ~ pop*pct_pop.in.hhd.20,
    ),
    #Round the Household Population to the nearest whole number (person).
    hhpop = round(hhpop, 0)
  ) |> 
  select(
    -c(
      GQPopulation.10,
      GQPopulation.20,
      pct_pop.in.hhd.10,
      pct_pop.in.hhd.20
    )
  )

# Export population in households

fwrite(umdi.pop.MAPC101, paste0(output_path,'pop.in.hhds.MAPC101_by.RPA.ageCAT6.csv'))

fwrite(umdi.pop.MAPC97, paste0(output_path,'pop.in.hhds.MAPC97_by.RPA.ageCAT6.csv'))

#Removing dataframes no longer necessary for the creation of reweighter targets.
rm(population.MAPC101.df, population.MAPC97.df, population.df, GEOID.cn.10, GEOID.cn.20,
   vars.dec10, vars.dec20)
gc()

```

# 6.0 - Load and process PUMS Data

# 6.1 - Create PUMA to RPA/MPO Crosswalk for 2010 PUMAs

```{r}

#Set up datakeys for future joins.
mkeys <- mapcdatakeys::all_muni_data_keys %>%
  select(muni_id, rpa_acr, mpo)

# PUMA crosswalk
#Load in the municipality to PUMA crosswalk.
psf <- fread(paste0(root, 'pums_muni_inter.csv')) %>%
  select(TOWN_ID, PUMACE10, Shape_Area) %>%
  dplyr::rename(muni_id = TOWN_ID, PUMA = PUMACE10) %>%
  left_join(mkeys, by = c('muni_id')) %>%
  setDT()

#Generate RPA to PUMA crosswalk.
lsf <- psf[, lapply(.SD, sum, na.rm = T), .(rpa_acr, PUMA), .SDcols = 'Shape_Area']
lsf[, mx := max(Shape_Area), PUMA]
xw <- lsf[Shape_Area == mx, .(rpa_acr, PUMA)]
xw[, PUMA := sprintf("%05d", PUMA)]

# Manufacturing MVC and NPEDC RPAs manually

cc <- data.table(rpa_acr = c('MVC', 'NPEDC'),
                 PUMA = c('04800', '04800'))

#Append MVC and NPEDC data to PUMA to RPA/MPO crosswalk
xw <- rbind(xw, cc)

#Remove intermediate dataframes.
# rm(matrix, col_names, mvc, npedc)
gc()

```

# 6.2 - Query 2017-2021 ACS 5-year PUMS data + categorize data

```{r}
#Set PUMS vintage final year for {tidycensus} API query.
yr <- 2021

#List of all 2017-2021 ACS PUMS Variables
allvars <- pums_variables |>  filter(year==yr) |>  select(var_code) |>  unique()

#List of PUMS variables
variable_list <- c("PUMA", "TYPEHUGQ", "SEX", "AGEP", "RAC1P", "HISP", "ESR",
                   "WKHP", "SCHL", "WAGP", "SEMP", "ADJINC", "SPORDER", "HINCP", "TEN")
#SEMP bottom coding has changed from $1 to $4 like WAGP


#Query {tidycensus} for 2017-2021 5-Year PUMS data
pums_data <- get_pums(
    state = "MA",
    survey = "acs5",
    year = yr,
    variables = variable_list
  ) |>
  #Join RPA to PUMA crosswalk to PUMS data
  # pums_data <- fread(paste0(root,'pums2021_basic.csv')) |>
  #   mutate(PUMA = sprintf("%05d", PUMA)) |> 
  left_join(
    xw,
    by = c('PUMA')
  ) |>  
  mutate(
    #Generate five-year age groupings to match UMDI population projections data.
    ageCAT6 = cut(AGEP, breaks = c(-Inf, seq(4, 84, 5), Inf), labels = 1:18),
    # Consolidated Age Category
    # NOTE: Levels are (0) 0-14; (4) 15 to 19; (5) 20 to 24; (6) 25 to 34; (7) 35 to 44; (8) 45 to 54; (9) 55 to 64 (10) 65 to 74 (11) 75+
    PAGEC2 = cut(AGEP, breaks = c(-Inf, 14, 19, 24, 34, 44, 54, 64, 74, 79, 84, Inf),
                 labels = c(0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)),
    # ageCAT4 is the 2020 decennial census age breaks for age of householder - used for 2020 base year control total reweighter targets
    ageCAT4 = case_when(
      AGEP %in% 15:24 ~ 1,
      AGEP %in% 25:34 ~ 2,
      AGEP %in% 35:44 ~ 3,
      AGEP %in% 45:54 ~ 4,
      AGEP %in% 55:59 ~ 5,
      AGEP %in% 60:64 ~ 6,
      AGEP %in% 65:74 ~ 7,
      AGEP %in% 75:84 ~ 8,
      AGEP >= 85 ~ 9
    ), 
    # Categorizing employment status
    empstat = case_when(
      ESR == "b" ~ "Under 16 not eligible for work",
      ESR == 1 ~ "Employed",
      ESR == 2 ~ "Employed but not at work",
      ESR == 3 ~ "Unemployed",
      ESR == 4 ~ "Armed forces",
      ESR == 5 ~ "Armed forces but not at work",
      ESR == 6 ~ "Not in labor force"
    ),
    
    # Categorizing Civilian Labor Force or not
    # NOTE: Categories are (0) under 16 or non-civilian, (1) in labor force, (2) not in labor force
    lf = case_when(
      ESR == "b" | ESR == 4 | ESR == 5  ~ 0,
      ESR == 1 | ESR == 2 | ESR == 3  ~ 1,
      ESR == 6 ~ 2,
      is.na(ESR) ~ 0
    ),
    
    # Counts as Worker
    # NOTE: Categories are (0) under 16 or not in labor force, or (1) in labor force or non-civilian worker
    worker = case_when(
      (ESR == "b" | ESR == 6) ~ 0,
      (ESR == 1 | ESR == 2 | ESR == 3 | ESR == 4 | ESR == 5) ~ 1,
      is.na(ESR) ~ 0
    ),
    
    # Categorizing full or part-time work
    wrkfull = case_when(
      WKHP < 35 ~ "Part time (less than 35 hrs)",
      WKHP >= 35 ~ "Full time (35 hrs or more)",
      is.na(WKHP) ~ "Under 16, unemployed, or not in labor force"
    ),
    
    # Categorizing educational attainment
    # NOTE: Categories are (1) High school degree or less, (2) Associate's degree or some college, (3) Bachelor's, and (4) MA or higher
    SCHL = as.numeric(SCHL),
    eduattn = case_when(
      SCHL <= 17 ~ 1,
      SCHL %in% 18:20 ~ 2,
      SCHL == 21 ~ 3,
      SCHL >= 22 ~ 4,
      is.na(SCHL) ~ 0
    ),
    
    # Determine if person is head of household
    HousHder = case_when(
      SPORDER == 1 ~ 1,
      SPORDER > 1 ~ 2
      ),
    
    # Determine if case counts as person
    person = case_when(
      SPORDER != 0 ~ 1,
      SPORDER == 0 ~ 0
      ),
    
    # Determine if case counts as child
    child = case_when(
      AGEP < 18 ~ 1,
      AGEP >= 18 ~ 0
      )
  ) |> 
  
  #Generating Household Variables
  group_by(SERIALNO) |> 
  mutate(
    Worker_Total = sum(worker),
    Person_Total = sum(person),
    Child_Total = sum(child)
  ) |> 
  ungroup() |> 
  # Categorizing household sizes by number of persons (1) one person, (2) two persons, (3) three persons, (4) four or more persons
  mutate(
    HHSize = case_when(
      Person_Total == 1 ~ 1,
      Person_Total == 2 ~ 2,
      Person_Total == 3 ~ 3,
      Person_Total >= 4 ~ 4
    ),
    size = case_when(
      Person_Total == 1 ~ 1,
      Person_Total == 2 ~ 2,
      Person_Total == 3 ~ 3,
      Person_Total == 4 ~ 4,
      Person_Total == 5 ~ 5,
      Person_Total == 6 ~ 6,
      Person_Total >= 7 ~ 7,
    ),
    # Categorizing worker categories (0) no workers, (1) one worker, (2) two workers, (3) three or more workers
    WRKHH = case_when(
      Worker_Total == 0 ~ 0,
      Worker_Total == 1 ~ 1,
      Worker_Total == 2 ~ 2,
      Worker_Total >= 3 ~ 3
      ),
    
    # Determine if person is not hhder vs hhder of 0- wrk, 1wrk, 2 wrk, 3+wrk
    HHder = case_when(
      SPORDER == 1 & WRKHH == 0 ~ 0,
      SPORDER == 1 & WRKHH == 1 ~ 1,
      SPORDER == 1 & WRKHH == 2 ~ 2,
      SPORDER == 1 & WRKHH == 3 ~ 3,
      SPORDER > 1 ~ 99
    ),
    # Determine what type of household the person is heading or not heading (1) head child, (2) child, (3) head not child, (4) not head no child, (5) head single
    HHtype = case_when(
      Child_Total >= 1 & Person_Total > 1 & HHder != 99 ~ 1,
      Child_Total >= 1 & Person_Total > 1 & HHder == 99 ~ 2,
      Child_Total == 0 & Person_Total > 1 & HHder != 99 ~ 3,
      Child_Total == 0 & Person_Total > 1 & HHder == 99 ~ 4,
      Person_Total == 1 & HHder != 99 ~ 5
    )
  )

#Check to make sure all RPAs have been included in the PUMA-RPA Crosswalk.
if (length(unique(pums_data$rpa_acr)) != 13){
  print("STOP! Check the PUMA - RPA Crosswalk for MVC and NPEDC.")
} else{
  print("Proceed!")
}

```

# 7.0 Generating reweighter target files

# 7.1 - Generate the ACS 2017-2021 PUMS Baseline data for each of our categories

```{r}
#===============================================================================
# 7.1 - Generate BASELINE data for the reweighter targeting files
# 7.1.1 -Baseline of people in Households
hhpop_baseline <- pums_data |>  
  # Filter for households.
  filter(TYPEHUGQ == "1") |>  
  mutate(
    ageCAT6 = as.factor(ageCAT6),
    RPA = as.factor(rpa_acr)
  ) |> 
  group_by(
    RPA
  ) |>  
  # Sum the person weights in the PUMS data.
  dplyr::count(
    var = ageCAT6,
    wt = PWGTP
  ) |>  
  dplyr::rename(
    AgeCat = var,
    BASELINE = n
  ) |>  
  #Rename variables to match the reweigher input requirements.
  mutate(
    AgeCat = case_when(
      AgeCat == 1 ~ "x == 1",
      AgeCat == 2 ~ "x == 2",
      AgeCat == 3 ~ "x == 3",
      AgeCat == 4 ~ "x == 4",
      AgeCat == 5 ~ "x == 5",
      AgeCat == 6 ~ "x == 6",
      AgeCat == 7 ~ "x == 7",
      AgeCat == 8 ~ "x == 8",
      AgeCat == 9 ~ "x == 9",
      AgeCat == 10 ~ "x == 10",
      AgeCat == 11 ~ "x == 11",
      AgeCat == 12 ~ "x == 12",
      AgeCat == 13 ~ "x == 13",
      AgeCat == 14 ~ "x == 14",
      AgeCat == 15 ~ "x == 15",
      AgeCat == 16 ~ "x == 16",
      AgeCat == 17 ~ "x == 17",
      AgeCat == 18 ~ "x == 18"
   ),
   INTER = BASELINE
  )

# 7.1.2 - Baseline of Households by Household Type
hhtype_baseline <- pums_data |> 
  # Filter for households and the head of household for each SERIALNO
  filter(TYPEHUGQ == "1" & SPORDER == "1") |>   
  mutate(
    ageCAT6 = as.factor(ageCAT6),
    RPA = as.factor(rpa_acr),
    HHtype = as.factor(HHtype)
  ) |>  
  group_by(
    RPA,
    ageCAT6
  ) |> 
  # Sum the household weights in the PUMS data.
  dplyr::count(
    var = HHtype,
    wt = WGTP
  ) |> 
  ungroup() |>  
  dplyr::rename(
    HHtype = var,
    BASELINE = n,
    AgeCat = ageCAT6
  ) |> 
  #Rename variables to match the reweigher input requirements.
  mutate(
    HHtype = case_when(
      HHtype == 1 ~ "hhderchild",
      HHtype == 2 ~ "nothhderchild",
      HHtype == 3 ~ "hhdernochild",
      HHtype == 4 ~ "nothhdernochild",
      HHtype == 5 ~ "single"
    ),
    AgeCat = case_when(
      AgeCat == 1 ~ "x == 1",
      AgeCat == 2 ~ "x == 2",
      AgeCat == 3 ~ "x == 3",
      AgeCat == 4 ~ "x == 4",
      AgeCat == 5 ~ "x == 5",
      AgeCat == 6 ~ "x == 6",
      AgeCat == 7 ~ "x == 7",
      AgeCat == 8 ~ "x == 8",
      AgeCat == 9 ~ "x == 9",
      AgeCat == 10 ~ "x == 10",
      AgeCat == 11 ~ "x == 11",
      AgeCat == 12 ~ "x == 12",
      AgeCat == 13 ~ "x == 13",
      AgeCat == 14 ~ "x == 14",
      AgeCat == 15 ~ "x == 15",
      AgeCat == 16 ~ "x == 16",
      AgeCat == 17 ~ "x == 17",
      AgeCat == 18 ~ "x == 18"
    ),
    INTER = BASELINE
  ) |> 
  #Filter for household types with householders (what we need for the reweighter!)
  dplyr::filter(HHtype == "hhderchild" | HHtype == "hhdernochild" | HHtype == "single") |>  
  mutate(
    HHtype = case_when(
      HHtype == "hhderchild" ~ "x == 1",
      HHtype == "hhdernochild" ~ "x == 3",
      HHtype == "single" ~ "x == 5"
    )
  )

# 7.1.3 - Baseline of People in the laborforce
lf_baseline <- pums_data |>  
  # Filter for households and people in the labor force
  filter(TYPEHUGQ == "1" & lf == "1") |>   
  mutate(
    ageCAT6 = as.factor(ageCAT6),
    RPA = as.factor(rpa_acr),
    eduattn = as.factor(eduattn)
  ) |>  
  group_by(
    RPA,
    ageCAT6
  ) |> 
  # Sum the person weights in the PUMS data.
  dplyr::count(
    var = eduattn,
    wt = PWGTP
  ) |>  
  ungroup() |>  
  rename(
    eduattn = var,
    BASELINE = n,
    AgeCat = ageCAT6
  ) |> 
  #Rename variables to match the reweigher input requirements.
  mutate(
    eduattn = case_when(
      eduattn == 1 ~ "High School or less",
      eduattn == 2 ~ "Some college or Associate's degree",
      eduattn == 3 ~ "Bachelor's",
      eduattn == 4 ~ "Master's or higher"
    ),
    AgeCat = case_when(
      AgeCat == 1 ~ "x == 1",
      AgeCat == 2 ~ "x == 2",
      AgeCat == 3 ~ "x == 3",
      AgeCat == 4 ~ "x == 4",
      AgeCat == 5 ~ "x == 5",
      AgeCat == 6 ~ "x == 6",
      AgeCat == 7 ~ "x == 7",
      AgeCat == 8 ~ "x == 8",
      AgeCat == 9 ~ "x == 9",
      AgeCat == 10 ~ "x == 10",
      AgeCat == 11 ~ "x == 11",
      AgeCat == 12 ~ "x == 12",
      AgeCat == 13 ~ "x == 13",
      AgeCat == 14 ~ "x == 14",
      AgeCat == 15 ~ "x == 15",
      AgeCat == 16 ~ "x == 16",
      AgeCat == 17 ~ "x == 17",
      AgeCat == 18 ~ "x == 18"
    )
  ) |>  
  mutate(
    eduattn = case_when(
      eduattn == "High School or less" ~ "x == 1",
      eduattn == "Some college or Associate's degree" ~ "x == 2",
      eduattn == "Bachelor's" ~ "x == 3",
      eduattn == "Master's or higher" ~ "x == 4"
    ),
    INTER = BASELINE
  )

# 7.1.4 For 2020 - baseline file of households by age of householder

age_baseline <- pums_data |> 
  # Filter for households and the head of household for each SERIALNO
  filter(TYPEHUGQ == "1" & SPORDER == "1") |>   
  mutate(
    ageCAT4 = as.factor(ageCAT4),
    RPA = as.factor(rpa_acr),
  ) |>  
  group_by(
    RPA,
  ) |> 
  # Sum the household weights in the PUMS data.
  dplyr::count(
    var = ageCAT4,
    wt = WGTP
  ) |> 
  ungroup() |>  
  dplyr::rename(
    ageCAT4 = var,
    BASELINE = n
  ) |> 
  #Rename variables to match the reweigher input requirements.
  mutate(
    ageCAT4 = case_when(
      ageCAT4 == 1 ~ "x == 1",
      ageCAT4 == 2 ~ "x == 2",
      ageCAT4 == 3 ~ "x == 3",
      ageCAT4 == 4 ~ "x == 4",
      ageCAT4 == 5 ~ "x == 5",
      ageCAT4 == 6 ~ "x == 6",
      ageCAT4 == 7 ~ "x == 7",
      ageCAT4 == 8 ~ "x == 8",
      ageCAT4 == 9 ~ "x == 9"
    ),
    INTER = BASELINE
  )

# 7.1.5 For 2020 - baseline file of household size

size_baseline <- pums_data |> 
  # Filter for households and the head of household for each SERIALNO
  filter(TYPEHUGQ == "1" & SPORDER == "1") |>   
  mutate(
    size = as.factor(size),
    RPA = as.factor(rpa_acr),
  ) |>  
  group_by(
    RPA,
  ) |> 
  # Sum the household weights in the PUMS data.
  dplyr::count(
    var = size,
    wt = WGTP
  ) |> 
  ungroup() |>  
  dplyr::rename(
    size = var,
    BASELINE = n
  ) |> 
  #Rename variables to match the reweigher input requirements.
  mutate(
    size = case_when(
      size == 1 ~ "x == 1",
      size == 2 ~ "x == 2",
      size == 3 ~ "x == 3",
      size == 4 ~ "x == 4",
      size == 5 ~ "x == 5",
      size == 6 ~ "x == 6",
      size == 7 ~ "x == 7"
    ),
    INTER = BASELINE
  )

# 7.1.6 - Baseline of only Households by Household Type for 2020
type_baseline <- pums_data |> 
  # Filter for households and the head of household for each SERIALNO
  filter(TYPEHUGQ == "1" & SPORDER == "1") |>   
  mutate(
    RPA = as.factor(rpa_acr),
    HHtype = as.factor(HHtype)
  ) |>  
  group_by(
    RPA
  ) |> 
  # Sum the household weights in the PUMS data.
  dplyr::count(
    var = HHtype,
    wt = WGTP
  ) |> 
  ungroup() |>  
  dplyr::rename(
    HHtype = var,
    BASELINE = n
  ) |> 
  #Rename variables to match the reweigher input requirements.
  mutate(
    HHtype = case_when(
      HHtype == 1 ~ "hhderchild",
      HHtype == 2 ~ "nothhderchild",
      HHtype == 3 ~ "hhdernochild",
      HHtype == 4 ~ "nothhdernochild",
      HHtype == 5 ~ "single"
    ),
    INTER = BASELINE
  ) |> 
  #Filter for household types with householders (what we need for the reweighter!)
  dplyr::filter(HHtype == "hhderchild" | HHtype == "hhdernochild" | HHtype == "single") |>  
  mutate(
    HHtype = case_when(
      HHtype == "hhderchild" ~ "x == 1",
      HHtype == "hhdernochild" ~ "x == 3",
      HHtype == "single" ~ "x == 5"
    )
  )

#Output the baseline file for Household Population aggregations
write.csv(
  hhpop_baseline,
  paste0(output_path,"hhpop_baseline.",hdshp,".csv"), 
  row.names = FALSE
)

#Output the baseline file for Household Type aggregations
write.csv(
  hhtype_baseline,
  paste0(output_path,"hhtype_baseline.",hdshp,".csv"),
  row.names = FALSE
)

#Output the baseline file for Laborforce aggregations
write.csv(
  lf_baseline,
  paste0(output_path,"lf_baseline.",hdshp,".csv"),
  row.names = FALSE
)

#Output the baseline file for 2020 Age of Householder aggregations
write.csv(
  age_baseline,
  paste0(output_path,"age_baseline.",hdshp,".csv"), 
  row.names = FALSE
)

#Output the baseline file for 2020 Household size aggregations
write.csv(
  size_baseline,
  paste0(output_path,"size_baseline.",hdshp,".csv"), 
  row.names = FALSE
)

#Output the baseline file for 2020 Household type only aggregations
write.csv(
  type_baseline,
  paste0(output_path,"type_baseline.",hdshp,".csv"), 
  row.names = FALSE
)
```

# 7.2 Create Headship rates from this PUMS vintage

```{r}
#Generating headship rates by RPA and 5-year age group for the ACS 2017-2022 PUMS
headship_rates <- pums_data |> 
  #Inclues only observations for people in households (omits GQ)                       
  filter(TYPEHUGQ == "1") |> 
  #Groups by variables in the dataframe necessary to getting the granularity of
  #data we're interested in.
  group_by(rpa_acr, ageCAT6) |> 
  #Computes the weighted sum of individuals in each HH type category by the groups
  #assigned above.
  count(var = HHtype, wt = WGTP) |>
  #Recodes factor variables as the categories they represent.
  #Converts numbers into frequencies.                       
  mutate(
    var = case_when(
      var == 1 ~ "hhderchild",
      var == 2 ~ "nothhderchild",
      var == 3 ~ "hhdernochild",
      var == 4 ~ "nothhdernochild",
      var == 5 ~ "single"),
    freq = (n/sum(n))) |> 
  #Removes the level of aggregation set earlier by group_by()
  ungroup() |> 
  select(
    -c(n)
  )

#QC Check - determine if the frequencies in each RP, Age Group crosstab add to 1
hr_check <- headship_rates |> 
  group_by(
    rpa_acr,
    ageCAT6
  ) |> 
  summarise(
    freq_check = sum(freq)
  ) |> 
  ungroup() |> 
  mutate(
    flag = ifelse(freq_check != 1, 1, 0)
  )

if (sum(hr_check$flag) > 0){
  print("STOP! Check headship rate calculations!")
} else{
  print("Proceed!")
}

#Write an intermediate file for the headship rates from this PUMS vintage
write.csv(
  headship_rates,
  paste0(output_path, "headship_rates.pums",yr,".csv"),
  row.names = FALSE
)

#Remove QC check dataframe
rm(hr_check)

#TODO:
# 1. Compare to 2015-2019 ACS PUMS Headship rates
# 2. Compare to adjusted headships rates from last projections

```

# 7.3 Create Laborforce Participation rates for ACS 2017-2021 PUMS

```{r}
lfpr <- pums_data |> 
  #Takes only observations that are in housing units and in the labor force.
  filter(TYPEHUGQ == "1" & lf >= 1) |> 
  #Sets the level of aggregation (e.g. we want the number of observations by year, by RPA, by age group, by sex, by educational attainment) 
  group_by(rpa_acr, ageCAT6, eduattn, SEX) |> 
  #Sums up the number of observations by the level of aggregation set above using the person weight.
  count(var = lf, wt = PWGTP) |> 
  #Removes the level of aggregation set earlier by group_by()
  ungroup() |> 
  #Recodes factor variables as the categories they represent.
  #Converts numbers into frequencies.
  mutate(
    var = case_when(
      var == 1 ~ "in LF",
      var == 2 ~ "not in LF"),
    SEX = case_when(
      SEX == 1 ~ "Male",
      SEX == 2 ~ "Female"),
    EDUATTN = case_when(
      eduattn == 1 ~ "High School or less",
      eduattn == 2 ~ "Some college or Associate's degree",
      eduattn == 3 ~ "Bachelor's",
      eduattn == 4 ~ "Master's or higher")
  ) |> 
  group_by(rpa_acr, ageCAT6, SEX, EDUATTN) |>  
  #Converts numbers into frequencies for those in and not in the laborforce, based
  #on the demographic variables.
  mutate(
    freq = (n/sum(n))
  ) |>  
  ungroup() |> 
  filter(var == "in LF") |> 
  #Drops the "n" variable 
  select(-n)

#TODO:
# 1. Compare to 2015-2019 ACS PUMS headship rates
# 2. Compare to CPS rates
# 3. Do a similar lfpr adjustment exercise we did last time to the 2015-2019 lfpr

```

# 7.4 Create Household Projections by RPA and Household Type

# 7.4.0 Create 2020 control total targets using Decennial Census 2020 DHC

```{r}
#===============================================================================

# For 2020 we don't want to use PUMS headship rates to determine households and characteristics, as this would produce total households that does not match 2020 decennial census. 
# However, we can't prdouce exactly the same headship rates by age of householder and household type from Census as we can from PUMS. We therefore create a slightly different control total structure for 2020 that will use different target tables for the reweighter.

munis <- mapcdatakeys::all_muni_data_keys %>% select(muni_id,cosub_cn20,rpa_acr,mpo) %>% rename(GEOID=cosub_cn20) %>% mutate(GEOID=as.character(GEOID))

vars2020 <- load_variables(2020, 'dhc') %>% setDT()
age.vars <- vars2020[concept=="HOUSEHOLD TYPE BY AGE OF HOUSEHOLDER" & !label %in% c(" !!Total:!!Nonfamily households:", " !!Total:!!Family households:", " !!Total:"),sun(name)]
age.labels <- vars2020[concept=='HOUSEHOLD TYPE BY AGE OF HOUSEHOLDER',.(name,label)]
age.labels[,label:=gsub(' ','_',label)][,label:=gsub('_!!Total:!!Family_households:!!','',label)][,label:=gsub('_!!Total:!!Nonfamily_households:!!','',label)]
setnames(age.labels,'name','variable')

age20 <-
  decennial_call(age.vars, 'county subdivision', 2020) %>% 
  right_join(age.labels, by='variable') %>% 
  group_by(GEOID,label) %>% 
  summarise(hh = sum(value)) %>% 
  ungroup %>% 
  mutate(ageCAT4 = case_when(
    label == 'Householder_15_to_24_years' ~ 'x == 1',
    label == "Householder_25_to_34_years" ~ 'x == 2',
    label == "Householder_35_to_44_years" ~ 'x == 3',
    label == "Householder_45_to_54_years" ~ 'x == 4',
    label == "Householder_55_to_59_years" ~ 'x == 5',
    label == "Householder_60_to_64_years" ~ 'x == 6',
    label == "Householder_65_to_74_years" ~ 'x == 7',
    label == "Householder_75_to_84_years" ~ 'x == 8',
    label == "Householder_85_years_and_over" ~ 'x == 9'
    )
  ) %>% 
  filter(!is.na(ageCAT4)) %>% 
  right_join(munis,by = 'GEOID')

# Summarize to RPA using MAPC 101 towns
age20_mapc101 <- age20 %>% 
  group_by(rpa_acr,ageCAT4) %>% 
  summarise(TARGET = sum(hh))

# Summarize to MPO using MAPC 97 towns
age20_mapc97 <- age20 %>% 
  group_by(mpo,ageCAT4) %>% 
  summarise(TARGET = sum(hh))

type.vars <- vars2020[concept=="HOUSEHOLD SIZE BY HOUSEHOLD TYPE BY PRESENCE OF OWN CHILDREN",sun(name)]
type.labels <- vars2020[concept=="HOUSEHOLD SIZE BY HOUSEHOLD TYPE BY PRESENCE OF OWN CHILDREN",.(name,label)]
type.labels[,label:=gsub(' ','_',label)][,label:=gsub('_!!','',label)]
setnames(type.labels,'name','variable')

type20 <-
  decennial_call(type.vars, 'county subdivision', 2020) %>% 
  right_join(type.labels, by='variable') %>% 
  group_by(GEOID,label) %>% 
  summarise(hh = sum(value)) %>% 
  ungroup %>% 
  mutate(type = case_when(
    label %in% c(
      'Total:!!2-or-more-person_household:!!Family_households:!!Married_couple_family:!!With_own_children_under_18_years',
      'Total:!!2-or-more-person_household:!!Family_households:!!Other_family:!!Male_householder,_no_spouse_present:!!With_own_children_under_18_years',
      'Total:!!2-or-more-person_household:!!Family_households:!!Other_family:!!Female_householder,_no_spouse_present:!!With_own_children_under_18_years'
      ) ~ 'x == 1',
    label %in% c(
      'Total:!!2-or-more-person_household:!!Family_households:!!Married_couple_family:!!No_own_children_under_18_years',
      'Total:!!2-or-more-person_household:!!Family_households:!!Other_family:!!Female_householder,_no_spouse_present:!!No_own_children_under_18_years',
      'Total:!!2-or-more-person_household:!!Family_households:!!Other_family:!!Male_householder,_no_spouse_present:!!No_own_children_under_18_years',
      'Total:!!2-or-more-person_household:!!Nonfamily_households:'
      ) ~ 'x == 3', 
    label == 'Total:!!1-person_household:' ~ 'x == 5')
    ) %>% 
  filter(!is.na(type)) %>%
  right_join(munis,by = 'GEOID') %>% 
  setDT()

# Summarize to RPA using MAPC 101 towns
type20_mapc101 <- type20 %>% 
  group_by(rpa_acr,type) %>% 
  summarise(TARGET = sum(hh)) %>% 
  rename(HHtype=type)

# Summarize to MPO using MAPC 97 towns
type20_mapc97 <- type20 %>% 
  group_by(mpo,type) %>% 
  summarise(TARGET = sum(hh)) %>% 
  rename(HHtype=type)

size.vars <- vars2020[concept=="HOUSEHOLD TYPE BY HOUSEHOLD SIZE" & !label %in% c(" !!Total:!!Nonfamily households:", " !!Total:!!Family households:", " !!Total:"),sun(name)]
size.labels <- vars2020[concept=="HOUSEHOLD TYPE BY HOUSEHOLD SIZE",.(name,label)]
size.labels[,label:=gsub(' ','_',label)][,label:=gsub('_!!Total:!!Family_households:!!','',label)][,label:=gsub('_!!Total:!!Nonfamily_households:!!','',label)]
setnames(size.labels,'name','variable')


size20 <-
  decennial_call(size.vars, 'county subdivision', 2020) %>% 
  right_join(size.labels, by='variable') %>% 
  group_by(GEOID,label) %>% 
  summarise(hh = sum(value)) %>% 
  ungroup %>% 
  mutate(size = case_when(
    label == '1-person_household' ~ 'x == 1',
    label == '2-person_household' ~ 'x == 2',
    label == '3-person_household' ~ 'x == 3',
    label == '4-person_household' ~ 'x == 4',
    label == '5-person_household' ~ 'x == 5',
    label == '6-person_household' ~ 'x == 6',
    label == '7-or-more-person_household' ~ 'x == 7'),
    ) %>% 
  filter(!is.na(size)) %>%
  right_join(munis,by = 'GEOID') %>% 
  setDT()

# Summarize to RPA using MAPC 101 towns
size20_mapc101 <- size20 %>% 
  group_by(rpa_acr,size) %>% 
  summarise(TARGET = sum(hh))

# Summarize to MPO using MAPC 97 towns
size20_mapc97 <- size20 %>% 
  group_by(mpo,size) %>% 
  summarise(TARGET = sum(hh))

```

# 7.4.1 For MAPC101

# 7.4.2 For MAPC97

```{r}
# 7.4.1 - Household Projections by RPA (MAPC101) and Household Type
proj.hh.MAPC101_by.rpa.hhtype <- left_join(umdi.pop.MAPC101,
                                           headship_rates,
                                           by = c("rpa_acr", "ageCAT6")) |>
  rowwise() |>
  #Calculating the number of households in each RPA and age catergory
  mutate(hh = round(hhpop * freq, 0),) |>
  # Filter the headships rates foe the three household type categories
  # 1. hhderchild = households with a child under 18
  # 3. hhdernochild = Multiple adult, no children households
  # 5. single = Single householder
  filter(var == "hhderchild" |
           var == "hhdernochild" | var == "single") |>
  mutate(
    HHtype = case_when(
      var == "hhderchild" ~ "x == 1",
      var == "hhdernochild" ~ "x == 3",
      var == "single" ~ "x == 5"
    ),
    AgeCat = case_when(
      ageCAT6 == 1 ~ "x == 1",
      ageCAT6 == 2 ~ "x == 2",
      ageCAT6 == 3 ~ "x == 3",
      ageCAT6 == 4 ~ "x == 4",
      ageCAT6 == 5 ~ "x == 5",
      ageCAT6 == 6 ~ "x == 6",
      ageCAT6 == 7 ~ "x == 7",
      ageCAT6 == 8 ~ "x == 8",
      ageCAT6 == 9 ~ "x == 9",
      ageCAT6 == 10 ~ "x == 10",
      ageCAT6 == 11 ~ "x == 11",
      ageCAT6 == 12 ~ "x == 12",
      ageCAT6 == 13 ~ "x == 13",
      ageCAT6 == 14 ~ "x == 14",
      ageCAT6 == 15 ~ "x == 15",
      ageCAT6 == 16 ~ "x == 16",
      ageCAT6 == 17 ~ "x == 17",
      ageCAT6 == 18 ~ "x == 18"
    )
  ) |>
  select(-c(pop, hhpop, freq, var, ageCAT6)) |>
  relocate(rpa_acr, AgeCat, HHtype, hh, year)

#===============================================================================
# 7.4.2 Household Projections by MPO (MAPC97) and Household Type
proj.hh.MAPC97_by.mpo.hhtype <- left_join(
  umdi.pop.MAPC97,
  headship_rates,
  by = c("mpo" = "rpa_acr", "ageCAT6")
) |> 
  rowwise() |> 
  #Calculating the number of households in each RPA and age catergory
  mutate(
    hh = round(hhpop*freq, 0)
  )  |> 
  # Filter the headships rates foe the three household type categories
  # 1. hhderchild = households with a child under 18
  # 3. hhdernochild = Multiple adult, no children households
  # 5. single = Single householder
  filter(
    var == "hhderchild" | var == "hhdernochild" | var == "single"
  ) |> 
  mutate(
    HHtype = case_when(
      var == "hhderchild" ~ "x == 1",
      var == "hhdernochild" ~ "x == 3",
      var == "single" ~ "x == 5"
    ),
    AgeCat = case_when(
      ageCAT6 == 1 ~ "x == 1",
      ageCAT6 == 2 ~ "x == 2",
      ageCAT6 == 3 ~ "x == 3",
      ageCAT6 == 4 ~ "x == 4",
      ageCAT6 == 5 ~ "x == 5",
      ageCAT6 == 6 ~ "x == 6",
      ageCAT6 == 7 ~ "x == 7",
      ageCAT6 == 8 ~ "x == 8",
      ageCAT6 == 9 ~ "x == 9",
      ageCAT6 == 10 ~ "x == 10",
      ageCAT6 == 11 ~ "x == 11",
      ageCAT6 == 12 ~ "x == 12",
      ageCAT6 == 13 ~ "x == 13",
      ageCAT6 == 14 ~ "x == 14",
      ageCAT6 == 15 ~ "x == 15",
      ageCAT6 == 16 ~ "x == 16",
      ageCAT6 == 17 ~ "x == 17",
      ageCAT6 == 18 ~ "x == 18"
    )
  ) |> 
  select(-c(pop, hhpop, freq, var, ageCAT6)) |> 
  relocate(mpo, AgeCat, HHtype, hh, year)

```

# 7.5 Create Reweighter Template Files for Household Projections by RPA/MPO and Household Type

**!! - Still need to create age_baseline, type_baseline, and size_baseline dataframes from PUMS data to match format of 2020 target tables**

------------------------------------------------------------------------

```{r}

#===============================================================================
# Iterate through household projections to create reweighter targeting files for households
# MAPC101/RPA Versions
for (i in yrs) {
  
  #Filter the projected households dataframe by year i
  
  if (i != 2020){
  tmp <- proj.hh.MAPC101_by.rpa.hhtype |> 
    filter(
      year == i
    ) |> 
    select(-c(year))
  
  #Join the projected households by year to the baseline file.
  target.file <- left_join(
    hhtype_baseline,
    tmp,
    by = c("RPA" = "rpa_acr", "AgeCat", "HHtype")
  ) |> 
    dplyr::rename(
      TARGET = hh
    )
  
  #Write the reweighter targeting file to .csv by year i.
  write.csv(
    target.file,
    paste0(output_path, "hhtype.targetfile.MAPC101.",scen,'.hdshp.',hdshp,'.y',i,".csv"),
    row.names = FALSE
  )
  
  #Remove files that will be re-written in each loop.
  rm(tmp, target.file)
  
  #Record when the process has finished for each year in the year list.
  print(paste0("MAPC101 Reweighter Target File for ",i," has been generated."))
}
  if (i==2020){
  #Join the projected households by year to the baseline file.
  target.age <- left_join(
    age_baseline,
    age20_mapc101,
    by = c("RPA" = "rpa_acr", "ageCAT4"))
  
  target.type <- left_join(
    type_baseline,
    type20_mapc101,
    by = c("RPA" = "rpa_acr", "HHtype"))
  
  target.size <- left_join(
    size_baseline,
    size20_mapc101,
    by = c("RPA" = "rpa_acr", "size"))
  
  #Write the reweighter targeting file to .csv by year i.
  fwrite(
    target.age,
    paste0(output_path, "age.targetfile.MAPC101.",scen,'.hdshp.',hdshp,'.y',i,".csv"))
    fwrite(
    target.type,
    paste0(output_path, "type.targetfile.MAPC101.",scen,'.hdshp.',hdshp,'.y',i,".csv"))
    fwrite(
    target.size,
    paste0(output_path, "size.targetfile.MAPC101.",scen,'.hdshp.',hdshp,'.y',i,".csv"))

  #Record when the process has finished for each year in the year list.
  print(paste0("MAPC101 Reweighter Target Files for ",i," has been generated."))
}
  }

#===============================================================================
# MAPC97/MPO Versions
for (i in yrs) {
  
  if(i!=2020){
  #Filter the projected households dataframe by year i
  tmp <- proj.hh.MAPC97_by.mpo.hhtype |> 
    filter(
      year == i
    ) |> 
    select(-c(year))
  
  #Join the projected households by year to the baseline file.
  target.file <- left_join(
    hhtype_baseline,
    tmp,
    by = c("RPA" = "mpo", "AgeCat", "HHtype")
  ) |> 
    dplyr::rename(
      TARGET = hh
    )
  
  #Write the reweighter targeting file to .csv by year i.
  write.csv(
    target.file,
    paste0(output_path, "hhtype.targetfile.MAPC97.",scen,'.hdshp.',hdshp,'.y',i,".csv"),
    row.names = FALSE
  )
  
  #Remove files that will be re-written in each loop.
  rm(tmp, target.file)
  
  #Record when the process has finished for each year in the year list.
  print(paste0("MAPC97 Reweighter Target File for ",i," has been generated."))
}
  if (i==2020){
  #Join the projected households by year to the baseline file.
  target.age <- left_join(
    age_baseline,
    age20_mapc97,
    by = c("RPA" = "mpo", "ageCAT4"))
  
  target.type <- left_join(
    type_baseline,
    type20_mapc97,
    by = c("RPA" = "mpo", "HHtype"))
  
  target.size <- left_join(
    size_baseline,
    size20_mapc97,
    by = c("RPA" = "mpo", "size"))
  
  #Write the reweighter targeting file to .csv by year i.
  fwrite(
    target.age,
    paste0(output_path, "age.targetfile.MAPC97.",scen,'.hdshp.',hdshp,'.y',i,".csv"))
    fwrite(
    target.type,
    paste0(output_path, "type.targetfile.MAPC97.",scen,'.hdshp.',hdshp,'.y',i,".csv"))
    fwrite(
    target.size,
    paste0(output_path, "size.targetfile.MAPC97.",scen,'.hdshp.',hdshp,'.y',i,".csv"))

  #Record when the process has finished for each year in the year list.
  print(paste0("MAPC97 Reweighter Target Files for ",i," has been generated."))
  }
}

```

# Old Code

```{r}
################################################################################
# 5. Generate BASELINE data for the reweighter targeting files
#
#5.1.1 Labor Force Participation by Sex, Age, Educational Attainment
PUMS_LF_PAGEC_SEX_EDUATTN_RPA <- PUMS_data %>%
  #Takes only observations that are in housing units and in the labor force.
  filter(TYPE == 1 & lf >= 1) %>%
  #Sets the level of aggregation (e.g. we want the number of observations by year, by RPA, by age group, by sex, by educational attainment) 
  group_by(year, RPA, PAGEC, eduattn, SEX) %>%
  #Sums up the number of observations by the level of aggregation set above using the person weight.
  count(var = lf, wt = PWGTP) %>%
  #Removes the level of aggregation set earlier by group_by()
  ungroup() %>%
  #Recodes factor variables as the categories they represent.
  #Converts numbers into frequencies.
  mutate(
    var = case_when(
      var == 1 ~ "in LF",
      var == 2 ~ "not in LF"),
    SEX = case_when(
      SEX == 1 ~ "Male",
      SEX == 2 ~ "Female"),
    EDUATTN = case_when(
      eduattn == 1 ~ "High School or less",
      eduattn == 2 ~ "Some college or Associate's degree",
      eduattn == 3 ~ "Bachelor's",
      eduattn == 4 ~ "Master's or higher")
  ) %>%
  group_by(
    year, RPA, PAGEC, SEX, EDUATTN
  ) %>% 
  #Converts numbers into frequencies for those in and not in the laborforce, based
  #on the demographic variables.
  mutate(
    freq = (n/sum(n))
  ) %>% 
  ungroup() %>% 
  filter(var == "in LF" & year == 2019) %>%
  #Drops the "n" variable 
  select(-n) #%>%
  #Rearranges the dataframe to have each column be a level of labor force participation.
  #and each row be an age sex, and educational attainment group.
  #pivot_wider(names_from = var, values_from = freq)
  #pivot_wider(names_from = var, values_from = n)

#Bring in Labor Force Participation Rate Adjustment 
lfpr_adj <- read_excel(
  paste0(HH_Pop_Proj_dir,"LFPR_adjustment.xlsx"),
  sheet = 1
  ) %>%
  mutate(
    age_cat = as.factor(age_cat)
  )

#Join adjustment to PUMS laborforce participation rate calculations
PUMS_LF_PAGEC_SEX_EDUATTN_RPA <- left_join(PUMS_LF_PAGEC_SEX_EDUATTN_RPA, lfpr_adj, by = c("PAGEC" = "age_cat", "SEX" = "sex"))

PUMS_LF_PAGEC_SEX_EDUATTN_RPA <- PUMS_LF_PAGEC_SEX_EDUATTN_RPA %>%
  mutate(static_rate = freq,
         LFPR_adj_2020 = freq+adj_2020,
         LFPR_adj_2020 = if_else(LFPR_adj_2020 < 0, 0, LFPR_adj_2020),
         LFPR_adj_2020 = if_else(LFPR_adj_2020 > 1.0, 1.0, LFPR_adj_2020),
         LFPR_adj_2030_2050 = LFPR_adj_2020+adj_2030_2050,
         LFPR_adj_2030_2050 = if_else(LFPR_adj_2030_2050 < 0, 0, LFPR_adj_2030_2050),
         LFPR_adj_2030_2050 = if_else(LFPR_adj_2030_2050 > 1.0, 1.0, LFPR_adj_2030_2050)) %>%
  select(RPA, PAGEC, SEX, EDUATTN, static_rate, LFPR_adj_2020, LFPR_adj_2030_2050)

lfpr_2000 <- PUMS_LF_PAGEC_SEX_EDUATTN_RPA %>% 
  select(
    RPA, PAGEC, SEX, EDUATTN, static_rate
  ) %>% 
  dplyr::rename(
    lfpr = static_rate
  ) %>% 
  mutate(
    Year = 2000
  )

lfpr_2010 <- PUMS_LF_PAGEC_SEX_EDUATTN_RPA %>% 
  select(
    RPA, PAGEC, SEX, EDUATTN, static_rate
  )  %>% 
  dplyr::rename(
    lfpr = static_rate
  ) %>%  
  mutate(
    Year = 2010
  )

lfpr_2020 <- PUMS_LF_PAGEC_SEX_EDUATTN_RPA %>% 
  select(
    RPA, PAGEC, SEX, EDUATTN, LFPR_adj_2020
  ) %>% 
  dplyr::rename(
    lfpr = LFPR_adj_2020
  ) %>% 
  mutate(
    Year = 2020
  )

lfpr_2030 <- PUMS_LF_PAGEC_SEX_EDUATTN_RPA %>% 
  select(
    RPA, PAGEC, SEX, EDUATTN, LFPR_adj_2030_2050
  ) %>% 
  dplyr::rename(
    lfpr = LFPR_adj_2030_2050
  ) %>%  
  mutate(
    Year = 2030
  )

lfpr_2040 <- PUMS_LF_PAGEC_SEX_EDUATTN_RPA %>% 
  select(
    RPA, PAGEC, SEX, EDUATTN, LFPR_adj_2030_2050
  ) %>% 
  dplyr::rename(
    lfpr = LFPR_adj_2030_2050
  ) %>% 
  mutate(
    Year = 2040
  )

lfpr_2050 <- PUMS_LF_PAGEC_SEX_EDUATTN_RPA %>% 
  select(
    RPA, PAGEC, SEX, EDUATTN, LFPR_adj_2030_2050
  ) %>% 
  dplyr::rename(
    lfpr = LFPR_adj_2030_2050
  ) %>%  
  mutate(
    Year = 2050
  )

lfpr <- bind_rows(lfpr_2000,lfpr_2010,lfpr_2020,lfpr_2030,lfpr_2040,lfpr_2050) %>% mutate(Year = as.character(Year))

#Determine how many people are in each educational attainment bracket
umdi_pop_educ <- left_join(umdi_hh_population_proj, PUMS_pop_by_educ, by = c("MPO" = "RPA", "Sex"  = "SEX", "Age.Group" = "PAGEC"))

umdi_pop_educ <- umdi_pop_educ %>% 
  filter(
    Age.Group != 1 & Age.Group != 2 & Age.Group != 3
  ) %>% 
  mutate(
    HH_Population_Educ = HH_Population*freq
  ) %>% 
  select(
    -c(
      HH_Population,
      year,
      freq
    )
  ) %>% 
  dplyr::rename(
    EDUATTN = var
  ) %>% 
  relocate(
    EDUATTN,
    .before = HH_Population_Educ
  )

# Now Join the laborforce participation rate to the household population number by 
umdi_pop_educ_lf <- left_join(umdi_pop_educ, lfpr, by = c("Year", "MPO" = "RPA", "Sex"  = "SEX", "Age.Group" = "PAGEC", "EDUATTN"))

umdi_pop_educ_lf_cleaned <- umdi_pop_educ_lf %>% 
  mutate(
    lf = HH_Population_Educ*lfpr
  ) %>%
  select(
    -c(
      HH_Population_Educ,
      lfpr
    )
  ) %>% 
  pivot_wider(
    names_from = Year,
    values_from = lf
  ) %>% 
  dplyr::rename(
    lf_2000 = `2000`,
    lf_2010 = `2010`,
    lf_2020 = `2020`,
    lf_2030 = `2030`,
    lf_2040 = `2040`,
    lf_2050 = `2050`
  )

write.csv(umdi_pop_educ_lf_cleaned, "K:/DataServices/Projects/Current_Projects/Projections/Data/Tabular/tProjections 2022 v2050/Outputs/lf_age_sex_educ_cleaned_v3.22.23.csv",
          row.names = FALSE)

#5.2 Household Type by Age

#RPA LEVEL
PUMS_HHtype_PAGEC_RPA <- PUMS_data %>%
  #Inclues only observations for people in households (omits GQ)                       
  filter(TYPE == 1) %>%
  #Groups by variables in the dataframe necessary to getting the granularity of
  #data we're interested in.
  group_by(year, RPA, PAGEC) %>%
  #Computes the weighted sum of individuals in each HH type category by the groups
  #assigned above.
  count(var = HHtype, wt = PWGTP) %>%
  #Recodes factor variables as the categories they represent.
  #Converts numbers into frequencies.                       
  mutate(
    var = case_when(
      var == 1 ~ "hhderchild",
      var == 2 ~ "nothhderchild",
      var == 3 ~ "hhdernochild",
      var == 4 ~ "nothhdernochild",
      var == 5 ~ "single"),
    freq = (n/sum(n))) %>%
  #Selects the appropriate year of data
  filter(year == 2019) %>%
  #Removes the level of aggregation set earlier by group_by()
  ungroup()# %>%
  #Drops the variable that represents the number of observations from each category
  #select(-n) #%>%
  #Pivots the dataframe to a wide format 
  #pivot_wider(names_from = var, values_from = freq)
  #pivot_wider(names_from = var, values_from = freq)

#write.csv(PUMS_HHtype_PAGEC_RPA,
          #"S:/Network Shares/NEW K Drive/DataServices/Projects/Current_Projects/Projections/Data/Tabular/tProjections 2022 v2050/Outputs/hhtype_rates_v1.csv")
write.csv(PUMS_HHtype_PAGEC_RPA,
          "K:/DataServices/Projects/Current_Projects/Projections/Reweighter/Alternative_Scenarios/MAPC_General_HHd_Target/Projected_HeadshipRate_Adjustements/ACSPUMS_15_19_hhtype_rates_v03.22.23.csv",
          row.names = FALSE)
PUMS_HHtype_PAGEC_RPA <- read.csv(
  "K:/DataServices/Projects/Current_Projects/Projections/Reweighter/Alternative_Scenarios/MAPC_General_HHd_Target/Projected_HeadshipRate_Adjustements/ACSPUMS_15_19_hhtype_rates_v03.22.23_ADJUSTED.csv"
) %>% 
  select(
    -c(
      freq,
      adjustment,
      Ignore
    )
  ) %>% 
  dplyr::rename(
    freq = freq_adj
  )


umdi_hh_population_projs_age <- umdi_hh_population_proj %>%
  group_by(Year, MPO, Age.Group) %>%
  summarise(
    HH_Population = sum(HH_Population)
  ) %>% 
  ungroup()

umdi_pop_hhtype_age <- left_join(umdi_hh_population_projs_age, PUMS_HHtype_PAGEC_RPA, by = c("MPO" = "RPA", "Age.Group" = "PAGEC"))

umdi_pop_hhtype_age_cleaned <- umdi_pop_hhtype_age %>% 
  dplyr::rename(
    HH_type = var
  ) %>%
  rowwise() %>% 
  mutate(
    Households = HH_Population*freq
  ) %>% 
  select(
    -c(
      year,
      freq,
      HH_Population
    )
  ) %>% 
  pivot_wider(
    names_from = Year,
    values_from = Households
  ) %>% 
  dplyr::rename(
    proj_hh_2000 = `2000`,
    proj_hh_2010 = `2010`,
    proj_hh_2020 = `2020`,
    proj_hh_2030 = `2030`,
    proj_hh_2040 = `2040`,
    proj_hh_2050 = `2050`
  )


write.csv(umdi_pop_hhtype_age_cleaned,
          "K:/DataServices/Projects/Current_Projects/Projections/Data/Tabular/tProjections 2022 v2050/Outputs/hhtype_age_PROJECTIONS_v03.22.23.csv",
          row.names = FALSE)

```

# Part 5

```{r}
### Format Targets for Reweighter from Projections
### Author: Brandon Stanaway
### Date: 08/05/2022
### Purpose:Takes output from projections methodology to create target files for the reweighter
### Same purpose as excel file K:/DataServices/Projects/Current_Projects/LandUseAllocationModel/Data/Analysis/UrbanSim_Inputs/HH_Targets/Reweighter_Targets_091020/Format_V2Projections_forControls.xlsx
### Targets are AgeHHder_HHtype, Pop_Age, Age_Edu_LF

rm(list=ls())
#install.packages("pacman")
pacman::p_load(tidyverse, plyr, dplyr,data.table, magrittr, readxl)

options(scipen = 999)

###Set directory paths for working remotely or in the office
#Remote
#inpath <- 'S:/Network Shares/DS Projects/Current_Projects/Projections/Data/Tabular/tProjections 2022 v2050/Outputs/'

#In-office
inpath <- 'K:/DataServices/Projects/Current_Projects/Projections/Data/Tabular/tProjections 2022 v2050/Outputs/'

#Remote
#outpath <- 'S:/Network Shares/DS Projects/Current_Projects/Projections/Data/Tabular/tProjections 2022 v2050/Outputs/'

#In-office
outpath <- 'K:/DataServices/Projects/Current_Projects/Projections/Data/Tabular/tProjections 2022 v2050/Outputs/'

#Remote
#reweighter_path <- 'S:/Network Shares/DS Projects/Current_Projects/Projections/Reweighter/Input Files/'

#In-office
reweighter_path <- 'K:/DataServices/Projects/Current_Projects/Projections/Reweighter/Input_Files/'

#Read in baseline files created in the "Projections 2050 Mastercode" R script
temp_hhd_proj <- fread(paste0(inpath,'hhtype_baseline.csv'))
temp_lf_proj <-  fread(paste0(inpath,'lf_baseline.csv'))
temp_pop_proj <-  fread(paste0(inpath,'hhpop_baseline.csv'))

####LF Projections####

setwd(outpath)
lf_projections <- read_excel('lf_age_educ_v1.xlsx',
                             sheet = 1)

lf_projections %<>%
  replace(
    is.na(.),
    0
  ) %>% 
  dplyr::rename(
    RPA = MPO,
    Year = PRED_YEAR,
    AgeCat = age_cat
  )

lf_proj1 <- lf_projections %>% 
  select(
    RPA,
    Year,
    AgeCat,
    `High School or less Male in LF`,
    `High School or less Female in LF`
  ) %>% 
  mutate(
    TARGET = `High School or less Male in LF` + `High School or less Female in LF`,
    edu = "x == 1",
    AgeCat = case_when(
      AgeCat == 1 ~ "x == 1",
      AgeCat == 2 ~ "x == 2",
      AgeCat == 3 ~ "x == 3",
      AgeCat == 4 ~ "x == 4",
      AgeCat == 5 ~ "x == 5",
      AgeCat == 6 ~ "x == 6",
      AgeCat == 7 ~ "x == 7",
      AgeCat == 8 ~ "x == 8",
      AgeCat == 9 ~ "x == 9",
      AgeCat == 10 ~ "x == 10",
      AgeCat == 11 ~ "x == 11",
      AgeCat == 12 ~ "x == 12",
      AgeCat == 13 ~ "x == 13",
      AgeCat == 14 ~ "x == 14",
      AgeCat == 15 ~ "x == 15",
      AgeCat == 16 ~ "x == 16",
      AgeCat == 17 ~ "x == 17",
      AgeCat == 18 ~ "x == 18"
    )
  ) %>% 
  select(
    -`High School or less Male in LF`,
    -`High School or less Female in LF`
  )

lf_proj2 <- lf_projections %>% 
  select(
    RPA,
    Year,
    AgeCat,
    `Some college or Associate's degree Male in LF`,
    `Some college or Associate's degree Female in LF`
  ) %>% 
  mutate(
    TARGET = `Some college or Associate's degree Male in LF` + `Some college or Associate's degree Female in LF`,
    edu = "x == 2",
    AgeCat = case_when(
      AgeCat == 1 ~ "x == 1",
      AgeCat == 2 ~ "x == 2",
      AgeCat == 3 ~ "x == 3",
      AgeCat == 4 ~ "x == 4",
      AgeCat == 5 ~ "x == 5",
      AgeCat == 6 ~ "x == 6",
      AgeCat == 7 ~ "x == 7",
      AgeCat == 8 ~ "x == 8",
      AgeCat == 9 ~ "x == 9",
      AgeCat == 10 ~ "x == 10",
      AgeCat == 11 ~ "x == 11",
      AgeCat == 12 ~ "x == 12",
      AgeCat == 13 ~ "x == 13",
      AgeCat == 14 ~ "x == 14",
      AgeCat == 15 ~ "x == 15",
      AgeCat == 16 ~ "x == 16",
      AgeCat == 17 ~ "x == 17",
      AgeCat == 18 ~ "x == 18"
    )
  ) %>% 
  select(
    -`Some college or Associate's degree Male in LF`,
    -`Some college or Associate's degree Female in LF`
  )

lf_proj3 <- lf_projections %>% 
  select(
    RPA,
    Year,
    AgeCat,
    `Bachelor's Male in LF`,
    `Bachelor's Female in LF`
  ) %>% 
  mutate(
    TARGET = `Bachelor's Male in LF` + `Bachelor's Female in LF`,
    edu = "x == 3",
    AgeCat = case_when(
      AgeCat == 1 ~ "x == 1",
      AgeCat == 2 ~ "x == 2",
      AgeCat == 3 ~ "x == 3",
      AgeCat == 4 ~ "x == 4",
      AgeCat == 5 ~ "x == 5",
      AgeCat == 6 ~ "x == 6",
      AgeCat == 7 ~ "x == 7",
      AgeCat == 8 ~ "x == 8",
      AgeCat == 9 ~ "x == 9",
      AgeCat == 10 ~ "x == 10",
      AgeCat == 11 ~ "x == 11",
      AgeCat == 12 ~ "x == 12",
      AgeCat == 13 ~ "x == 13",
      AgeCat == 14 ~ "x == 14",
      AgeCat == 15 ~ "x == 15",
      AgeCat == 16 ~ "x == 16",
      AgeCat == 17 ~ "x == 17",
      AgeCat == 18 ~ "x == 18"
    )
  ) %>% 
  select(
    -`Bachelor's Male in LF`,
    -`Bachelor's Female in LF`
  )


lf_proj4 <- lf_projections %>% 
  select(
    RPA,
    Year,
    AgeCat,
    `Master's or higher Male in LF`,
    `Master's or higher Female in LF`
  ) %>% 
  mutate(
    TARGET = `Master's or higher Male in LF` + `Master's or higher Female in LF`,
    edu = "x == 4",
    AgeCat = case_when(
      AgeCat == 1 ~ "x == 1",
      AgeCat == 2 ~ "x == 2",
      AgeCat == 3 ~ "x == 3",
      AgeCat == 4 ~ "x == 4",
      AgeCat == 5 ~ "x == 5",
      AgeCat == 6 ~ "x == 6",
      AgeCat == 7 ~ "x == 7",
      AgeCat == 8 ~ "x == 8",
      AgeCat == 9 ~ "x == 9",
      AgeCat == 10 ~ "x == 10",
      AgeCat == 11 ~ "x == 11",
      AgeCat == 12 ~ "x == 12",
      AgeCat == 13 ~ "x == 13",
      AgeCat == 14 ~ "x == 14",
      AgeCat == 15 ~ "x == 15",
      AgeCat == 16 ~ "x == 16",
      AgeCat == 17 ~ "x == 17",
      AgeCat == 18 ~ "x == 18"
    )
  ) %>% 
  select(
    -`Master's or higher Male in LF`,
    -`Master's or higher Female in LF`
  )

lf_proj <- rbind(lf_proj1, lf_proj2, lf_proj3, lf_proj4)

lf_proj %<>%
  dplyr::rename(
    ageCAT3 = AgeCat
  )

temp_lf_proj %<>%
  mutate(
    INTER = BASELINE,
    lf = "x == 1"
  ) %>%
  dplyr::rename(
    edu = eduattn
  ) %>% 
  select(
    RPA,
    AgeCat,
    edu,
    BASELINE,
    INTER,
    lf
  )

lf_proj_all <- left_join(lf_proj, temp_lf_proj, by = c("RPA", "ageCAT3" = "AgeCat", "edu"))

V2_lf_2010f <- lf_proj_all %>% 
  filter(
    Year == 2010
  ) %>% 
  select(
    RPA,
    ageCAT3,
    edu,
    lf,
    BASELINE,
    TARGET
  )

write.csv(V2_lf_2010f,
          "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/LF_Age_Edu_2010_V2.csv",
          row.names = FALSE
)

V2_lf_2020f <- lf_proj_all %>% 
  filter(
    Year == 2020
  ) %>% 
  select(
    RPA,
    ageCAT3,
    edu,
    lf,
    BASELINE,
    TARGET
  )

write.csv(V2_lf_2020f,
          "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/LF_Age_Edu_2020_V2.csv",
          row.names = FALSE
)

V2_lf_2030f <- lf_proj_all %>% 
  filter(
    Year == 2030
  ) %>% 
  select(
    RPA,
    ageCAT3,
    edu,
    lf,
    BASELINE,
    TARGET
  )

write.csv(V2_lf_2030f,
          "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/LF_Age_Edu_2030_V2.csv",
          row.names = FALSE
)

V2_lf_2040f <- lf_proj_all %>% 
  filter(
    Year == 2040
  ) %>% 
  select(
    RPA,
    ageCAT3,
    edu,
    lf,
    BASELINE,
    TARGET
  )

write.csv(V2_lf_2040f,
          "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/LF_Age_Edu_2040_V2.csv",
          row.names = FALSE
)

V2_lf_2050f <- lf_proj_all %>% 
  filter(
    Year == 2050
  ) %>% 
  select(
    RPA,
    ageCAT3,
    edu,
    lf,
    BASELINE,
    TARGET
  )

write.csv(V2_lf_2050f,
          "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/LF_Age_Edu_2050_V2.csv",
          row.names = FALSE
  )

####PopbyAge####
####V2####
setwd(outpath)
data <-read_excel('hhpop_age_v1.xlsx',
                  sheet = 1)

data %<>% 
  dplyr::rename(
    AgeCat = age_cat
  ) %>% 
  mutate(
  AgeCat = case_when(
    AgeCat == 1 ~ "x == 1",
    AgeCat == 2 ~ "x == 2",
    AgeCat == 3 ~ "x == 3",
    AgeCat == 4 ~ "x == 4",
    AgeCat == 5 ~ "x == 5",
    AgeCat == 6 ~ "x == 6",
    AgeCat == 7 ~ "x == 7",
    AgeCat == 8 ~ "x == 8",
    AgeCat == 9 ~ "x == 9",
    AgeCat == 10 ~ "x == 10",
    AgeCat == 11 ~ "x == 11",
    AgeCat == 12 ~ "x == 12",
    AgeCat == 13 ~ "x == 13",
    AgeCat == 14 ~ "x == 14",
    AgeCat == 15 ~ "x == 15",
    AgeCat == 16 ~ "x == 16",
    AgeCat == 17 ~ "x == 17",
    AgeCat == 18 ~ "x == 18"
  )
)

pop_proj_all <- left_join(data, temp_pop_proj, by = c("MPO" = "RPA", "AgeCat"))

pop_proj_all %<>%
  dplyr::rename(
    RPA = MPO,
    ageCAT3 = AgeCat,
    TARGET = proj_hh_pop,
    Year = year
  )
  
V2_hhpop_2020f <- pop_proj_all %>% 
  filter(
    Year == 2020
  ) %>% 
  select(
    RPA,
    ageCAT3,
    TARGET,
    BASELINE
  )

write.csv(
  V2_hhpop_2020f,
  "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/Pop_Age_2020_V2.csv",
  row.names = FALSE
)

V2_hhpop_2030f <- pop_proj_all %>% 
  filter(
    Year == 2030
  ) %>% 
  select(
    RPA,
    ageCAT3,
    TARGET,
    BASELINE
  )

write.csv(
  V2_hhpop_2030f,
  "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/Pop_Age_2030_V2.csv",
  row.names = FALSE
)

V2_hhpop_2040f <- pop_proj_all %>% 
  filter(
    Year == 2040
  ) %>% 
  select(
    RPA,
    ageCAT3,
    TARGET,
    BASELINE
  )

write.csv(
  V2_hhpop_2040f,
  "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/Pop_Age_2040_V2.csv",
  row.names = FALSE
)

V2_hhpop_2050f <- pop_proj_all %>% 
  filter(
    Year == 2050
  ) %>% 
  select(
    RPA,
    ageCAT3,
    TARGET,
    BASELINE
  )

write.csv(
  V2_hhpop_2050f,
  "//data-001/public/DataServices/Projects/Current_Projects/Projections/Reweighter/Input Files/Pop_Age_2050_V2.csv",
  row.names = FALSE
)

```

---
title: "RPA_Reweighter"
format: html
editor: visual
project: execute-dir: project
---

## RPA Reweighter

This set of scripts runs the household reweighter to produce reweighted PUMS data that satisfies household targets set by the user.

# 1 - Set Scenario Name, knitr path, and root directory

```{r, setup, include=FALSE}

# Set Scenario name
scen <- 'Scenario_1'

# Set ACS / PUMS vintage
vintage <-  2021

# Set headship rate scenario
hdshp <- 'acs1721'

# Set MAPC at 101 or 97 towns
reb <- 'MAPC101'
# reb <- 'MAPC97'

# Root Directory
 root <- 'S:/Network Shares/K Drive/DataServices/Projects/'
 #root <- 'K:/DataServices/Projects/'

ctrltotal.path <- paste0(root, 'Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/', scen, '/')

workpath <- paste0(root, 'Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Reweighter/')

input_path <- paste0(workpath, scen, '/Input_Files/') 
output_path <- paste0(workpath, scen, '/Output_Files/') 

#Set knitr path
# knitr::opts_knit$set(root.dir = workpath)
```

# 2 - Set package dependencies, set environment, helper functions

```{r}
pacman::p_load(
  tidyverse,
  tidycensus,
  mapcdatakeys,
  janitor,
  readxl,
  rjson,
  data.table,
  here
)

##get rid of scientific notation
options(scipen = 999)

#Set random seed
set.seed(351)

# Helper function
sun <- function(x){sort(unique(x))}

# List of RPA names
mpos <- unlist(c(mapcdatakeys::all_muni_data_keys %>% select(mpo) %>% unique()))


```

# 3 - Subset PUMS data for each RPA

Formatted PUMS data is created by the *create_regional_control_totals.qmd* in section 6.2

```{r}

pums_data <- fread(paste0(workpath, '/PUMS_data/PUMS', vintage, '_formatted.csv')) %>% filter(TYPEHUGQ == "1") %>% 
  mutate(AgeCat = ageCAT6)

# Make Input folders for reweighter by RPA
dir.create(paste0(workpath, scen, '/Input_Files/'), showWarnings = F)
dir.create(paste0(workpath, scen, '/Output_Files/'), showWarnings = F)
 
for (m in mpos) {
  dir.create(paste0(workpath, scen, '/Input_Files/', m), showWarnings = F)
  dir.create(paste0(workpath, scen, '/Output_Files/', m), showWarnings = F)
}

mapc.pumas <- pums_data[rpa_acr == 'MAPC', unique(PUMA)]
swm.pumas <- pums_data[rpa_acr != 'MAPC', .(rpa_acr, PUMA)] %>% 
  unique()

# MAPC 101 subset
fwrite(pums_data[PUMA %in% mapc.pumas],
       paste0(workpath, scen, '/Input_Files/MAPC/PUMS', vintage, '_MAPC.csv'))
message(paste0('MAPC 101 PUMS export complete'))

# SWM join PUMA and export subsets
for (m in unique(swm.pumas$rpa_acr)) {
  pums_data %>%
    filter(rpa_acr==m) %>%
    fwrite(paste0(workpath, scen, '/Input_Files/', m, '/PUMS', vintage, '_', m, '.csv'))
  message(paste0(m, ' PUMS export complete'))
}

```

# 4 - Create RPA config JSON files for reweighter configuration

```{r}

# Template config file
infile1 <- paste0(workpath, 'Templates/reweighting_config_2021.json')

infile2 <- paste0(workpath, 'Templates/reweighting_config_2020baseyear.json')

for (m in mpos){
  outfile1 <- paste0(workpath, scen, '/Input_Files/', m, '/reweighting_config_2021_', m, '.json')
  outfile2 <- paste0(workpath, scen, '/Input_Files/', m, '/reweighting_config_2020baseyear_', m, '.json')
  cfig1 = readLines(infile1)
  cfig1 = gsub('PUMS2021', paste0('PUMS2021_', m), cfig1)
  writeLines(cfig1, outfile1)
  cfig2 = readLines(infile2)
  cfig2 = gsub('PUMS2021', paste0('PUMS2021_', m), cfig2)
  writeLines(cfig2, outfile2)
}

```

# 5 - Configure, set targets and run reweighter for each RPA and year

```{r}

#

source('algo_hh.R')

# Set Targets and run reweighter loop

# Different configuration for 2020 base year

for (yr in c(2020)) {
  #for (mid in c('MAPC')) {
  for (mid in mpos) {
    # Set config files
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    
    source(here('scripts/reweighter/read_config_RPA_2020baseyear.R'))
    message(paste0(mid, ' configuration complete'))
    
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    age.target <- fread(
      paste0(
        ctrltotal.path,
        'age.targetfile.',
        reb,
        '.',
        scen,
        '.hdshp.',
        hdshp,
        '.y',
        yr,
        '.csv'
      )
    ) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% setDT()
    setorder(age.target, ageCAT4)
    fwrite(age.target, paste0(inpath, '/age.csv'))
    
    size.target <- fread(
      paste0(
        ctrltotal.path,
        'size.targetfile.',
        reb,
        '.',
        scen,
        '.hdshp.',
        hdshp,
        '.y',
        yr,
        '.csv'
      )
    ) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% setDT()
    setorder(size.target, size)
    fwrite(size.target, paste0(inpath, '/size.csv'))
    
    type.target <- fread(
      paste0(
        ctrltotal.path,
        'type.targetfile.',
        reb,
        '.',
        scen,
        '.hdshp.',
        hdshp,
        '.y',
        yr,
        '.csv'
      )
    ) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% setDT()
    setorder(type.target, HHtype)
    fwrite(type.target, paste0(inpath, '/type.csv'))
    
    message(paste0(mid, ' targets set'))
    
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    
    source(here('scripts/reweighter/Manage_Scenario_RPA.R'))
    message(paste0(mid, ' reweighter complete'))
    
    mess <- data.table(txt = paste0(mid, ' reweighter complete'))
    fwrite(mess, paste0(outpath, mid, '_', yr, '_complete.txt'))
  }
}

for (yr in c(2025, 2030, 2035, 2040, 2045, 2050)) {
  for (mid in mpos) {
    
    # Set config
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    source(here('scripts/reweighter/read_config_RPA.R'))
    message(paste0(mid, ' configuration complete'))
    
    # Set targets
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    dir.create(outpath, showWarnings = F)
    template <- fread(paste0(workpath, 'Templates/AgeHHder_HHtype_template.csv')) %>%
      select(-BASELINE, -TARGET)
    target <- fread(paste0(ctrltotal.path, 'hhtype.targetfile.', reb, '.', scen,'.hdshp.',hdshp,'.y',yr, '.csv')) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% right_join(template, by = c('AgeCat', 'HHtype')) %>% setDT()
    target[AgeCat %in% c('x == 1', 'x == 2', 'x == 3'), `:=`(BASELINE =
                                                               0,
                                                             INTER = 0,
                                                             TARGET = 0)]
    target[is.na(BASELINE),`:=`(BASELINE =0, INTER = 0, TARGET = 0)]
    setorder(target, AgeCat, HHtype)
    fwrite(target, paste0(inpath, '/AgeHHder_HHtype.csv'))
    
    target2 <- fread(paste0(ctrltotal.path, "tenure.targetfile.",reb,".",scen,'.hdshp.',hdshp,".y",yr,".csv")) %>%
      filter(RPA == mid) %>% 
      setDT()
    
    target2[is.na(BASELINE),`:=`(BASELINE =0,INTER = 0,TARGET = 0)]
    setorder(target2, AgeCat, tenure)
    fwrite(target2, paste0(inpath, '/age_tenure.csv'))
    
    message(paste0(mid, ' targets set'))
    
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    
    source(here('scripts/reweighter/Manage_Scenario_RPA.R'))
    message(paste0(mid, ' reweighter complete'))
    
    mess <- data.table(txt = paste0(mid, ' reweighter complete'))
    fwrite(mess, paste0(outpath, mid, '_', yr, '_complete.txt'))
  }
}

```

# 6 - Create reweighted PUMS files and QC the reweighter Outputs

```{r}

comp.dt <- data.table()

for (yr in 2020){
  for (mid in mpos) {
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    # Summarize total households by mpo from target inputs to reweighter
    target <- fread(paste0(ctrltotal.path, 'type.targetfile.', reb, '.', scen, '.hdshp.', hdshp, '.y', yr, '.csv')) %>%
      filter(RPA == mid) %>% setDT()
    
    tsum <- target[, lapply(.SD, sum), RPA, .SDcols = 'TARGET']
    tsum[, TARGET := round(TARGET)][,year:=yr]
    setnames(tsum, 'RPA', 'mpo')
    setkey(tsum, mpo)
    
    # Calculate total households from the reweighter outputs
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    setkey(pums, SERIALNO, SPORDER)
    
    rw <- data.table()
    
    x <- fread(paste0(outpath, '/weights_final_', scen, '_', mid, '_', yr, '.csv')) %>% select(SERIALNO, SPORDER, new_WGTP) %>% mutate(mpo = mid) %>% setDT()
    setkey(x, SERIALNO, SPORDER)
    xp <- pums[x]
    fwrite(xp, paste0(outpath, '/reweighted_PUMS_', scen, '_', reb, '_', mid, '_', hdshp, '_', yr, '.csv'))
    xsum <- xp[SPORDER == 1, lapply(.SD, sum), .(mpo), .SDcols = c('WGTP', 'new_WGTP')]
    xsum[, rw_HH := round(new_WGTP)][, pums_baseline_hh := round(WGTP)]
    rw <- rbind(rw, xsum)
    setkey(rw, mpo)
    comp <- tsum[rw]
    comp.out <- comp[,.(year,mpo,pums_baseline_hh, TARGET,rw_HH)]
    comp.out[,diff:= TARGET - rw_HH]
    fwrite(comp.out,paste0(outpath,'reweighter_QC_', scen, '_', reb, '_', mid, '_', hdshp, '_', yr,' .csv'))
    comp.dt <- rbind(comp.dt,comp.out)
  }
}
for (yr in c(2030,2035,2040,2045,2050)){
  for (mid in mpos) {
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    # Summarize total households by mpo from target inputs to reweighter
    target <- fread(paste0(ctrltotal.path, 'hhtype.targetfile.', reb, '.', scen, '.hdshp.', hdshp, '.y', yr, '.csv')) %>%
      filter(RPA == mid) %>% setDT()
    
    tsum <- target[, lapply(.SD, sum), RPA, .SDcols = 'TARGET']
    tsum[, TARGET := round(TARGET)][,year:=yr]
    setnames(tsum, 'RPA', 'mpo')
    setkey(tsum, mpo)
    
    # Calculate total households from the reweighter outputs
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    setkey(pums, SERIALNO, SPORDER)
    
    rw <- data.table()
    
    x <- fread(paste0(outpath, '/weights_final_', scen, '_', mid, '_', yr, '.csv')) %>% select(SERIALNO, SPORDER, new_WGTP) %>% mutate(mpo = mid) %>% setDT()
    setkey(x, SERIALNO, SPORDER)
    xp <- pums[x]
    fwrite(xp, paste0(outpath, '/reweighted_PUMS_', scen, '_', reb, '_', mid, '_', hdshp, '_', yr, '.csv'))
    xsum <- xp[SPORDER == 1, lapply(.SD, sum), .(mpo), .SDcols = c('WGTP', 'new_WGTP')]
    xsum[, rw_HH := round(new_WGTP)][, pums_baseline_hh := round(WGTP)]
    rw <- rbind(rw, xsum)
    setkey(rw, mpo)
    comp <- tsum[rw]
    comp.out <- comp[,.(year,mpo,pums_baseline_hh, TARGET,rw_HH)]
    comp.out[,diff:= TARGET - rw_HH]
    fwrite(comp.out,paste0(outpath,'reweighter_QC_', scen, '_', reb, '_', mid, '_', hdshp, '_', yr,' .csv'))
    comp.dt <- rbind(comp.dt,comp.out)
  }
}

fwrite(comp.dt,paste0(workpath, scen, '/Output_Files/reweighter_QC_all_RPAs_all_years_', scen, '_', hdshp,' .csv'))

comp.dt[abs(diff)>1]

```

# 7 - Create summary tables of reweighted households

```{r}

for (yr in c(2020,2030,2035,2040,2045,2050)){
  sw <- data.table()
  for (mid in mpos){
    inp <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    dt <- fread(paste0(inp, '/reweighted_PUMS_', scen, '_', reb, '_', mid, '_', hdshp, '_', yr, '.csv'))
    dt[, year:=yr][,reb:=reb][,hdshp:=hdshp][,scen:=scen]
    sw <- rbind(sw,dt)
  }
 fwrite(sw,paste0(workpath,scen,'/Output_Files/reweighted_PUMS_', scen, '_', reb, '_', hdshp, '_', yr, '.csv'))
 }
```

# 8 - Vacancy and Unit Demand post-model calculations

Let RVRY = Regional Target Vacancy Rate for region R in year Y

Avail_units_2020 = hu_occ 2020 + (total_vacant_2020 \* (1-unavail_rate))

Vacrate_avail_2020 = 1 - ( hu_occ 2020/ Avail_units_2020)

Calculate Housing Shortage/Surplus for 2020:

Hous_short_2020 = (RVR2020 - \[vacrate_avail_2020\]) \* Avail_units_2020

This may be positive (shortage) or negative (surplus)

Calculate vacated units – number of units freed up due to HH decline

VacatedHU_20_30 = Max(0, (-1 \* HHchg_20_30))

Calculate vacant units associated with HH growth

HHgrowth_vac_20_30 =MAX(HHchg_20_30\* RVR2030, 0)

Discount production needed to close existing shortage

Shortage_units_20_30 = IF (Hous_short_2020 \> HHchg_20_30, MAX(HHchg_20_30, (Hous_short_2020 \*0.5)), Hous_short_2020)

Calculate total vacant units needed

TotVac_20_30 = Shortage_units_20_30 + HHgrowth_vac_20_30

Calculate total Housing Unit Demand

Tot_HU_20_30 = max(max(HHchg_20_30, 0) + TotVac_20_30, 0)

Calculate remaining shortfall for subsequent decade

Hous_short_2030 = Hous_short_2020 – Shortage_units_20_30

```{r}

# Set residential vacancy rate targets
# Load in the actual 2020 unit counts and vacancy rates from Census 2020 DHC

munis <- mapcdatakeys::all_muni_data_keys %>%
  select(muni_id, muni_name, cosub_cn20, cmtyp08, mapc, mpo, rpa_acr) %>%
  mutate(GEOID = as.character(cosub_cn20)) 

vars <- load_variables(2020, 'dhc') %>% setDT()
vs <- vars[grepl('VACANCY', concept), name]
ns <- vars[grepl('VACANCY', concept), gsub(':', '', gsub(' ', '_', (gsub(
  ',', '', gsub(':!!', '_', (gsub(' !!', '', (
    label
  ))))
))))]

ten <- c('H10_002N','H10_010N') # Vacant owner-occupied units, Vacant renter-occupied units

vs <- c('H1_001N', 'P20_001N', vs, ten)

d1 <-
  get_decennial(
    year = 2020,
    sumfile = 'dhc',
    state = 'MA',
    geography = 'county subdivision',
    variables = vs
  ) %>%
  pivot_wider(names_from = 'variable') %>%
  select(-NAME) %>%
  setDT()
setnames(d1, c('GEOID', 'total_units', 'total_households', gsub('Total','Vacant',ns), 'own_occ_units', 'rent_occ_units'))

m2 <- munis %>% select(GEOID, muni_id, muni_name, mpo, rpa_acr, cmtyp08)
dhc <- d1 %>%
  left_join(m2, by = 'GEOID') %>%
  filter(!is.na(muni_id)) %>% 
  mutate(
    total_available_units = total_households + Vacant_For_rent + Vacant_For_sale_only,
    total_unavailable_units = total_units - total_available_units,
    total_available_rental_units = Vacant_For_rent + rent_occ_units,
    total_available_owner_units = Vacant_For_sale_only + own_occ_units,
    rent_ratio = total_available_rental_units / total_available_units,
    own_ratio = total_available_owner_units / total_available_units,
    total_unavailable_rental_units = round(total_unavailable_units * rent_ratio),
    total_unavailable_owner_units = round(total_unavailable_units * own_ratio),
    total_rental_units = total_available_rental_units + total_unavailable_rental_units,
    total_owner_units = total_available_owner_units + total_unavailable_owner_units,
    total_available_vacant_units = Vacant_For_sale_only + Vacant_For_rent,
    vac_rate_avail = round(total_available_vacant_units / total_available_units, 3),
    rent_vac_rate_avail = round(Vacant_For_rent / total_available_rental_units,3),
    own_vac_rate_avail = round(Vacant_For_sale_only / total_available_owner_units,3),
    vac_rate_total = round(total_available_vacant_units / total_units, 3),
    rent_vac_rate_total = round(Vacant_For_rent / total_rental_units,3),
    own_vac_rate_total = round(Vacant_For_sale_only / total_owner_units,3)
    ) %>% 
  rename(total_vacant_units=Vacant,
         vacant_available_to_rent=Vacant_For_rent,
         vacant_rented_not_occ=Vacant_Rented_not_occupied,
         vacant_available_to_own=Vacant_For_sale_only,
         vacant_sold_not_occ=Vacant_Sold_not_occupied,
         vacant_seasonal=Vacant_For_seasonal_recreational_or_occasional_use,
         vacant_migrant=Vacant_For_migrant_workers,
         vacant_other=Vacant_Other_vacant)
 
cs <- c(
  'total_units',
  'total_households',
  'total_vacant_units',
  'total_available_units',
  'total_available_vacant_units',
  'own_occ_units',
  'rent_occ_units',
  'vacant_sold_not_occ',
  'vacant_rented_not_occ',
  'total_rental_units',
  'total_owner_units',
  'total_available_rental_units',
  'vacant_available_to_rent',
  'total_available_owner_units',
  'vacant_available_to_own'
)


dsum101 <- dhc[,lapply(.SD,sum),rpa_acr,.SDcols=(cs)] %>% 
  mutate(
    vac_rate_avail = round(total_available_vacant_units / total_available_units, 3),
    rent_vac_rate_avail = round(vacant_available_to_rent / total_available_rental_units,3),
    own_vac_rate_avail = round(vacant_available_to_own / total_available_owner_units,3),
    vac_rate_total = round(total_available_vacant_units / total_units, 3),
    rent_vac_rate_total = round(vacant_available_to_rent / total_rental_units,3),
    own_vac_rate_total = round(vacant_available_to_own / total_owner_units,3),
    all_unit_rental_vac_rate = round(1 - (rent_occ_units / total_rental_units),3),
    all_unit_owner_vac_rate = round(1 - (own_occ_units / total_owner_units),3)
    )
fwrite(dsum101,paste0(workpath,'MAPC101_all_RPA_available_vacancy_rates_by_tenure.csv'))

vax <- dsum101[,.(rpa_acr,total_units, total_households, own_occ_units,rent_occ_units,total_owner_units, total_available_owner_units, vacant_available_to_own, total_rental_units, total_available_rental_units, vacant_available_to_rent, own_vac_rate_total, rent_vac_rate_total, vac_rate_total)]

# Load reweighted future households data
dt <- data.table()

for (yr in c(2020,2030,2035,2040,2045,2050)){
  tmp <- fread(paste0(workpath,scen,'/Output_Files/reweighted_PUMS_', scen, '_', reb, '_',hdshp,'_', yr, '.csv'))
  dt <- rbind(dt,tmp)
}
  setorder(dt,rpa_acr,year)

  hh <- dt %>% 
    filter(SPORDER==1) %>% 
    mutate(tenure = case_when(
      TEN %in% 1:2 ~ 'own',
      TEN %in% 3:4 ~ 'rent')) %>% 
    group_by(year,mpo,tenure) %>% 
    count(wt=new_WGTP, name='hh') %>% 
    ungroup() %>% 
    mutate(hh = round(hh)) %>% 
    setDT()
  
  uw <- hh %>% 
    pivot_wider(id_cols = 'mpo', names_from = c('tenure','year'), values_from = 'hh') %>%
    left_join(vax, by=c('mpo'='rpa_acr')) %>% 
    setDT()
nm <- names(uw)[2:13]
setnames(uw,nm,paste0('households_',nm))


uw[, own_units_needed_in_2035 := round(households_own_2035 / (1 - own_vac_rate_total))]
uw[, own_units_needed_in_2050 := round(households_own_2050 / (1 - own_vac_rate_total))]
uw[, rent_units_needed_in_2035 := round(households_rent_2035 / (1 - rent_vac_rate_total))]
uw[, rent_units_needed_in_2050 := round(households_rent_2050 / (1 - rent_vac_rate_total))]

uw[,new_owner_units_needed_2020_to_2035 := max(0, own_units_needed_in_2035 - total_available_owner_units),mpo]
uw[,new_rental_units_needed_2020_to_2035 := max(0, rent_units_needed_in_2035 - total_available_rental_units),mpo]
uw[,new_owner_units_needed_2020_to_2050 := max(0, own_units_needed_in_2050 - total_available_owner_units),mpo]
uw[,new_rental_units_needed_2020_to_2050 := max(0, rent_units_needed_in_2050 - total_available_rental_units),mpo]
uw[,total_new_units_needed_2020_to_2035:=new_owner_units_needed_2020_to_2035+new_rental_units_needed_2020_to_2035]
uw[,total_new_units_needed_2020_to_2050:=new_owner_units_needed_2020_to_2050+new_rental_units_needed_2020_to_2050]
uw[,scenario:=scen]
setnames(uw,'vac_rate_total','combined_vacancy_rate_2020')

outfile <- uw[,.(scenario,mpo,total_units,total_owner_units,total_rental_units,total_available_owner_units,total_available_rental_units,vacant_available_to_own,vacant_available_to_rent,own_vac_rate_total,rent_vac_rate_total,combined_vacancy_rate_2020,own_occ_units,rent_occ_units,households_own_2020,households_rent_2020,households_own_2030,households_rent_2030,households_own_2035,households_rent_2035,households_own_2040,households_rent_2040,households_own_2045,households_rent_2045,households_own_2050,households_rent_2050,own_units_needed_in_2035,own_units_needed_in_2050,rent_units_needed_in_2035,rent_units_needed_in_2050,new_owner_units_needed_2020_to_2035,new_rental_units_needed_2020_to_2035,new_owner_units_needed_2020_to_2050,new_rental_units_needed_2020_to_2050,total_new_units_needed_2020_to_2035,total_new_units_needed_2020_to_2050)]

setnames(outfile,c('total_units','total_owner_units','total_rental_units','total_available_owner_units','total_available_rental_units','vacant_available_to_own','vacant_available_to_rent','own_vac_rate_total','rent_vac_rate_total'),c('total_units_2020','total_owner_units_2020','total_rental_units_2020','total_available_owner_units_2020','total_available_rental_units_2020','vacant_available_to_own_2020','vacant_available_to_rent_2020','owner_unit_vacancy_rate_2020','rental_unit_vacancy_rate_2020'))

setnames(outfile,names(outfile),gsub('_',' ',names(outfile)))
fwrite(outfile, paste0(workpath, scen, '/Output_Files/',scen,'_unit_demand_estimates.csv'))
```

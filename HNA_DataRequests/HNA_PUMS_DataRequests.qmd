---
title: "HNA Data Requests"
format: html
editor: visual
---

# 0.1 - Set knitr path + root for inputs

```{r}
#Use when Rproject is open
#root <- '../../../../Data/Working/Regional_Control_Totals/'

# Base root. Toggle between S: and K: drive depending on mapped paths on your computer
base <- "K:/DataServices/Projects/Current_Projects/"
# base <- "S:/Network Shares/K Drive/DataServices/Projects/Current_Projects/"

#General K drive filepath
root <- paste0(base, "/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/")

# Reweighter files path
rwt_path <- paste0(base, "Housing/StatewideHousingPlan/04_Analysis/Data/Working/Reweighter/")

#PUMS K drive filepath
pums_path <- paste0(base, "/Housing/StatewideHousingPlan/04_Analysis/Data/Working/PUMS/ipums_2021/")

#Set output filepath
output_path <- paste0(base, "/Housing/StatewideHousingPlan/04_Analysis/Data/Working/HNA/")

# Input path for headship rates
hdsp.r_path <- paste0(base,"/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Reweighter/Headship_rates/")

#Set knitr path
knitr::opts_knit$set(root.dir = pums_path)
```

# 0.2 - Set package dependencies, set environment, set up data keys

```{r}
library(tidycensus)
library(tidyverse)
library(data.table)
library(mapcdatakeys)
library(janitor)
library(readxl)
library(here)
library(RPostgreSQL)

# Remove scientific notation
options(scipen = 999)
# Set random seed
set.seed(351)

# Load Libraries for PUMS Analysis and PUMS API query functions
# Sets seed and removes scientific notation
source(file = "C:/Project_Work/statewidehousingplan/PUMS_Analysis/PUMS_Helper_Functions.R")
source(file = "C:/Project_Work/Local_Data/General/census.data_connection.R")
source(file = "C:/Project_Work/housing/dbConnections.R")
#source(file = "C:/Project_Work/housing/ami-analysis.R")

# Load PUMA x RPA Crosswalk
xw <- read.csv(paste0(rwt_path, "PUMS_data/PUMA10_RPA_crosswalk.csv")) |> 
  mutate(PUMA = str_pad(PUMA, 5, "left", pad = 0))

# Load MUnicipality to PUMA Crosswalk
muni2puma<-read_csv(paste0(rwt_path, "PUMS_data/pums_muni_inter.csv")) |> 
  select(TOWN_ID, PUMACE10) |> 
  dplyr::rename(muni_id = TOWN_ID)

# 
muni2rpa <- mapcdatakeys::all_muni_data_keys |> select(muni_id, rpa_acr)

# Set date
st <- str_sub(date(Sys.time()), start = 1, end = 10)

```

# 1.0 Question 6:
# 1.1 Load 2000 PUMS Data
```{r}
```

# 1.2 Load PUMS Data
```{r}
# Set PUMS vintage final year for {tidycensus} API query.
vintage <- 2021

# List of PUMS variables
variable_list <- c('RT', 'PUMA', 'ADJINC','NP','TYPEHUGQ','HHLDRAGEP','CIT', 'SCHL',
                   'HHLDRRAC1P','HHLDRHISP', 'HHT', 'HHT2', 'HINCP','LNGI', 'NR', 'PSF','R18',
                   'AGEP','RAC1P','OC','TEN', "SEX", "ESR", 'HISP', 'WKHP', 'HHLANP', 'LANP',
                   'RETP', 'FS', 'HINS4', 'PAP')

# SEMP bottom coding has changed from $1 to $4 like WAGP

# Query {tidycensus} for 2017-2021 5-Year PUMS data
pums <- pums_query(var.list = variable_list, yr = vintage, srvy = "acs5") |> 
  mutate(PUMA = as.character(str_pad(PUMA, width = 5, side = "left", pad = 0)))
```

# 1.3 2000 PUMS Cleaning
```{r}
```
# 1.4 PUMS Cleaning
```{r}
pums_cleaned <- pums |> 
  # Create a household flag for whether there is a child in a household.
  mutate(
    # Generate five-year age groupings to match UMDI population projections data.
    ageCAT6 = cut(AGEP, breaks = c(-Inf, seq(4, 84, 5), Inf), labels = 1:18),
    # Generate an age category binary:
    # (1) Persons older than 60 years old
    # (0) Persons 60 years old or younger
    ageCAT2 = case_when(
      AGEP > 60 ~ "1",
      AGEP <= 60 ~ "0",
      .default = "0"
    ),
    # Create a household flag for whether there is a child (a person under the age of 18) in the household.
    # (1) indicates a person is under the age of 18
    # (0) indicates a person is 18 or older.
    child = case_when(
      AGEP < 18 ~ 1,
      AGEP >= 18 ~ 0,
      .default = 0
    ),
    # Generate ten-year age groupings
    # ageCAT4 is the 2020 decennial census age breaks for age of householder - used for 2020 base year control total reweighter targets
    ageCAT4 = case_when(
      AGEP %in% 0:14 ~ 0,
      AGEP %in% 15:24 ~ 1,
      AGEP %in% 25:34 ~ 2,
      AGEP %in% 35:44 ~ 3,
      AGEP %in% 45:54 ~ 4,
      AGEP %in% 55:59 ~ 5,
      AGEP %in% 60:64 ~ 6,
      AGEP %in% 65:74 ~ 7,
      AGEP %in% 75:84 ~ 8,
      AGEP >= 85 ~ 9,
      .default = 0
    ), 
    # Counts as Worker
    # NOTE: Categories are:
    # (0) under 16 or not in labor force
    # (1) in labor force or non-civilian worker
    worker = case_when(
      # (b) indicates a person under the age of 16.
      # (6) indicates someone not in the laborforce
      (ESR == "b" | ESR == 6) ~ 0,
      # (1) indicates an employed civilian at work.
      # (2) indicates an employed civilian with a job but not at work.
      # (3) indicates civilian who is unemployed.
      # (4) Indicates an employed person in the armed forces. 
      # (5) indicates an employed person in the armed forces with a job but not at work.      
      (ESR == 1 | ESR == 2 | ESR == 3 | ESR == 4 | ESR == 5) ~ 1,
      # When ESR is NA, default to not in the laborforce.
      is.na(ESR) ~ 0,
      # If no information is present default to not in the laborforce.
      .default = 0
    ),
    # Create a grouping variable for types of relationships to the householder.
    # NOTE: 
    # (0) indicates a person in a household that is related in some way to the householder.
    # (1) indicates a person in a household unrelated to the householder.
    RELSHIPP_Group = case_when(
      RELSHIPP %in% c(21,22,23,24,25,26,27,28,29,30,31,32,33) ~ 0,
      RELSHIPP %in% c(34,35,36) ~ 1,
      # Set a default flag for householders.
      .default = 0
    ),
    # Create a grouping variable for owner and renter households.
    TEN_Group = case_when(
      # Owned with a mortage or free and clear -> "Own"
      TEN %in% c("1","2") ~ "Own",
      # Rented or occupied without payment of rent -> "Rent"
      TEN %in% c("3","4") ~ "Rent",
      .default = "Unknown"
    ),
    # Create a "Studio/Non-Defined Bedroom" variable to denote where households do
    # not have a bedroom number.
    studio_flag = case_when(
      BDSP == 0 ~ "Studio/No Defined Bedroom",
      BDSP != 0 ~ "Defined Bedroom",
      .default = "Unknown"
    ),
    # Redefine BDSP to label studios/non-defined bedroom units as One-Bedrooms
    # For purpose of calculating the number of people per bedrooms.
    BDSP = if_else(BDSP == 0, 1, BDSP),
    # Calculate the number of people per bedroom in a housing unit.
    PPB = NP/BDSP,
    # Categorize each housing unit as overcrowded or not based on PPB.
    overcrowded.ppb = case_when(
      PPB > 2.0 ~ "1",
      PPB <= 2.0 ~ "0"
    ),
    # Convert SFN into a numeric column. Introduces NAs for people not in subfamilies
    SFN = as.numeric(SFN),
    # Replace the NA for non-subfamily members with 0.
    SFN = replace_na(SFN, 0),
    # Adjust Household income (HINCP) to constant dollars (USD2021)
    HINCP_adj = HINCP*as.numeric(ADJINC),
    # Household Income Groupings consistent with UrbanSim groupings
    HH.Income_Group = case_when(
      HINCP_adj <= 35000 ~ "<=$35,000",
      HINCP_adj > 35000 & HINCP_adj <= 75000 ~ "$35,001-$75,000",
      HINCP_adj > 75000 & HINCP_adj <= 125000 ~ "$75,001-$125,000",
      HINCP_adj > 125000 & HINCP_adj <= 225000 ~ "$125,001-$225,000",
      HINCP_adj > 225000 ~ ">$225,000",
      .default = "0"
    ),
    # Householder Race Groupings. 
    HHLDRRACE_Group = case_when(
      HHLDRRAC1P == "1" ~ "White Alone",
      HHLDRRAC1P == "2" ~ "Black or African American Alone",
      HHLDRRAC1P %in% c("3", "4", "5") ~ "AIAN Alone",
      HHLDRRAC1P == "6" ~ "Asian Alone",
      HHLDRRAC1P == "7" ~ "NHPI Alone",
      HHLDRRAC1P == "8" ~ "SOR Alone",
      HHLDRRAC1P == "9" ~ "Two or More Races Alone",
      .default = "Unknown"
    ),
    # Householder Latine Groupings
    HHLDRHISP_Group = case_when(
      HHLDRHISP == "01" ~ "Non-Hispanic",
      HHLDRHISP != "01" ~ "Hispanic",
      .default = "Unknown"
    ),
    # Create a flag for whether a person in a household is a roommate or housemate
    roommate_flag = case_when(
      RELSHIPP == 34 ~ 1,
      RELSHIPP != 34 ~ 0,
      .default = 0
    ),
    # Replace any NAs (for households that own and so dont have a GRPIP and vice versa)
    GRPIP = replace_na(GRPIP, 0),
    OCPIP = replace_na(OCPIP, 0),
    # Define a "cost burdened" indicator.
    # (1) A household paying more than 30% of its income in housing costs (GRPIP or OCPIP) is considered "cost burdened"
    # (0) A household paying less than or equal to 30% of its income in housing costs is NOT considered "cost burdened"
    CostBurdened = case_when(
      GRPIP > 30 | OCPIP > 30 ~ "1",
      GRPIP <= 30 | OCPIP <= 30 ~ "0",
      .default = "0"
    )
  ) |>
  # Creating household flags for person variables.
  group_by(SERIALNO) |> 
  mutate(
    # Create a variable which is the sum of the number of children in a household
    Child_Total = sum(child),
    # Sum the total number of workers in the household
    Worker_Total = sum(worker),
    # Create a variable which is the sum of the number of non-relatives in the household
    Non.Relative_Total = sum(RELSHIPP_Group),
    # Create a variable that is the sum of roommates in a household
    Roommate_Total = sum(roommate_flag),
    # Create a column which denotes the presence of subfamilies for a household.
    SFN_Total = sum(SFN),
  ) |> 
  ungroup() |> 
  mutate(
  # Create a variable that indicates whether or not a household has children. 
   child_flag = case_when(
      Child_Total > 0 ~ "1",
      Child_Total == 0 ~ "0",
      .default = "0"
    ),
   # Create a variable that indicates whether or not a household has roommates.
   roommate_flag = case_when(
     Roommate_Total > 0 ~ "1",
     Roommate_Total == 0 ~ "0",
     .default = "0"
   ),
   # Create a household flag for whether or not the household contains a subfamily.
   SFN.flag = if_else(SFN_Total > 0, 1, 0),
   # Create a household flag for presence of a non-relative in the household.
   NONRELATIVE.flag = if_else(Non.Relative_Total > 0, 1, 0),
   # Categorizing worker categories:
   # (0) no workers
   # (1) one worker
   # (2) two workers
   # (3) three or more workers
   WRKHH = case_when(
     Worker_Total == 0 ~ 0,
     Worker_Total == 1 ~ 1,
     Worker_Total == 2 ~ 2,
     Worker_Total >= 3 ~ 3
    ),
   # Determine if person is not hhder vs hhder of:
   # (0) No Workers
   # (1) One Worker
   # (2) Two Workers
   # (3) Three or more workers
   HHder = case_when(
     SPORDER == 1 & WRKHH == 0 ~ 0,
     SPORDER == 1 & WRKHH == 1 ~ 1,
     SPORDER == 1 & WRKHH == 2 ~ 2,
     SPORDER == 1 & WRKHH == 3 ~ 3,
     SPORDER > 1 ~ 99
   ), 
   # Determine what type of household the person is heading or not heading:
   # (1) Householder of Household with Children
   # (2) Non-Householder in a Household with Children 
   # (3) Householder of a Household with Multiple Adults and no children 
   # (4) Non-Householder in a Household with no children
   # (5) Householder of a Single Person Household
   HHtype = case_when(
     Child_Total >= 1 & NP > 1 & HHder != 99 ~ 1,
     Child_Total >= 1 & NP > 1 & HHder == 99 ~ 2,
     Child_Total == 0 & NP > 1 & HHder != 99 ~ 3,
     Child_Total == 0 & NP > 1 & HHder == 99 ~ 4,
     NP == 1 & HHder != 99 ~ 5
   )
  )
  
```



# 2.0 Question 7:
# 2.1 Load ACS Data
```{r}
# Set PUMS vintage final year for {tidycensus} API query.
vintage <- 2021

# List of PUMS variables
variable_list <- c('RT', 'PUMA', 'ADJINC','NP','TYPEHUGQ','HHLDRAGEP','CIT', 'SCHL',
                   'HHLDRRAC1P','HHLDRHISP', 'HHT', 'HHT2', 'HINCP','LNGI', 'NR', 'PSF','R18',
                   'AGEP','RAC1P','OC','TEN', "SEX", "ESR", 'HISP', 'WKHP', 'HHLANP', 'LANP',
                   'RETP', 'FS', 'HINS4', 'PAP')

# SEMP bottom coding has changed from $1 to $4 like WAGP

# Query {tidycensus} for 2017-2021 5-Year PUMS data
pums <- pums_query(var.list = variable_list, yr = vintage, srvy = "acs5") |> 
  mutate(PUMA = as.character(str_pad(PUMA, width = 5, side = "left", pad = 0)))
```
# 2.2 Clean ACS Data
```{r}
# Clean PUMS Data
pums_cleaned <- pums |> 
  # Create a household flag for whether there is a child in a household.
  mutate(
    # Generate five-year age groupings to match UMDI population projections data.
    ageCAT6 = cut(AGEP, breaks = c(-Inf, seq(4, 84, 5), Inf), labels = 1:18),
    # Create a household flag for whether there is a child (a person under the age of 18) in the household.
    # (1) indicates a person is under the age of 18
    # (0) indicates a person is 18 or older.
    child = case_when(
      AGEP < 18 ~ 1,
      AGEP >= 18 ~ 0,
      .default = 0
    ),
    # Create a variable which aggregates household size.
    hhsize = case_when(
      NP == 1 ~ "One Person",
      NP == 2 ~ "Two Person",
      NP == 3 ~ "Three Person",
      NP >= 4 ~ "Four or more Persons",
      .default = "Unknown"
    ),
    # Counts as Worker
    # NOTE: Categories are:
    # (0) under 16 or not in labor force
    # (1) in labor force or non-civilian worker
    worker = case_when(
      # (b) indicates a person under the age of 16.
      # (6) indicates someone not in the laborforce
      (ESR == "b" | ESR == 6) ~ 0,
      # (1) indicates an employed civilian at work.
      # (2) indicates an employed civilian with a job but not at work.
      # (3) indicates civilian who is unemployed.
      # (4) Indicates an employed person in the armed forces. 
      # (5) indicates an employed person in the armed forces with a job but not at work.      
      (ESR == 1 | ESR == 2 | ESR == 3 | ESR == 4 | ESR == 5) ~ 1,
      # When ESR is NA, default to not in the laborforce.
      is.na(ESR) ~ 0,
      # If no information is present default to not in the laborforce.
      .default = 0
    ),
    # Create a grouping variable for owner and renter households.
    TEN_Group = case_when(
      # Owned with a mortage or free and clear -> "Own"
      TEN %in% c("1","2") ~ "Own",
      # Rented or occupied without payment of rent -> "Rent"
      TEN %in% c("3","4") ~ "Rent",
      .default = "Unknown"
    ),
    # Adjust Household income (HINCP) to constant dollars (USD2021)
    HINCP_adj = HINCP*as.numeric(ADJINC),
    # Adjust RETP to constant dollars (USD2021)
    RETP_adj = RETP*as.numeric(ADJINC),
    # Adjust PAP to constant dollars (USD2021)
    PAP_adj = PAP*as.numeric(ADJINC),
    # Household Income Groupings consistent with UrbanSim groupings
    HH.Income_Group = case_when(
      HINCP_adj <= 35000 ~ "<=$35,000",
      HINCP_adj > 35000 & HINCP_adj <= 75000 ~ "$35,001-$75,000",
      HINCP_adj > 75000 & HINCP_adj <= 125000 ~ "$75,001-$125,000",
      HINCP_adj > 125000 & HINCP_adj <= 225000 ~ "$125,001-$225,000",
      HINCP_adj > 225000 ~ ">$225,000",
      .default = "0"
    ),
    # Householder Race Groupings. 
    HHLDRRACE_Group = case_when(
      HHLDRRAC1P == "1" ~ "White Alone",
      HHLDRRAC1P == "2" ~ "Black or African American Alone",
      HHLDRRAC1P %in% c("3", "4", "5") ~ "AIAN Alone",
      HHLDRRAC1P == "6" ~ "Asian Alone",
      HHLDRRAC1P == "7" ~ "NHPI Alone",
      HHLDRRAC1P == "8" ~ "SOR Alone",
      HHLDRRAC1P == "9" ~ "Two or More Races Alone",
      .default = "Unknown"
    ),
    # Householder Latine Groupings
    HHLDRHISP_Group = case_when(
      HHLDRHISP == "01" ~ "Non-Hispanic",
      HHLDRHISP != "01" ~ "Hispanic",
      .default = "Unknown"
    )
  ) |>
  # Creating household flags for person variables.
  group_by(SERIALNO) |> 
  mutate(
    # Create a variable which is the sum of the number of children in a household
    Child_Total = sum(child),
    # Sum the total number of workers in the household
    Worker_Total = sum(worker),
    # Sum of Retirement Income in a household
    RETP_hh = sum(RETP_adj),
    # Sum of Public Assistance Income in a household
    PAP_hh = sum(PAP_adj)
  ) |> 
  ungroup() |> 
  mutate(
  # Create a variable that indicates whether or not a household has children. 
   child_flag = case_when(
      Child_Total > 0 ~ "1",
      Child_Total == 0 ~ "0",
      .default = "0"
    ),
    # Create a varible which indicated whether a person is retired.
    # If they have received retirement income in the past year - they are retired.
    # If they have not received retirement income in the past year - they are not retired.
    retired = case_when(
      RETP_hh > 0 ~ "Retired",
      RETP_hh <= 0 ~ "Not Retired",
      .default = "Unknown"
    ),
   # Create a variable which indicates whether someone received public assistance funds
   
   public_assistance = case_when(
     PAP_hh > 0 ~ "Receives Public Assistance",
     PAP_hh <= 0 ~ "Does Not Receive Public Assistance",
     .default = "Unknown"
   ),
   # Categorizing worker categories:
   # (0) no workers
   # (1) one worker
   # (2) two workers
   # (3) three or more workers
   WRKHH = case_when(
     Worker_Total == 0 ~ 0,
     Worker_Total == 1 ~ 1,
     Worker_Total == 2 ~ 2,
     Worker_Total >= 3 ~ 3
    ),
   # Determine if person is not hhder vs hhder of:
   # (0) No Workers
   # (1) One Worker
   # (2) Two Workers
   # (3) Three or more workers
   HHder = case_when(
     SPORDER == 1 & WRKHH == 0 ~ 0,
     SPORDER == 1 & WRKHH == 1 ~ 1,
     SPORDER == 1 & WRKHH == 2 ~ 2,
     SPORDER == 1 & WRKHH == 3 ~ 3,
     SPORDER > 1 ~ 99
   ), 
   # Determine what type of household the person is heading or not heading:
   # (1) Householder of Household with Children
   # (2) Non-Householder in a Household with Children 
   # (3) Householder of a Household with Multiple Adults and no children 
   # (4) Non-Householder in a Household with no children
   # (5) Householder of a Single Person Household
   HHtype = case_when(
     Child_Total >= 1 & NP > 1 & HHder != 99 ~ 1,
     Child_Total >= 1 & NP > 1 & HHder == 99 ~ 2,
     Child_Total == 0 & NP > 1 & HHder != 99 ~ 3,
     Child_Total == 0 & NP > 1 & HHder == 99 ~ 4,
     NP == 1 & HHder != 99 ~ 5
   )
  )
```

# 2.3 Create AMI Level Tables
```{r}
#===============================================================================
# Create AMI Table for RPA Groups
# Pull AMI Table for 2021
puma.ami_table <- get_mapc_database(
  db.table_name = "hous_section8_income_limits_by_year_m",
  year = 2021,
  vars = "*"
) |>
  mutate(
    #100% AMI
    il_100_1 = il_50_1 * 2,
    il_100_2 = il_50_2 * 2,
    il_100_3 = il_50_3 * 2,
    il_100_4 = il_50_4 * 2,
    il_100_5 = il_50_5 * 2,
    il_100_6 = il_50_6 * 2,
    il_100_7 = il_50_7 * 2,
    il_100_8 = il_50_8 * 2,
    # 40 % AMI
    il_40_1 = il_100_1 * 0.4,
    il_40_2 = il_100_2 * 0.4,
    il_40_3 = il_100_3 * 0.4,
    il_40_4 = il_100_4 * 0.4,
    il_40_5 = il_100_5 * 0.4,
    il_40_6 = il_100_6 * 0.4,
    il_40_7 = il_100_7 * 0.4,
    il_40_8 = il_100_8 * 0.4,
    # 60 % AMI
    il_60_1 = il_100_1 * 0.6,
    il_60_2 = il_100_2 * 0.6,
    il_60_3 = il_100_3 * 0.6,
    il_60_4 = il_100_4 * 0.6,
    il_60_5 = il_100_5 * 0.6,
    il_60_6 = il_100_6 * 0.6,
    il_60_7 = il_100_7 * 0.6,
    il_60_8 = il_100_8 * 0.6,
    # 70 % AMI
    il_70_1 = il_100_1 * 0.7,
    il_70_2 = il_100_2 * 0.7,
    il_70_3 = il_100_3 * 0.7,
    il_70_4 = il_100_4 * 0.7,
    il_70_5 = il_100_5 * 0.7,
    il_70_6 = il_100_6 * 0.7,
    il_70_7 = il_100_7 * 0.7,
    il_70_8 = il_100_8 * 0.7
  ) |>
  left_join(muni2puma,
            by = c("muni_id")) |>
  select(-c(
    municipal,
    muni_id,
    countyname,
    areaname,
    seq_id,
    fy_year,
    median
  )) |>
  group_by(PUMACE10) |>
  mutate(across(starts_with("il"), ~ round(mean(.), 0))) |>
  ungroup() |>
  distinct(PUMACE10, .keep_all = TRUE) |> 
  relocate(PUMACE10) |> 
  dplyr::rename(puma_id = PUMACE10)

```

# 2.4 Assign AMI Levels to PUMS Data
```{r}
#===============================================================================
# PUMA-based AMI Tables
full.pums_ami.subsets <- NULL

for (i in 1:8) {
  ami_table_filtered <- puma.ami_table |> 
    select(puma_id, ends_with(as.character(i))) |>  #change to puma id
    # this example below is the correct syntax - also noting that if you don't reorder the table 50 comes before 30
    `colnames<-`(c("puma_id","il50","il30","il80","il100", "il40", "il60", "il70"))
  
  pums_ami.subset <- pums_cleaned |>
    #account for households larger than 8, will be treated as 8 person
    mutate(size_group = ifelse(NP > 8, 8, NP)) |>
    #run the analysis on just the size household we have the filtered ami table to
    filter(size_group == i) |>
    #join in the ami table of income limits
    left_join(ami_table_filtered, by = c("PUMA" = "puma_id")) |>
    #create a column called ami_group that will assign an ami % to an income based on the PUMA
      mutate(
        ami_group = case_when(
          HINCP_adj <= il30 ~ "u30",
          HINCP_adj <= il40 & HINCP_adj > il30 ~ "e40",
          HINCP_adj <= il50 & HINCP_adj > il40 ~ "e50",
          HINCP_adj <= il60 & HINCP_adj > il50 ~ "e60",
          HINCP_adj <= il70 & HINCP_adj > il60 ~ "e70",
          HINCP_adj <= il80 & HINCP_adj > il70 ~ "e80",
          .default = "o80"
        )
      )
  
  full.pums_ami.subsets <- bind_rows(full.pums_ami.subsets, pums_ami.subset)
  
  rm(ami_table_filtered, pums_ami.subset)
  
  print(paste0("Finished creating a subset of PUMS records with a household size of ", i, "!"))
  
}
```

# 2.5 PUMS Data Analysis
# .1 Household Size
# .2 Households with Workers
# .3 Retiree Households
# .4 Households which Receive Public Assistance
```{r}
#===============================================================================
# .1 Household Size
tbl.1 <- full.pums_ami.subsets |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>
  group_by(hhsize, ami_group) |> 
  summarise(hh = sum(WGTP)) |> 
  ungroup() |> 
  group_by(hhsize) |> 
  mutate(tot_hh = sum(hh)) |> 
  ungroup() |> 
  mutate(pct = hh/tot_hh)

# QA household aggregation
if (sum(tbl.1$hh) != 2714444){
  print(sum(tbl.1$hh))
  print("STOP! Check household aggregations.")
} else{
  print("Proceed.")
}

# Write output table to .csv
write.csv(
  tbl.1,
  paste0(output_path, "q7.NP.HHSize.",st,".csv"),
  row.names = FALSE
)

#===============================================================================
# .2 Households with Workers
tbl.2 <- full.pums_ami.subsets |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>
  group_by(WRKHH, ami_group) |> 
  summarise(hh = sum(WGTP)) |> 
  ungroup() |> 
  group_by(WRKHH) |> 
  mutate(tot_hh = sum(hh)) |> 
  ungroup() |> 
  mutate(pct = hh/tot_hh)

# QA household aggregation
if (sum(tbl.2$hh) != 2714444){
  print(sum(tbl.2$hh))
  print("STOP! Check household aggregations.")
} else{
  print("Proceed.")
}

# Write output table to .csv
write.csv(
  tbl.2,
  paste0(output_path, "q7.ESR.HHWorkers.",st,".csv"),
  row.names = FALSE
)

#===============================================================================
#.3 Retiree Households
tbl.3 <- full.pums_ami.subsets |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>
  group_by(retired, ami_group) |> 
  summarise(hh = sum(WGTP)) |> 
  ungroup() |> 
  group_by(retired) |> 
  mutate(tot_hh = sum(hh)) |> 
  ungroup() |> 
  mutate(pct = hh/tot_hh)

# QA household aggregation
if (sum(tbl.3$hh) != 2714444){
  print(sum(tbl.3$hh))
  print("STOP! Check household aggregations.")
} else{
  print("Proceed.")
}

# Write output table to .csv
write.csv(
  tbl.3,
  paste0(output_path, "q7.RETP.Retirees.",st,".csv"),
  row.names = FALSE
)

#===============================================================================
# .4 Households which Receive Public Assistance Dollars
tbl.4 <- full.pums_ami.subsets |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(public_assistance, ami_group) |> 
  summarise(hh = sum(WGTP)) |> 
  ungroup() |> 
  group_by(public_assistance) |> 
  mutate(tot_hh = sum(hh)) |> 
  ungroup() |> 
  mutate(pct = hh/tot_hh)

# QA household aggregation
if (sum(tbl.4$hh) != 2714444){
  print(sum(tbl.4$hh))
  print("STOP! Check household aggregations.")
} else{
  print("Proceed.")
}

# Write output table to .csv
write.csv(
  tbl.4,
  paste0(output_path, "q7.PAP.PublicAssistance.",st,".csv"),
  row.names = FALSE
)
#===============================================================================
# .5 Households that Receive SNAP benefits
tbl.5 <- full.pums_ami.subsets |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(FS, ami_group) |> 
  summarise(hh = sum(WGTP)) |> 
  ungroup() |> 
  group_by(FS) |> 
  mutate(tot_hh = sum(hh)) |> 
  ungroup() |> 
  mutate(pct = hh/tot_hh)

# QA household aggregation
if (sum(tbl.5$hh) != 2714444){
  print(sum(tbl.5$hh))
  print("STOP! Check household aggregations.")
} else{
  print("Proceed.")
}

# Write output table to .csv
write.csv(
  tbl.5,
  paste0(output_path, "q7.FS.SNAP.",st,".csv"),
  row.names = FALSE
)

#===============================================================================
# .6 Households that receive Medicaid benefits
tbl.6 <- full.pums_ami.subsets |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(HINS4, ami_group) |> 
  summarise(hh = sum(WGTP)) |> 
  ungroup() |> 
  group_by(HINS4) |> 
  mutate(tot_hh = sum(hh)) |> 
  ungroup() |> 
  mutate(pct = hh/tot_hh)

# QA household aggregation
if (sum(tbl.6$hh) != 2714444){
  print(sum(tbl.6$hh))
  print("STOP! Check household aggregations.")
} else{
  print("Proceed.")
}

# Write output table to .csv
write.csv(
  tbl.6,
  paste0(output_path, "q7.HINS4.Medicaid.",st,".csv"),
  row.names = FALSE
)

```

# 3.0 Question 9: Headship Rate Differences Between 2000, 2015-2019, and 2017-2021
# 3.1 Load Headship Rates and Create Graphs
```{r}
# Load in the headship rates 
hdsp.r <- read_csv(paste0(hdsp.r_path, "headship_rate_comparison.csv"))

#===============================================================================
# Long Tables
# Overall Headship Rate for each age group
tbl.1 <- hdsp.r |> 
  select(Age, census2000, acs1519, acs1721) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  ) 

# Single Person Households
tbl.2 <- hdsp.r |> 
  select(Age, contains("single")) |> 
  select(-c(pop1721_single)) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  )

# Households with Childen
tbl.3 <- hdsp.r |> 
  select(Age, head_child2000, head_child1519, rate1721_hhderchild) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  )

# Multiple Adult No Children Households
tbl.4 <- hdsp.r |> 
  select(Age, head_nochild2000, head_nochild1519, rate1721_hhdernochild) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  )

#===============================================================================
# Visualizations
# Overall Headship Rates
graph.1 <- hdsp.r |> 
  select(Age, census2000, acs1519, acs1721) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  ) |> 
  ggplot(aes(x = Age, y = rates, color = hdsp.r_type, group = hdsp.r_type)) +
  geom_line() +
  geom_point() +
  labs(
    title = paste0("Headship Rates"),
  ) +
  ylab("Population in Households who are a Householder (%)") +
  xlab("Five Year Age Groups") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black"),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 0.5)
  )

graph.1

# Headship Rates - Single Persons
graph.2 <- hdsp.r |> 
  select(Age, contains("single")) |> 
  select(-c(pop1721_single)) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  ) |> 
  ggplot(aes(x = Age, y = rates, color = hdsp.r_type, group = hdsp.r_type)) +
  geom_line() +
  geom_point()  +
  labs(
    title = paste0("Headship Rates for Single Households"),
  ) +
  ylab("Population in Households who are a Householder (%)") +
  xlab("Five Year Age Groups") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black"),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 0.5)
  )

graph.2

# Headship Rates - Households with Children

graph.3 <- hdsp.r |> 
  select(Age, head_child2000, head_child1519, rate1721_hhderchild) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  ) |> 
  ggplot(aes(x = Age, y = rates, color = hdsp.r_type, group = hdsp.r_type)) +
  geom_line() +
  geom_point() +
  labs(
    title = paste0("Headship Rates for Households with Children"),
  ) +
  ylab("Population in Households who are a Householder (%)") +
  xlab("Five Year Age Groups") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black"),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 0.5)
  )

graph.3

# Headship Rates - Multiple Adult Households without Children

graph.4 <- hdsp.r |> 
  select(Age, head_nochild2000, head_nochild1519, rate1721_hhdernochild) |> 
  pivot_longer(
    !Age,
    names_to = "hdsp.r_type",
    values_to = "rates"
  ) |> 
  ggplot(aes(x = Age, y = rates, color = hdsp.r_type, group = hdsp.r_type)) +
  geom_line() +
  geom_point()  +
  labs(
    title = paste0("Headship Rates for Multiple Adult Households without Children"),
  ) +
  ylab("Population in Households who are a Householder (%)") +
  xlab("Five Year Age Groups") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black"),
    panel.border = element_rect(fill = NA, color = "black", linewidth = 0.5)
  )

graph.4
  
```



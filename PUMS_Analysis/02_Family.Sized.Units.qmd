---
title: "02_Family.Sized.Units"
format: html
editor: visual
---
# 0.0 Environment Set Up
# 0.1 - Set knitr path + root for inputs

```{r, setup, include=FALSE}
# Use when Rproject is open
# root <- '../../../../Data/Working/Regional_Control_Totals/'

# Base root. Toggle between S: and K: drive depending on mapped paths on your computer
base <- "K:/DataServices/Projects/Current_Projects/"

# General K drive filepath
root <-"K:/DataServices/Projects/Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/"

# PUMS K drive filepath
pums_path <- "K:/DataServices/Projects/Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/PUMS/ipums_2021/"

# Set output filepath
output_path <- "K:/DataServices/Projects/Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/PUMS/outputs/"

# Reweighter files path
rwt_path <- paste0(base, "Housing/StatewideHousingPlan/04_Analysis/Data/Working/Reweighter/")

# Set knitr path
knitr::opts_knit$set(root.dir = pums_path)
```

# 0.2 - Set package dependencies, set environment, set up data keys

```{r}
library(tidycensus)
library(tidyverse)
library(data.table)
library(mapcdatakeys)
library(janitor)
library(readxl)
library(here)
library(RPostgreSQL)

# Remove scientific notation
options(scipen = 999)
# Set random seed
set.seed(351)

# Load Libraries for PUMS Analysis and PUMS API query functions
# Sets seed and removes scientific notation
source(file = "C:/Project_Work/statewidehousingplan/PUMS_Analysis/PUMS_Helper_Functions.R")
source(file = "C:/Project_Work/Local_Data/General/census.data_connection.R")
source(file = "C:/Project_Work/housing/dbConnections.R")
# source(file = "C:/Project_Work/housing/ami-analysis.R")
print(here())

# Load PUMA x RPA Crosswalk
xw <- read.csv(paste0(rwt_path, "PUMS_data/PUMA10_RPA_crosswalk.csv")) |> 
  mutate(PUMA = str_pad(PUMA, 5, "left", pad = 0))

# Load PUMA to Community Type Crosswalk
ct_xw <- read_csv("C:/Project_Work/statewidehousingplan/PUMS_Analysis/new_puma_types_w_rural_2024.csv") |> 
  mutate(
    PUMA = as.character(PUMACE10),
    PUMA = str_pad(PUMA, 5, side = "left", pad = "0")
    ) |> 
  select(PUMA, puma_type) |> 
  distinct()

# Set PUMS vintage final year for {tidycensus} API query.
vintage <- 2021

# List of PUMS variables
variable_list <- c('RT', 'PUMA', 'ADJHSG','ADJINC','NP','TYPEHUGQ','BDSP','RMSP','CPLT','HHLDRAGEP',
                   'HHLDRRAC1P','HHLDRHISP', 'HHT', 'HHT2', 'HINCP', 'HUGCL', 'HUPAC', 'HUPAOC',
                   'HUPARC', 'LNGI', 'MULTG', 'NPF', 'NPP', 'NR','NRC', 'PARTNER', 'PSF','R18',
                   'AGEP','RELSHIPP','RAC1P','OC','SFN','SFR','TEN', "SEX", "PINCP", "ESR",
                   "MV", "GRPIP", "OCPIP")

# Load PUMS variables
pums <- pums_query(var.list = variable_list, yr = vintage, srvy = "acs5") |> 
  mutate(
    PUMA = as.character(str_pad(PUMA, width = 5, side = "left", pad = 0))
  )

```
# 1.0 PUMS Data Cleaning
```{r}
# General Data Cleaning
pums_cleaned <- pums |> 
  # Create a household flag for whether there is a child in a household.
  mutate(
    # Generate five-year age groupings to match UMDI population projections data.
    ageCAT6 = cut(AGEP, breaks = c(-Inf, seq(4, 84, 5), Inf), labels = 1:18),
    # Create a household flag for whether there is a child (a person under the age of 18) in the household.
    # (1) indicates a person is under the age of 18
    # (0) indicates a person is 18 or older.
    child = case_when(
      AGEP < 18 ~ 1,
      AGEP >= 18 ~ 0,
      .default = 0
    ),
    # Counts as Worker
    # NOTE: Categories are:
    # (0) under 16 or not in labor force
    # (1) in labor force or non-civilian worker
    worker = case_when(
      # (b) indicates a person under the age of 16.
      # (6) indicates someone not in the laborforce
      (ESR == "b" | ESR == 6) ~ 0,
      # (1) indicates an employed civilian at work.
      # (2) indicates an employed civilian with a job but not at work.
      # (3) indicates civilian who is unemployed.
      # (4) Indicates an employed person in the armed forces. 
      # (5) indicates an employed person in the armed forces with a job but not at work.      
      (ESR == 1 | ESR == 2 | ESR == 3 | ESR == 4 | ESR == 5) ~ 1,
      # When ESR is NA, default to not in the laborforce.
      is.na(ESR) ~ 0,
      # If no information is present default to not in the laborforce.
      .default = 0
    ),
    # # Create a grouping variable for types of relationships to the householder.
    # # NOTE: 
    # # (0) indicates a person in a household that is related in some way to the householder.
    # # (1) indicates a person in a household unrelated to the householder.
    # RELSHIPP_Group = case_when(
    #   RELSHIPP %in% c(21,22,23,24,25,26,27,28,29,30,31,32,33) ~ 0,
    #   RELSHIPP %in% c(34,35,36) ~ 1,
    #   # Set a default flag for householders.
    #   .default = 0
    # ),
    # Create a grouping variable for owner and renter households.
    TEN_Group = case_when(
      # Owned with a mortage or free and clear -> "Own"
      TEN %in% c("1","2") ~ "Own",
      # Rented or occupied without payment of rent -> "Rent"
      TEN %in% c("3","4") ~ "Rent",
      .default = "Unknown"
    ),
    # Create a "Studio/Non-Defined Bedroom" variable to denote where households do
    # not have a bedroom number.
    studio_flag = case_when(
      BDSP == 0 ~ "Studio/No Defined Bedroom",
      BDSP != 0 ~ "Defined Bedroom",
      .default = "Unknown"
    ),
    # Redefine BDSP to label studios/non-defined bedroom units as One-Bedrooms
    # For purpose of calculating the number of people per bedrooms.
    BDSP = if_else(BDSP == 0, 1, BDSP),
    # # Calculate the number of people per bedroom in a housing unit.
    # PPB = NP/BDSP,
    # # Categorize each housing unit as overcrowded or not based on PPB.
    # overcrowded.ppb = case_when(
    #   PPB > 2.0 ~ "1",
    #   PPB <= 2.0 ~ "0"
    # ),
    # Categorize the size of a housing unit by "Family" and "Not Family"
    # Family sized units have three or more rooms in the unit.
    # This category has two possible values:
    # (1) Indicates a household's housing unit is "Family" sized - has three or more rooms
    # (0) Indicates a household's housing unit is *not* "Family" sized - has fewer than three rooms
    Family.Size_Unit = case_when(
      RMSP >= 3 ~ 1,
      RMSP < 3 ~ 0,
      .default = 0
    ),
    # # Convert SFN into a numeric column. Introduces NAs for people not in subfamilies
    # SFN = as.numeric(SFN),
    # # Replace the NA for non-subfamily members with 0.
    # SFN = replace_na(SFN, 0),
    # Adjust Household income (HINCP) to constant dollars (USD2021)
    HINCP_adj = HINCP*as.numeric(ADJINC),
    # Household Income Groupings consistent with UrbanSim groupings
    HH.Income_Group = case_when(
      HINCP_adj <= 35000 ~ "<=$35,000",
      HINCP_adj > 35000 & HINCP_adj <= 75000 ~ "$35,001-$75,000",
      HINCP_adj > 75000 & HINCP_adj <= 125000 ~ "$75,001-$125,000",
      HINCP_adj > 125000 & HINCP_adj <= 225000 ~ "$125,001-$225,000",
      HINCP_adj > 225000 ~ ">$225,000",
      .default = "0"
    ),
    # Householder Race Groupings. 
    HHLDRRACE_Group = case_when(
      HHLDRRAC1P == "1" ~ "White Alone",
      HHLDRRAC1P == "2" ~ "Black or African American Alone",
      HHLDRRAC1P %in% c("3", "4", "5") ~ "AIAN Alone",
      HHLDRRAC1P == "6" ~ "Asian Alone",
      HHLDRRAC1P == "7" ~ "NHPI Alone",
      HHLDRRAC1P == "8" ~ "SOR Alone",
      HHLDRRAC1P == "9" ~ "Two or More Races Alone",
      .default = "Unknown"
    ),
    # Householder Latine Groupings
    HHLDRHISP_Group = case_when(
      HHLDRHISP == "01" ~ "Non-Hispanic",
      HHLDRHISP != "01" ~ "Hispanic",
      .default = "Unknown"
    ),
    # # Create a flag for whether a person in a household is a roommate or housemate
    # roommate_flag = case_when(
    #   RELSHIPP == 34 ~ 1,
    #   RELSHIPP != 34 ~ 0,
    #   .default = 0
    # ),
    # Replace any NAs (for households that own and so dont have a GRPIP and vice versa)
    GRPIP = replace_na(GRPIP, 0),
    OCPIP = replace_na(OCPIP, 0),
    # Define a "cost burdened" indicator.
    # (1) A household paying more than 30% of its income in housing costs (GRPIP or OCPIP) is considered "cost burdened"
    # (0) A household paying less than or equal to 30% of its income in housing costs is NOT considered "cost burdened"
    CostBurdened = case_when(
      GRPIP > 30 | OCPIP > 30 ~ "1",
      GRPIP <= 30 | OCPIP <= 30 ~ "0",
      .default = "0"
    )
  ) |>
  # Creating household flags for person variables.
  group_by(SERIALNO) |> 
  mutate(
    # Create a variable which is the sum of the number of children in a household
    Child_Total = sum(child),
    # Sum the total number of workers in the household
    Worker_Total = sum(worker),
    # # Create a variable which is the sum of the number of non-relatives in the household
    # Non.Relative_Total = sum(RELSHIPP_Group),
    # # Create a variable that is the sum of roommates in a household
    # Roommate_Total = sum(roommate_flag),
    # # Create a column which denotes the presence of subfamilies for a household.
    # SFN_Total = sum(SFN),
  ) |> 
  ungroup() |> 
  mutate(
  # Create a variable that indicates whether or not a household has children. 
   child_flag = case_when(
      Child_Total > 0 ~ "1",
      Child_Total == 0 ~ "0",
      .default = "0"
    ),
   # # Create a variable that indicates whether or not a household has roommates.
   # roommate_flag = case_when(
   #   Roommate_Total > 0 ~ "1",
   #   Roommate_Total == 0 ~ "0",
   #   .default = "0"
   # ),
   # Categorizing worker categories:
   # (0) no workers
   # (1) one worker
   # (2) two workers
   # (3) three or more workers
   WRKHH = case_when(
     Worker_Total == 0 ~ 0,
     Worker_Total == 1 ~ 1,
     Worker_Total == 2 ~ 2,
     Worker_Total >= 3 ~ 3
    ),
   # Determine if person is not hhder vs hhder of:
   # (0) No Workers
   # (1) One Worker
   # (2) Two Workers
   # (3) Three or more workers
   HHder = case_when(
     SPORDER == 1 & WRKHH == 0 ~ 0,
     SPORDER == 1 & WRKHH == 1 ~ 1,
     SPORDER == 1 & WRKHH == 2 ~ 2,
     SPORDER == 1 & WRKHH == 3 ~ 3,
     SPORDER > 1 ~ 99
   ), 
   # Determine what type of household the person is heading or not heading:
   # (1) Householder of Household with Children
   # (2) Non-Householder in a Household with Children 
   # (3) Householder of a Household with Multiple Adults and no children 
   # (4) Non-Householder in a Household with no children
   # (5) Householder of a Single Person Household
   HHtype = case_when(
     Child_Total >= 1 & NP > 1 & HHder != 99 ~ 1,
     Child_Total >= 1 & NP > 1 & HHder == 99 ~ 2,
     Child_Total == 0 & NP > 1 & HHder != 99 ~ 3,
     Child_Total == 0 & NP > 1 & HHder == 99 ~ 4,
     NP == 1 & HHder != 99 ~ 5
   )
  )
```

# 2.0 Join PUMS Community Types to PUMS Data
```{r}
# Join PUMS Community Types to PUMS Data
pums_cleaned.ct <- left_join(pums_cleaned, ct_xw, by = c("PUMA"))

```

# 3.0 Tables
```{r}
```


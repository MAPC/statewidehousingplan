---
title: "RPA_Reweighter"
format: html
editor: visual
project: execute-dir: project
---

## RPA Reweighter

This set of scripts runs the household reweighter to produce reweighted PUMS data that satisfies household targets set by the user.

# 1 - Set Scenario Name, knitr path, and root directory

```{r, setup, include=FALSE}

# Set Scenario name
scen <- 'Scenario_1'

# Set ACS / PUMS vintage
vintage <-  2021

# Root Directory
root <- 'S:/Network Shares/K Drive/DataServices/Projects/'
# root <- 'K:/DataServices/Projects/'

ctrltotal.path <- paste0(root, 'Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/', scen, '/')

workpath <- paste0(root, 'Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Reweighter/')

input_path <- paste0(workpath, scen, '/Input_Files/') 
output_path <- paste0(workpath, scen, '/Output_Files/') 

#Set knitr path
# knitr::opts_knit$set(root.dir = workpath)
```

# 2 - Set package dependencies, set environment, helper functions

```{r}
pacman::p_load(
  tidyverse,
  tidycensus,
  mapcdatakeys,
  janitor,
  readxl,
  rjson,
  data.table
)

##get rid of scientific notation
options(scipen = 999)

#Set random seed
set.seed(351)

# Helper function
sun <- function(x){sort(unique(x))}

# List of RPA names
mpos <- unlist(c(mapcdatakeys::all_muni_data_keys %>% select(mpo) %>% unique()))


```

# 3 - Subset PUMS data for each RPA

We use the CPI deflator time series to adjust PUMS income to 2013 dollars (for UrbanSim)

ACS uses the Consumer Price Index for All Urban Consumers Retroactive Series (R-CPI-U-RS): <https://www.bls.gov/cpi/research-series/r-cpi-u-rs-home.htm>

as opposed to the ASEC/Census which uses C-CPI-U

*Ref: https://www.census.gov/topics/income-poverty/income/guidance/current-vs-constant-dollars.html*

**PUMA to municipality crosswalk**

```{r}
# Load CPI time series
cpi <- fread(paste0(workpath,'PUMS_data/cpi_deflators_by_year.csv'))
cpi.deflator <- cpi[year==2013, index] / cpi[year==vintage, index]

#Set up datakeys for future joins.
mkeys <- mapcdatakeys::all_muni_data_keys %>%
  select(muni_id, rpa_acr, mpo)

# PUMA crosswalk
# Load in the municipality to PUMA crosswalk.
psf <- fread(paste0(workpath, 'PUMS_data/pums_muni_inter.csv')) %>%
  select(TOWN_ID, PUMACE10, Shape_Area) %>%
  dplyr::rename(muni_id = TOWN_ID, PUMA = PUMACE10) %>%
  left_join(mkeys, by = c('muni_id')) %>%
  setDT()

#Generate RPA to PUMA crosswalk.
lsf <- psf[, lapply(.SD, sum, na.rm = T), .(rpa_acr, PUMA), .SDcols = 'Shape_Area']
lsf[, mx := max(Shape_Area), PUMA]
xw <- lsf[Shape_Area == mx, .(rpa_acr, PUMA)]
xw[, PUMA := sprintf("%05d", PUMA)]

# Manufacturing MVC and NPEDC RPAs manually

cc <- data.table(rpa_acr = c('MVC', 'NPEDC'),
                 PUMA = c('04800', '04800'))

#Append MVC and NPEDC data to PUMA to RPA/MPO crosswalk
xw <- rbind(xw, cc)

mapc.pumas <- xw[rpa_acr == 'MAPC', unique(PUMA)]
swm.pumas <- xw[rpa_acr != 'MAPC', .(rpa_acr, PUMA)] %>% 
  unique()

# PUMS 5-yr data

variable_list <- c(
  "PUMA",
  "TYPEHUGQ",
  "SEX",
  "AGEP",
  "RAC1P",
  "HISP",
  "ESR",
  "WKHP",
  "SCHL",
  "WAGP",
  "SEMP",
  "ADJINC",
  "SPORDER",
  "HINCP",
  "TEN"
)

pums_data <- get_pums(
  state = "MA",
  survey = "acs5",
  year = vintage,
  variables = variable_list
) %>% 
  mutate(
    #Generate five-year age groupings to match UMDI population projections data.
    AgeCat = cut(AGEP, breaks = c(-Inf, seq(4, 84, 5), Inf), labels = 1:18),
    # Consolidated Age Category
    # NOTE: Levels are (0) 0-14; (4) 15 to 19; (5) 20 to 24; (6) 25 to 34; (7) 35 to 44; (8) 45 to 54; (9) 55 to 64 (10) 65 to 74 (11) 75+mutate(ageCAT4 = case_when(
    
    # ageCAT4 is the 2020 decennial census age breaks for age of householder - used for 2020 base year control total reweighter targets
    ageCAT4 = case_when(
      AGEP %in% 15:24 ~ 1,
      AGEP %in% 25:34 ~ 2,
      AGEP %in% 35:44 ~ 3,
      AGEP %in% 45:54 ~ 4,
      AGEP %in% 55:59 ~ 5,
      AGEP %in% 60:64 ~ 6,
      AGEP %in% 65:74 ~ 7,
      AGEP %in% 75:84 ~ 8,
      AGEP >= 85 ~ 9
    ), 

    PAGEC2 = cut(
      AGEP,
      breaks = c(-Inf, 14, 19, 24, 34, 44, 54, 64, 74, 79, 84, Inf),
      labels = c(0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
    ),
    # Categorizing employment status
    empstat = case_when(
      ESR == "b" ~ "Under 16 not eligible for work",
      ESR == 1 ~ "Employed",
      ESR == 2 ~ "Employed but not at work",
      ESR == 3 ~ "Unemployed",
      ESR == 4 ~ "Armed forces",
      ESR == 5 ~ "Armed forces but not at work",
      ESR == 6 ~ "Not in labor force"
    ),
    
    # Categorizing Civilian Labor Force or not
    # NOTE: Categories are (0) under 16 or non-civilian, (1) in labor force, (2) not in labor force
    lf = case_when(
      ESR == "b" | ESR == 4 | ESR == 5  ~ 0,
      ESR == 1 | ESR == 2 | ESR == 3  ~ 1,
      ESR == 6 ~ 2,
      is.na(ESR) ~ 0
    ),
    
    # Counts as Worker
    # NOTE: Categories are (0) under 16 or not in labor force, or (1) in labor force or non-civilian worker
    worker = case_when(
      (ESR == "b" | ESR == 6) ~ 0,
      (ESR == 1 | ESR == 2 | ESR == 3 | ESR == 4 | ESR == 5) ~ 1,
      is.na(ESR) ~ 0
    ),
    
    # Categorizing full or part-time work
    wrkfull = case_when(
      WKHP < 35 ~ "Part time (less than 35 hrs)",
      WKHP >= 35 ~ "Full time (35 hrs or more)",
      is.na(WKHP) ~ "Under 16, unemployed, or not in labor force"
    ),
    
    # Categorizing educational attainment
    # NOTE: Categories are (1) High school degree or less, (2) Associate's degree or some college, (3) Bachelor's, and (4) MA or higher
    SCHL = as.numeric(SCHL),
    eduattn = case_when(
      SCHL <= 17 ~ 1,
      SCHL %in% 18:20 ~ 2,
      SCHL == 21 ~ 3,
      SCHL >= 22 ~ 4,
      is.na(SCHL) ~ 0
    ),
    
    # Determine if person is head of household
    HousHder = case_when(SPORDER == 1 ~ 1, SPORDER > 1 ~ 2),
    
    # Determine if case counts as person
    person = case_when(SPORDER != 0 ~ 1, SPORDER == 0 ~ 0),
    
    # Determine if case counts as child
    child = case_when(AGEP < 18 ~ 1, AGEP >= 18 ~ 0)
  ) %>% 
  
  #Generating Household Variables
  group_by(SERIALNO) %>% 
  mutate(
    Worker_Total = sum(worker),
    Person_Total = sum(person),
    Child_Total = sum(child)
  ) %>% 
  ungroup() %>% 
  
  # Categorizing household sizes by number of persons (1) one person, (2) two persons, (3) three persons, (4) four or more persons
  mutate(
    HHSize = case_when(
      Person_Total == 1 ~ 1,
      Person_Total == 2 ~ 2,
      Person_Total == 3 ~ 3,
      Person_Total >= 4 ~ 4
    ),
    size = case_when(
      Person_Total == 1 ~ 1,
      Person_Total == 2 ~ 2,
      Person_Total == 3 ~ 3,
      Person_Total == 4 ~ 4,
      Person_Total == 5 ~ 5,
      Person_Total == 6 ~ 6,
      Person_Total >= 7 ~ 7,
    ),
    # Categorizing worker categories (0) no workers, (1) one worker, (2) two workers, (3) three or more workers
    WRKHH = case_when(
      Worker_Total == 0 ~ 0,
      Worker_Total == 1 ~ 1,
      Worker_Total == 2 ~ 2,
      Worker_Total >= 3 ~ 3
    ),
    
    # Determine if person is not hhder vs hhder of 0- wrk, 1wrk, 2 wrk, 3+wrk
    HHder = case_when(
      SPORDER == 1 & WRKHH == 0 ~ 0,
      SPORDER == 1 & WRKHH == 1 ~ 1,
      SPORDER == 1 & WRKHH == 2 ~ 2,
      SPORDER == 1 & WRKHH == 3 ~ 3,
      SPORDER > 1 ~ 99
    ),
    
    # Determine what type of household the person is heading or not heading (1) head child, (2) child, (3) head not child, (4) not head no child, (5) head single
    HHtype = case_when(
      Child_Total >= 1 & Person_Total > 1 & HHder != 99 ~ 1,
      Child_Total >= 1 & Person_Total > 1 & HHder == 99 ~ 2,
      Child_Total == 0 & Person_Total > 1 & HHder != 99 ~ 3,
      Child_Total == 0 & Person_Total > 1 & HHder == 99 ~ 4,
      Person_Total == 1 & HHder != 99 ~ 5
    ),
    
    # Adjust income first to the highest year in the 5-year vintage using included adjustment field (ADJINC) and then deflate back to 2013, using the cpi deflator calculated in the previous code chunk
    
    ADJINC = as.numeric(ADJINC),
    HINCP = round((as.numeric(HINCP) * ADJINC) * cpi.deflator, 0),
    WAGPALLC_US =
      cut(
        HINCP,
        breaks = c(-Inf, 35000, 75000, 125000, 225000, Inf),
        labels = c("1", "2", "3", "4", "5")
      )
  ) %>%
  setDT()

pums_data[, NP := max(SPORDER), SERIALNO]

fwrite(pums_data,
       paste0(workpath, '/PUMS_data/PUMS', vintage, '_formatted.csv'))

# Make Input folders for reweighter by RPA
 dir.create(paste0(workpath, scen, '/Input_Files/'), showWarnings = F)
 dir.create(paste0(workpath, scen, '/Output_Files/'), showWarnings = F)
 
for (m in unique(xw$rpa_acr)) {
  dir.create(paste0(workpath, scen, '/Input_Files/', m), showWarnings = F)
  dir.create(paste0(workpath, scen, '/Output_Files/', m), showWarnings = F)
}

# MAPC 101 subset
fwrite(pums_data[PUMA %in% mapc.pumas],
       paste0(workpath, scen, '/Input_Files/MAPC/PUMS', vintage, '_MAPC.csv'))
message(paste0('MAPC 101 PUMS export complete'))

# SWM join PUMA and export subsets
for (m in unique(swm.pumas$rpa_acr)) {
  mp <- swm.pumas[rpa_acr == m]
  pums_data %>%
    left_join(mp, by = 'PUMA') %>%
    filter(rpa_acr == m) %>%
    fwrite(paste0(workpath, scen, '/Input_Files/', m, '/PUMS', vintage, '_', m, '.csv'))
  message(paste0(m, ' PUMS export complete'))
}

```

# 4 - Create RPA config JSON files for reweighter configuration

```{r}

# Template config file
infile1 <- paste0(workpath, 'Templates/reweighting_config_2021.json')

infile2 <- paste0(workpath, 'Templates/reweighting_config_2020baseyear.json')

for (m in mpos){
  outfile1 <- paste0(workpath, scen, '/Input_Files/', m, '/reweighting_config_2021_', m, '.json')
  outfile2 <- paste0(workpath, scen, '/Input_Files/', m, '/reweighting_config_2020baseyear_', m, '.json')
  cfig1 = readLines(infile1)
  cfig1 = gsub('PUMS2021', paste0('PUMS2021_', m), cfig1)
  writeLines(cfig1, outfile1)
  cfig2 = readLines(infile2)
  cfig2 = gsub('PUMS2021', paste0('PUMS2021_', m), cfig2)
  writeLines(cfig2, outfile2)
}

```

# 5 - Configure, set targets and run reweighter for each RPA and year

```{r}

#

source('algo_hh.R')

# Set Targets and run reweighter loop

# Select headship rate scenario

hdshp <- 'acs1721'

# Choose whether to run using the MAPC 101 or the MAPC 97 towns

reb <- 'MAPC101'
#reb <- 'MAPC97'

# Different configuration for 2020 base year

for (yr in c(2020)) {
  #for (mid in c('MAPC')) {
  for (mid in mpos) {
    # Set config files
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    
    source(here('scripts/reweighter/read_config_RPA_2020baseyear.R'))
    message(paste0(mid, ' configuration complete'))
    
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    age.target <- fread(
      paste0(
        ctrltotal.path,
        'age.targetfile.',
        reb,
        '.',
        scen,
        '.hdshp.',
        hdshp,
        '.y',
        yr,
        '.csv'
      )
    ) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% setDT()
    setorder(age.target, ageCAT4)
    fwrite(age.target, paste0(inpath, '/age.csv'))
    
    size.target <- fread(
      paste0(
        ctrltotal.path,
        'size.targetfile.',
        reb,
        '.',
        scen,
        '.hdshp.',
        hdshp,
        '.y',
        yr,
        '.csv'
      )
    ) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% setDT()
    setorder(size.target, size)
    fwrite(size.target, paste0(inpath, '/size.csv'))
    
    type.target <- fread(
      paste0(
        ctrltotal.path,
        'type.targetfile.',
        reb,
        '.',
        scen,
        '.hdshp.',
        hdshp,
        '.y',
        yr,
        '.csv'
      )
    ) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% setDT()
    setorder(type.target, HHtype)
    fwrite(type.target, paste0(inpath, '/type.csv'))
    
    message(paste0(mid, ' targets set'))
    
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    
    source(here('scripts/reweighter/Manage_Scenario_RPA.R'))
    message(paste0(mid, ' reweighter complete'))
    
    mess <- data.table(txt = paste0(mid, ' reweighter complete'))
    fwrite(mess, paste0(outpath, mid, '_', yr, '_complete.txt'))
  }
}

for (yr in c(2035, 2040, 2045, 2050)) {
#for (yr in c(2030, 2035, 2040, 2045, 2050)) {
  #for (mid in c('MAPC')) {
  for (mid in mpos) {
    # Set config
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    source(here('scripts/reweighter/read_config_RPA.R'))
    message(paste0(mid, ' configuration complete'))
    
    # Set targets
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    template <- fread(paste0(workpath, 'Templates/AgeHHder_HHtype_template.csv')) %>%
      select(-BASELINE, -TARGET)
    target <- fread(paste0(ctrltotal.path, 'hhtype.targetfile.', reb, '.', scen,'.hdshp.',hdshp,'.y',yr, '.csv')) %>%
      filter(RPA == mid) %>%
      select(-RPA) %>% right_join(template, by = c('AgeCat', 'HHtype')) %>% setDT()
    target[AgeCat %in% c('x == 1', 'x == 2', 'x == 3'), `:=`(BASELINE =
                                                               0,
                                                             INTER = 0,
                                                             TARGET = 0)]
    target[is.na(BASELINE),`:=`(BASELINE =0,INTER = 0,TARGET = 0)]
    setorder(target, AgeCat, HHtype)
    fwrite(target, paste0(inpath, '/AgeHHder_HHtype.csv'))
    message(paste0(mid, ' targets set'))
    
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    
    source(here('scripts/reweighter/Manage_Scenario_RPA.R'))
    message(paste0(mid, ' reweighter complete'))
    
    mess <- data.table(txt = paste0(mid, ' reweighter complete'))
    fwrite(mess, paste0(outpath, mid, '_', yr, '_complete.txt'))
  }
}

```

# 6 - QC reweighter Outputs

```{r}


reb <- 'MAPC101'
#reb <- 'MAPC97'

comp.dt <- data.table()

for (yr in 2020){
  for (mid in mpos) {
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    # Summarize total households by mpo from target inputs to reweighter
    target <- fread(paste0(ctrltotal.path, 'type.targetfile.', reb, '.', scen, '.hdshp.', hdshp, '.y', yr, '.csv')) %>%
      filter(RPA == mid) %>% setDT()
    
    tsum <- target[, lapply(.SD, sum), RPA, .SDcols = 'TARGET']
    tsum[, TARGET := round(TARGET)][,year:=yr]
    setnames(tsum, 'RPA', 'mpo')
    setkey(tsum, mpo)
    
    # Calculate total households from the reweighter outputs
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    setkey(pums, SERIALNO, SPORDER)
    
    rw <- data.table()
    
    x <- fread(paste0(outpath, '/weights_final_', scen, '_', mid, '_', yr, '.csv')) %>% select(SERIALNO, SPORDER, new_WGTP) %>% mutate(mpo = mid) %>% setDT()
    setkey(x, SERIALNO, SPORDER)
    xp <- pums[x]
    xsum <- xp[SPORDER == 1, lapply(.SD, sum), .(mpo), .SDcols = c('WGTP', 'new_WGTP')]
    xsum[, rw_HH := round(new_WGTP)][, pums_baseline_hh := round(WGTP)]
    rw <- rbind(rw, xsum)
    setkey(rw, mpo)
    comp <- tsum[rw]
    comp.out <- comp[,.(year,mpo,pums_baseline_hh, TARGET,rw_HH)]
    comp.out[,diff:= TARGET - rw_HH]
    fwrite(comp.out,paste0(outpath,'reweighter_QC_', scen, '_', mid, '_', hdshp, '_', yr,' .csv'))
    comp.dt <- rbind(comp.dt,comp.out)
  }
}
for (yr in c(2030,2035,2040,2045,2050)){
  for (mid in mpos) {
    inpath <- paste0(workpath, scen, '/Input_Files/', mid, '/')
    outpath <- paste0(workpath, scen, '/Output_Files/', mid, '/')
    # Summarize total households by mpo from target inputs to reweighter
    target <- fread(paste0(ctrltotal.path, 'hhtype.targetfile.', reb, '.', scen, '.hdshp.', hdshp, '.y', yr, '.csv')) %>%
      filter(RPA == mid) %>% setDT()
    
    tsum <- target[, lapply(.SD, sum), RPA, .SDcols = 'TARGET']
    tsum[, TARGET := round(TARGET)][,year:=yr]
    setnames(tsum, 'RPA', 'mpo')
    setkey(tsum, mpo)
    
    # Calculate total households from the reweighter outputs
    pums <- fread(paste0(inpath, 'PUMS', vintage, '_', mid, '.csv'))
    setkey(pums, SERIALNO, SPORDER)
    
    rw <- data.table()
    
    x <- fread(paste0(outpath, '/weights_final_', scen, '_', mid, '_', yr, '.csv')) %>% select(SERIALNO, SPORDER, new_WGTP) %>% mutate(mpo = mid) %>% setDT()
    setkey(x, SERIALNO, SPORDER)
    xp <- pums[x]
    xsum <- xp[SPORDER == 1, lapply(.SD, sum), .(mpo), .SDcols = c('WGTP', 'new_WGTP')]
    xsum[, rw_HH := round(new_WGTP)][, pums_baseline_hh := round(WGTP)]
    rw <- rbind(rw, xsum)
    setkey(rw, mpo)
    comp <- tsum[rw]
    comp.out <- comp[,.(year,mpo,pums_baseline_hh, TARGET,rw_HH)]
    comp.out[,diff:= TARGET - rw_HH]
    fwrite(comp.out,paste0(outpath,'reweighter_QC_', scen, '_', mid, '_', hdshp, '_', yr,' .csv'))
    comp.dt <- rbind(comp.dt,comp.out)
  }
}

fwrite(comp.dt,paste0(workpath, scen, '/Output_Files/reweighter_QC_all_RPAs_all_years_', hdshp, '_', hdshp,' .csv'))

comp.dt[abs(diff)>1]

```

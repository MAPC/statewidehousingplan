---
title: "03_Immigration"
format: html
editor: visual
---

# 0.0 Setup - Define helper functions, set knitr path, load necessary packages, set muni data keys

#Set up libraries for the analysis

```{r}
library(tidycensus)
library(tidyverse)
library(survey)
library(srvyr)
library(data.table)
library(janitor) 
library(dplyr)
library(knitr)
library(readxl)
library(writexl)
library(openxlsx)
library(devtools)
```

# 0.1 - Set knitr path + root for inputs

```{r}
#Optional - Set up project using MAPC's organization method

#Use when Rproject is open
#root <- 

#General J drive filepath
#root <-"J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI"

#PUMS J drive filepath
#pums_path <- "J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI"

#Set output filepath
#output_path <- ":/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/Output"

#Set knitr path
#knitr::opts_knit$set(root.dir = pums_path)
```

# 0.2 - Set package dependencies, set environment, set up data keys

```{r}
#Load PUMS data - new  version
pums <- read.xlsx("J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/pums_immig_hh_2021_V_2024-10-09.xlsx")
```

# 0.3 PUMA to RPA Crosswalk

```{r}
#Load in PUMA crosswalk - didn't end up using this one but here if needed
#RPA_crosswalk <- read.csv ("J:/EPPR/Active Studies/EOHLC Statewide Hsg Plan_FY24/Data/pums_UMDI/PUMA10_RPA_crosswalk.csv")

#install mapc package for geographies
devtools::install_github("MAPC/mapcdatakeys", force = TRUE)
library(mapcdatakeys)
```


```{r}
#Load in puma crosswalk and use mapc package to match geos 
ma_muni_puma10_join <- read_csv("ma_muni_puma10_join.csv")

mkeys <- mapcdatakeys::all_muni_data_keys |>  select(muni_id,rpa_acr,mpo)

#Load in the municipality to PUMA crosswalk - using MAPC code to create same regions
psf <- ma_muni_puma10_join|>
  dplyr::rename(
    muni_id=TOWN_ID,
    PUMA = PUMACE10
  ) |>
  left_join(
    mkeys,
    by = c('muni_id')
  ) |> 
  select(-c(muni_id)) |> 
  distinct(
    PUMA,
    .keep_all = TRUE
  ) |> 
  mutate(
    PUMA = str_pad(PUMA, 5, side = "left", pad = "0")
  )

#Manufacturing MVC and NPEDC RPAs manually
#Create an empty matrix with 2x1 dimenstions
matrix <- matrix(nrow = 1, ncol = 3)
#Set the column names to match the PUMA to RPA/MPO crosswalk
col_names <- c("rpa_acr", "mpo", "PUMA")

#Create dataframes with matrix dimensions for both RPAs
mvc <- data.frame(matrix = matrix)
ccc <- data.frame(matrix = matrix)

#Assign column names to the dataframes
colnames(mvc) <- col_names
colnames(ccc) <- col_names

#Populate data into the MVC and MPEDC dataframes
mvc[[1]] <- "MVC"
mvc[[2]] <- "MVC"
mvc[[3]] <- "04800"
ccc[[1]] <- "CCC"
ccc[[2]] <- "CCC"
ccc[[3]] <- "04800"

#Append MVC and NPEDC data to PUMA to RPA/MPO crosswalk
xw <- bind_rows(psf, mvc, ccc)

#Remove intermediate dataframes.
rm(matrix, col_names, mvc, ccc, psf)
gc()

```

# 0.4 PUMS Data Cleaning

```{r}
#Other data cleaning first before joining RPA

#To replicate income groups that mapc used
    # Adjust Household income (HINCP) to constant dollars (USD2021)
pums <- pums %>%
  mutate(
    HINCP_adj = HINCP * ADJINC,  # Create the adjusted income column
    HH.Income.Grp = case_when(
      HINCP_adj <= 35000 ~ "$35,000 or less",
      HINCP_adj > 35000 & HINCP_adj <= 75000 ~ "$35,001-$75,000",
      HINCP_adj > 75000 & HINCP_adj <= 125000 ~ "$75,001-$125,000",
      HINCP_adj > 125000 & HINCP_adj <= 225000 ~ "$125,001-$225,000",
      HINCP_adj > 225000 ~ "$225,000 or more",
      TRUE ~ NA_character_)) 


##Joining the PUMA to RPA crosswalk to the PUMS data
#converting puma to numeric to join
xw$PUMA <- as.numeric(xw$PUMA)

#join RPA crosswalk to pums data for RPA data set
pums_RPA <- left_join(
  pums,
  xw,
  by = c("PUMA"))

```

# PUMS Analysis

# State-level

#Identify households whose head of household is foreign born.

```{r}
#Number and share of hhlds in the state where the head of household is foreign born
####Assuming that the first person in each hhld is the head of hhld 

#Calculate weighted total of all hhlds in data set - is this correct? 
household_data <- pums %>%
filter(RT == "H") 
total_weighted_households <- sum(household_data$WGTP, na.rm = TRUE) # add weights

household_foreign_born_summary_table <- pums %>%
  filter(RT != "H") %>%   # exclude hhlds because nativity is a person-level data point
  group_by(SERIALNO) %>% # group by household 
  summarise(first_weight = first(WGTP, na.rm = TRUE), # get the first person's weight for hhld - assuming this is head of hhld
    NATIVITY = first(NATIVITY), .groups = "drop") %>%           # get the nativity for the first person                          
  group_by(NATIVITY) %>%                                   # group by nativity to calculate total weights for each type
  summarise(total_by_nativity= sum(first_weight, na.rm = TRUE), # sum the weights by nativity
    .groups = "drop") %>%                                       
  mutate(NATIVITY = case_when(                             # rename variables 
    NATIVITY == 1 ~ "Native",
    NATIVITY == 2 ~ "Foreign born",
    TRUE ~ "Unknown")) %>%
  mutate(total_households = sum(total_by_nativity)) %>%
  mutate(percentage_of_total = (total_by_nativity / total_households) * 100) # Calculate percent out of all hhlds

```

```{r}
#export

```

# State level analysis of foreign born households
```{r}
#Check calculation of the weighted number of foreign born hhlds
households_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds because nativity is a person-level data point
 group_by(SERIALNO) %>% 
 summarise(
    first_weight = first(WGTP, na.rm = TRUE),  # get the first person's weight for the household
    first_person_nativity = first(NATIVITY, na.rm = TRUE),  # get the nativity of the first person
    .groups = "drop"
  ) %>%
  filter(first_person_nativity == 2) 

#checking total foreign born hhlds
total_foreign_hhld <- sum(households_foreign_born$first_weight)
```

```{r}
#Age of householder in foreign born vs. native hhlds 

householder_age_foreign_born <- pums %>%
 filter(RT != "H") %>%   # exclude hhlds because nativity is a person-level data point
 select(uniq_obs, SERIALNO, PUMA, WGTP, HHLDRAGEP, NATIVITY) %>% 
 mutate(age_range = case_when(
    HHLDRAGEP >= 0 & HHLDRAGEP < 5 ~ "Under 5",
    HHLDRAGEP >= 5 & HHLDRAGEP < 18 ~ "5-17",
    HHLDRAGEP >= 18 & HHLDRAGEP < 35 ~ "18-34",
    HHLDRAGEP >= 35 & HHLDRAGEP < 65 ~ "35-64",
    HHLDRAGEP >= 65 & HHLDRAGEP < 75 ~ "65-74",
    HHLDRAGEP >= 75 ~ "75 and over")) %>% 
 group_by(SERIALNO) %>% 
 summarise(
    householder_age = first(HHLDRAGEP, na.rm = TRUE),  # get the first person's householder age
    householder_nativity = first(NATIVITY, na.rm = TRUE),  # get nativity of first person (householder)
    first_weight = first(WGTP, na.rm = TRUE),  # get the weight for the first person (householder)
    age_range = first(age_range, na.rm = TRUE),  # get age range for the first person (householder)
    .groups = "drop"
  ) %>%
  group_by(householder_nativity, age_range) %>%  # group by nativity and age range
  summarise(
    total_weight = sum(first_weight, na.rm = TRUE),  # summarize total weights for each nativity and age range
    .groups = "drop"
  ) %>%
  group_by(householder_nativity) %>%  # group by nativity to calculate totals within each group
  mutate(
    total_weight_by_nativity = sum(total_weight, na.rm = TRUE),  # calculate the total weight for each nativity group
    percentage_within_nativity = (total_weight / total_weight_by_nativity) * 100  # calculate percentage within each group
  ) %>%
  mutate(householder_nativity = case_when(  # rename nativity categories
    householder_nativity == 1 ~ "Native",
    householder_nativity == 2 ~ "Foreign born",
    TRUE ~ "Unknown"
  ))

```

```{r}
#Export age of hhlder by nativity table



```

```{r}
#Year of entry 


```

```{r}
#Size of hhld, presence of children



```


---
title: "04_Overcrowded.Households"
format: html
editor: visual
---

# 0.0 Setup - Define helper functions, set knitr path, load necessary packages, set muni data keys

# 0.1 - Set knitr path + root for inputs

```{r, setup, include=FALSE}
#Use when Rproject is open
#root <- '../../../../Data/Working/Regional_Control_Totals/'

#General K drive filepath
root <-"K:/DataServices/Projects/Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/Regional_Control_Totals/"

#PUMS K drive filepath
pums_path <- "K:/DataServices/Projects/Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/PUMS/ipums_2021/"

#Set output filepath
output_path <- "K:/DataServices/Projects/Current_Projects/Housing/StatewideHousingPlan/04_Analysis/Data/Working/PUMS/outputs/"

#Set knitr path
knitr::opts_knit$set(root.dir = pums_path)
```

# 0.2 - Set package dependencies, set environment, set up data keys

```{r}
#Load Libraries for PUMS Analysis and PUMS API query functions
#sets seed and removes scientific notation
source("C:/Project_Work/statewidehousingplan/PUMS_Analysis/PUMS_Helper_Functions.R")

#Load PUMS variables
pums <- read.csv(paste0(pums_path,"pums_overcrowding_2021_V_2024-09-16.csv")) |> 
  mutate(
    PUMA = as.character(str_pad(PUMA, width = 5, side = "left", pad = 0))
  )

```

# 0.3 PUMA to RPA Crosswalk

```{r}
# Load in PUMA to RPA Crosswalk
xw <- read_csv(paste0(root, "Scenario_1/PUMA10_RPA_crosswalk.csv"))

```

# 0.4 PUMS Data Cleaning

```{r}
#Joing the PUMA to RPA crosswalk to the PUMS data.
pums <- left_join(
  pums,
  xw,
  by = c("PUMA")
)

# General Data Cleaning
pums <- pums |> 
  # Create a household flag for whether there is a child in a household.
  mutate(
    # Generate five-year age groupings to match UMDI population projections data.
    Age_Group.5yr = cut(AGEP, breaks = c(-Inf, seq(4, 84, 5), Inf), labels = 1:18),
    # Create a household flag for whether there is a child (a person under the age of 18) in the household.
    #Note: (1) indicates a person is under the age of 18. (0) indicates a person is 18 or older.
    child = case_when(
      AGEP < 18 ~ 1,
      AGEP >= 18 ~ 0,
      .default = 0
    ),
    # Counts as Worker
    # NOTE: Categories are:
    # (0) under 16 or not in labor force
    # (1) in labor force or non-civilian worker
    worker = case_when(
      # (b) indicates a person under the age of 16.
      # (6) indicates someone not in the laborforce
      (ESR == "b" | ESR == 6) ~ 0,
      # (1) indicates an employed civilian at work.
      # (2) indicates an employed civilian with a job but not at work.
      # (3) indicates civilian who is unemployed.
      # (4) Indicates an employed person in the armed forces. 
      # (5) indicates an employed person in the armed forces with a job but not at work.      
      (ESR == 1 | ESR == 2 | ESR == 3 | ESR == 4 | ESR == 5) ~ 1,
      # When ESR is NA, default to not in the laborforce.
      is.na(ESR) ~ 0,
      # If no information is present default to not in the laborforce.
      .default ~ 0
    ),
    # Create a grouping variable for types of relationships to the householder.
    # NOTE: (0) indicates a person in a household that is related in some way to the householder. (1) indicates a person in a household unrelated to the householder.
    RELSHIPP_Group = case_when(
      RELSHIPP %in% c(21,22,23,24,25,26,27,28,29,30,31,32,33) ~ 0,
      RELSHIPP %in% c(34,35,36) ~ 1,
      # Set a default flag for householders.
      .default = 0
    ),
    # Create a grouping variable for owner and renter households.
    TEN_Group = case_when(
      # Owned with a mortage or free and clear -> "Own"
      TEN %in% c("1","2") ~ "Own",
      # Rented or occupied without payment of rent -> "Rent"
      TEN %in% c("3","4") ~ "Rent",
      .default = "Unknown"
    ),
    # Create a "Studio/Non-Defined Bedroom" variable to denote where households do
    # not have a bedroom number.
    studio_flag = case_when(
      BDSP == 0 ~ "Studio/No Defined Bedroom",
      BDSP != 0 ~ "Defined Bedroom",
      .default = "Unknown"
    ),
    # Redefine BDSP to label studios/non-defined bedroom units as One-Bedrooms
    # For purpose of calculating the number of people per bedrooms.
    BDSP = if_else(BDSP == 0, 1, BDSP),
    # Calculate the number of people per bedroom in a housing unit.
    PPB = NP/BDSP,
    # Categorize each housing unit as overcrowded or not based on PPB.
    overcrowded.ppb = case_when(
      PPB > 2.0 ~ "1",
      PPB <= 2.0 ~ "0"
    ),
    # Convert SFN into a numeric column. Introduces NAs for people not in subfamilies
    SFN = as.numeric(SFN),
    # Replace the NA for non-subfamily members with 0.
    SFN = replace_na(SFN, 0),
    # Adjust Household income (HINCP) to constant dollars (USD2021)
    HINCP_adj = HINCP*ADJINC,
    # Household Income Groupings consistent with UrbanSim groupings
    HH.Income_Group = case_when(
      HINCP_adj <= 35000 ~ "<=$35,000",
      HINCP_adj > 35000 & HINCP_adj <= 75000 ~ "$35,001-$75,000",
      HINCP_adj > 75000 & HINCP_adj <= 125000 ~ "$75,001-$125,000",
      HINCP_adj > 125000 & HINCP_adj <= 225000 ~ "$125,001-$225,000",
      HINCP_adj > 225000 ~ ">$225,000",
      .default = "0"
    ),
    # Householder Race Groupings. 
    HHLDER.RACE_Group = case_when(
      HHLDRRAC1P == "1" ~ "White Alone",
      HHLDRRAC1P == "2" ~ "Black or African American Alone",
      HHLDRRAC1P %in% c("3", "4", "5") ~ "AIAN Alone",
      HHLDRRAC1P == "6" ~ "Asian Alone",
      HHLDRRAC1P == "7" ~ "NHPI Alone",
      HHLDRRAC1P == "8" ~ "SOR Alone",
      HHLDRRAC1P == "9" ~ "Two or More Races Alone",
      .default = "Unknown"
    ),
    # Householder Latinx Groupings
    HHDER.HISP_Group = case_when(
      HHLDRHISP == "01" ~ "Non-Hispanic",
      HHLDRHISP != "01" ~ "Hispanic",
      .default = "Unknown"
    ),
    # Create a flag for whether a person in a household is a roommate or housemate
    roommate_flag = case_when(
      RELSHIPP == 34 ~ 1,
      RELSHIPP != 34 ~ 0,
      .default = 0
    )
  ) |>
  # Creating household flags for person variables.
  group_by(SERIALNO) |> 
  mutate(
    # Create a variable which is the sum of the number of children in a household
    Child_Total = sum(child),
    # Create a variable which is the sum of the number of non-relatives in the household
    Non.Relative_Total = sum(RELSHIPP_TYPE),
    # Create a variable that is the sum of roommates in a household
    Roommate_Total = sum(roommate.flag),
    # Create a column which denotes the presence of subfamilies for a household.
    SFN_Total = sum(SFN),
  ) |> 
  ungroup() |> 
  mutate(
  # Create a variable that is a household flag for whether or not a household has 
  # Children. 
   child_flag = case_when(
      child_count > 0 ~ "1",
      child_count == 0 ~ "0",
      .default = "0"
    ),
   # Create a household flag for whether or not the household contains a subfamily.
   SFN.flag = if_else(SFN.num > 0, 1, 0),
   # Create a household flag for presence of a non-relative in the household.
   NONRELATIVE.flag = if_else(NONRELATIVE_count > 0, 1, 0)
  ) |> 
  mutate(
    # Non-multigenerational household WITH at least one (1) subfamily WITH at least one (1) child
    subset.flag.1 = case_when(
      MULTG == 1 & SFN.flag > 0 & child_flag > 0 ~ 1,
      .default = 0
    ),
    # Multigenerational households WITH at least one (1) subfamily WITH at least one (1) child AND is overcrowded
    subset.flag.2 = case_when(
      MULTG == 2 & SFN.flag > 0 & child_flag > 0 & overcrowded.ppb == "1" ~ 1,
      .default = 0
    ),
    # Households with at least one (1) subfamily WITH at least one (1) child AND is overcrowded
    subset.flag.3 = case_when(
      SFN.flag > 0 & child_flag > 0 & overcrowded.ppb == "1" ~ 1,
      .default = 0
    )
  )

# Create a subset of the PUMS file for 
pums.subset.1 <- pums |> 
  filter(subset.flag.1 == 1)

# And write to the subset as a .csv
write.csv(
  pums.subset.1,
  paste0(output_path, "pums.HRAdj.subset.1.csv"),
  row.names = FALSE
)

# Create a subset of the PUMS file for
pums.subset.2 <- pums |> 
  filter(subset.flag.2 == 1)

# And write to the subset as a .csv
write.csv(
  pums.subset.2,
  paste0(output_path, "pums.HRAdj.subset.2.csv"),
  row.names = FALSE
)

# Create a subset of the PUMS file for
pums.subset.3 <- pums |> 
  filter(subset.flag.3 == 1)

# And write to the subset as a .csv
write.csv(
  pums.subset.3,
  paste0(output_path, "pums.HRAdj.subset.3.csv"),
  row.names = FALSE
)

```

# 1.0 PUMS Analysis

# 1.1 Overcrowding (PPB) at the State-level and for family households and by number of bedrooms

```{r}
#===============================================================================
# 1.1.1 Overcrowding in general at the State-level
OC.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  mutate(
    pct = oc.hh/sum(oc.hh)
  )

#Write the output to csv
write.csv(
  OC.PPB,
  paste0(output_path,"04_Overcrowding/overcrowding.PPB.StateLevel.csv"),
  row.names = FALSE
)

#===============================================================================
#1.1.2 Overcrowding by Family Status at the State-Level
OC.FAMILY.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    child_flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    child_flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  mutate(
    pct = oc.hh/hh
  ) |>
  select(
    -c(hh)
  )

#Write the output to csv
write.csv(
  OC.FAMILY.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.Child.PPB.StateLevel.csv"),
  row.names = FALSE
)

#===============================================================================
# 1.1.3 Overcrowding by Number of Bedrooms
OC.BDRMS.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    BDSP,
    studio_flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    BDSP,
    studio_flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

#Write the output to csv
write.csv(
  OC.BDRMS.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.BDRMS.PPB.StateLevel.csv"),
  row.names = FALSE
)
```

# 1.2 Overcrowding (PPB) at the RPA-level and for Family households and by Number of Bedrooms

```{r}
#===============================================================================
# 1.2.1 Overcrowding by RPA
OC.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    rpa_acr
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

#Write output to csv
write.csv(
  OC.RPA.PPB,
  paste0(output_path,"04_Overcrowding/overcrowding.PPB.RPALevel.csv"),
  row.names = FALSE
)

#===============================================================================
# 1.2.2 Overcrowding by RPA and family households
OC.FAMILY.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    child_flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    rpa_acr,
    child_flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

#Write output to csv
write.csv(
  OC.FAMILY.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.Child.PPB.RPALevel.csv"),
  row.names = FALSE
)

#===============================================================================
# 1.2.3 Overcrowding by Number of Bedrooms and RPA
OC.BDRMS.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |> 
  group_by(
    rpa_acr,
    BDSP,
    studio_flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    rpa_acr,
    BDSP,
    studio_flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

#Write output to csv
write.csv(
  OC.BDRMS.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.BDRMS.PPB.RPALevel.csv"),
  row.names = FALSE
)

```

# 1.3 General Analysis

About 1.8 percent of households across the state are overcrowded, which is classified as having more than two persons per bedroom in a given household. Family households (households with a child under 18 years old) have a higher proportion of households which are overcrowded - 5.4 percent. Regarding overcrowding by the number of bedrooms in a household, I expect the proportion of overcrowded households to decrease as the number of bedrooms increases. This is confirmed by the data. 4.9 percent and 5.1 percent of one bedrooms and studios, respectively, are overcrowded. The proportion of overcrowded households drops to 2.4 percent for two bedroom households and further to 0.8 percent for households with three bedrooms.The trend follows for households with more bedrooms. A point to delve further on is the incidence of overcrowding in one bedroom and studio units. The Census doesn't singularly define studio units, I've classified them as units where the number of rooms equals one and the number of bedrooms is zero (as opposed to a one bedroom unit where there is one bedroom and at least one room).

When looking at the proportion of overcrowded households by RPA clear differences arise across the state. The Berkshires, Cape Code, Martha's Vineyard and Nantucket all have less than one percent of their households be overcrowded. MAPC has the highest percentage of overcrowded households across all RPA regions with 2.1 percent of households being overcrowded. The other RPAs fall closer to the statewide proportion.

# 2.0 Subfamilies Analysis

A subfamily is defined as either 1) a married couple without children or a 2) single parent with unmarried children under the age of 18. Does not differentiate between whether members of a subfamily are related to the householder. The "RELSHIP" variable contains information about the relatedness of people in a household to the householder. (Source: https://www.census.gov/programs-surveys/cps/technical-documentation/subject-definitions.html#subfamily)

# 2.1 Looking at Composition of Subfamilies to determine if they make sense

```{r}
```

# 2.2 Overcrowded Households by Presense of Subfamilies

```{r}
#===============================================================================
# 2.2.1 Overcrowding by Presence of a Subfamily
OC.SF.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    SFN.flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    SFN.flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.SF.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.SF.PPB.csv"),
  row.names = FALSE
)

#===============================================================================
# 2.2.2 Overcrowding by Number of Subfamilies
OC.NumSF.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    SFN.num,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    SFN.num
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.NumSF.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.NumSF.PPB.csv"),
  row.names = FALSE
)

#===============================================================================
# 2.2.3 Overcrowding by RPA and Presence of a Subfamily
OC.SF.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    SFN.flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    rpa_acr,
    SFN.flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.SF.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.SF.PPB.RPAlevel.csv"),
  row.names = FALSE
)

#===============================================================================
# 2.2.4 Overcrowding by RPA and Number of Subfamilies
OC.NumSF.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    SFN.num,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    rpa_acr,
    SFN.num
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.NumSF.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.NumSF.PPB.RPAlevel.csv"),
  row.names = FALSE
)

```

# 2.3 Subfamily Analysis

Presence of a subfamily (see definition) is associated with a greater proportion of households being over crowded. Only 1.5 percent of households without a subfamily are overcrowded compared to 10.2 percent of households with a subfamily present. One would expect as the *number* of subfamilies in a household increases (a proxy for number of people since at least two people constitute a subfamily) the proportion of households which are overcrowded would also increase. Our expectation is validated in the data -- nine percent (9%) of households with one subfamily are overcrowded, 47% of households with two subfamilies are overcrowded, and *all* households with three subfamilies are overcrowded. This is consistent across RPA regions.

# 3.0 Multigenerational Household Analysis

U.S. Census defines "multigenerational" households as those with three or more generations present in the household.

A second definition is more expansive, one which IPUMS has coded into their microdata sample. They record the number of generations present among people in the household relative to the householder. A household where the parents of the householder live with them would be a two generation household. One where the grandparents, children, and grandchildren are present would be a four generation household. (Source that refers to this definition: https://www2.census.gov/library/publications/2012/acs/acsbr11-03.pdf)

# 3.1 Redefining Multigenerational households

```{r}
pums <- pums |> 
  mutate(
    #Create a variable that categorizes people into "generations" by their relationship
    #to the householder
    GEN = case_when(
      #
      
    )
  )
```

# 3.2 Overcrowding by Presence of Multiple Generations in a Household (Census Definition)

```{r}
#===============================================================================
# 3.2.1 Overcrowding by Multigenerational Households (Census Definition)
OC.MULTG.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    MULTG,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    MULTG
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.PPB.csv"),
  row.names = FALSE
)

#===============================================================================
# 3.2.2 Overcrowding by RPA and Multigenerational Households (Census Definitions)
OC.MULTG.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    MULTG,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    rpa_acr,
    MULTG
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )
write.csv(
  OC.MULTG.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.PPB.RPAlevel.csv"),
  row.names = FALSE
)

# Analysis:
```

# 3.3 Analysis:

A far greater proportion of households formed of people from multiple generations are overcrowded (9.9%) than non-multigenerational households (1.4%). The latter group is more similar to the statewide proportion of overcrowded households (1.57%). This is consistent across each of the 13 RPA regions.

# 4.0 Cross-Tabulations

# 4.1 Multigenerational Households and Presense of Subfamilies

```{r}
#===============================================================================
# 4.1.1 Overcrowding by Multigenerational Households (Census Definition) and Presence of Subfamily
OC.MULTG.SF.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    MULTG,
    SFN.flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    MULTG,
    SFN.flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.SF.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.SF.PPB.csv"),
  row.names = FALSE
)

#===============================================================================
# 4.1.2 Overcrowding by RPA and Multigenerational Households (Census Definitions) and Presence of Subfamily
OC.MULTG.SF.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    MULTG,
    SFN.flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    rpa_acr,
    MULTG,
    SFN.flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.SF.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.SF.PPB.RPAlevel.csv"),
  row.names = FALSE
)

#===============================================================================
# 4.1.3 Overcrowding by RPA and Multigenerational Households (Census Definitions) and Presence of Subfamily and Presence of Children
OC.MULTG.SF.Child.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    MULTG,
    SFN.flag,
    child_flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    MULTG,
    SFN.flag,
    child_flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.SF.FAMILY.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.SF.Child.PPB.RPAlevel.csv"),
  row.names = FALSE
)

#===============================================================================
# 4.1.4 Overcrowding and Multigenerational Households (Census Definitions) and Number of Subfamilies
OC.MULTG.NumSF.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    MULTG,
    SFN.num,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    MULTG,
    SFN.num
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.NumSF.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.NumSF.PPB.csv"),
  row.names = FALSE
)

#===============================================================================
# 4.1.5 Overcrowding by RPA and Multigenerational Households (Census Definitions) and Number of Subfamilies and Presence of Children
OC.MULTG.NumSF.Child.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    MULTG,
    SFN.num,
    child_flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    MULTG,
    SFN.num,
    child_flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.NumSF.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.NumSF.Child.PPB.csv"),
  row.names = FALSE
)

#===============================================================================
# 4.1.6 Overcrowding and Multigenerational Households (Census Definitions) and Number of Subfamilies by RPA
OC.MULTG.NumSF.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    MULTG,
    SFN.num,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    rpa_acr,
    MULTG,
    SFN.num
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.NumSF.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.NumSF.RPAlevel.PPB.csv"),
  row.names = FALSE
)

#===============================================================================
# 4.1.7 Overcrowding by RPA and Multigenerational Households (Census Definitions) and Number of Subfamilies and Presence of Children by RPA
OC.MULTG.NumSF.Child.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    MULTG,
    SFN.num,
    child_flag,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |>
  group_by(
    rpa_acr,
    MULTG,
    SFN.num,
    child_flag
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  rowwise() |> 
  mutate(
    pct = oc.hh/hh
  ) |> 
  select(
    -c(hh)
  )

write.csv(
  OC.MULTG.NumSF.Child.RPA.PPB,
  paste0(output_path, "04_Overcrowding/overcrowding.MULTG.NumSF.Child.RPAlevel.PPB.csv"),
  row.names = FALSE
)

```

# 4.2 Analysis:

At the state level

Households that are not multigenerational but contain a subfamily have the highest rate of overcrowding at 11.0% There is nearly no difference in the rate of overcrowding between multigenerational households that contain subfamilies and those that do not (in both sets of households the rate of overcrowding is 9.9%).

What is a reasonable rate of overcrowding? And by that I mean - what is the number of households and the percentage of households that are overcrowded that represent a state where the choice to cohabit with other people, despite having less room, more desirable than living separately. Can we parse out who would rather be living separately from other people in their household if they could choose to do so?

Reasonable rate Non-multigenerational households without the presence of subfamilies

From there

# 5.0 Visualizations

# 5.1 Tenure

```{r}
#===============================================================================
# 5.1 Overcrowding by Tenure at the State-Level
OC.TEN.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    TEN.desc,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    TEN.desc
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |>
  mutate(
    pct = round(oc.hh/hh, digits = 3)
  )

BG.OC.TEN.PPB <- OC.TEN.PPB |> 
  filter(overcrowded.ppb == "1") |> 
  ggplot(aes(x = TEN.desc, y = pct)) +
  geom_bar(stat = "identity", color = "black", fill = "steelblue") +
  geom_text(aes(label = scales::percent(pct)), vjust = -0.3, size = 3.5) +
  #scale_x_discrete(limits = rev) +
  scale_y_continuous(label = scales::percent) +
  labs(
    title = "Renter Households are More Likely to be Overcrowded than Owner Households",
    x = "Tenure",
    y = "Percent of Households Overcrowded"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black")
  )

BG.OC.TEN.PPB

ggsave(
  filename = "BG.OC.TEN.PPB.jpeg",
  plot = BG.OC.TEN.PPB,
  device = "jpeg",
  path = output_path,
  width = 10,
  height = 7,
  units = "in",
  dpi = 300
)

#===============================================================================
# 5.2 Overcrowding by Tenure at the State-Level
OC.TEN.RPA.PPB <- pums |> 
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    rpa_acr,
    TEN.desc,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    rpa_acr
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |> 
  mutate(
    pct = round(oc.hh/hh, digits = 3)
  )

# #Write the output to csv
# write.csv(
#   OC.PPB,
#   paste0(output_path,"04_Overcrowding/overcrowding.PPB.StateLevel.csv"),
#   row.names = FALSE
# )
```

# 5.2 Income Groups

```{r}
#===============================================================================
# 5.2 Overcrowding by Income Groups at the State-Level
OC.INC.PPB <- pums |> 
  # Filters dataframe to households (non-group quarters units) and householders.
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    HH.Income.Grp,
    overcrowded.ppb
  ) |> 
  summarise(
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    HH.Income.Grp
  ) |> 
  mutate(
    hh = sum(oc.hh)
  ) |> 
  ungroup() |>
  mutate(
    pct = round(oc.hh/hh, digits = 3)
  )

# Use this list to set the order of the income groups in the bar graph
level_order <- c("<=$35,000", "$35,001-$75,000", "$75,001-$125,000", "$125,001-$225,000", ">$225,000")

# Creates a bar graph of using the dataframe created above.
BG.OC.INC.PPB <- OC.INC.PPB |> 
  # Filter for the overcrowded aggregates.
  filter(overcrowded.ppb == "1") |> 
  ggplot(aes(x = factor(HH.Income.Grp, level_order), y = pct)) +
  geom_bar(stat = "identity", color = "black", fill = "steelblue") +
  geom_text(aes(label = scales::percent(pct)), vjust = -0.3, size = 3.5) +
  scale_y_continuous(label = scales::percent) +
  labs(
    title = "Middle Income Housheolds are more Often Overcrowded",
    x = "Income Group",
    y = "Percent of Overcrowded Households"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black")
  )

# Print the bar graph created above.
BG.OC.INC.PPB

# Save an image of the bar graph created above.
ggsave(
  filename = "BG.OC.INC.PPB.jpeg",
  plot = BG.OC.INC.PPB,
  device = "jpeg",
  path = output_path,
  width = 10,
  height = 7,
  units = "in",
  dpi = 300
)
```

# 5.3 Race Groups

```{r}
#===============================================================================
# 5.3 Overcrowding by Income Groups at the State-Level
OC.HHLDER_RACE.PPB <- pums |> 
  # Filters dataframe to households (non-group quarters units) and householders.
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    HHLDER.RACE.Grp,
    overcrowded.ppb
  ) |> 
  summarise(
    # Calculates the number of overcrowded and non-overcrowded households in each crosstab group.
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    HHLDER.RACE.Grp
  ) |> 
  mutate(
    # Calculates the total number of households in the crosstab group (OC + Non-OC)
    hh = sum(oc.hh)
  ) |> 
  ungroup() |>
  mutate(
    # Create a percent of overcrowded and non-overcrowded households within each crosstab group.
    # Round to three digits.
    pct = round(oc.hh/hh, digits = 3)
  )

# Creates a bar graph of using the dataframe created above.
BG.OC.HHLDER_RACE.PPB <- OC.HHLDER_RACE.PPB |>
  # Filter for the overcrowded aggregates.
  filter(overcrowded.ppb == "1") |> 
  ggplot(aes(x = HHLDER.RACE.Grp, y = pct)) +
  geom_bar(stat = "identity", color = "black", fill = "steelblue") +
  geom_text(aes(label = scales::percent(pct)), vjust = -0.3, size = 3.5) +
  scale_y_continuous(label = scales::percent) +
  labs(
    title = "Non-White Households are More Often Overcrowded",
    x = "Race of Householder",
    y = "Percent of Households Overcrowded"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black")
  )

# Print the bar graph created above.
BG.OC.HHLDER_RACE.PPB

# Save an image of the bar graph created above.
ggsave(
  filename = "BG.OC.HHLDER_RACE.PPB.jpeg",
  plot = BG.OC.HHLDER_RACE.PPB,
  device = "jpeg",
  path = output_path,
  width = 10,
  height = 7,
  units = "in",
  dpi = 300
)
```

# 5.4 Presence of Non-Relatives in a Household

```{r}
#===============================================================================
# 5.4 Overcrowding by Income Groups at the State-Level
OC.NONRELATE.PPB <- pums |> 
  # Filters dataframe to households (non-group quarters units) and householders.
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    NONRELATIVE.flag,
    overcrowded.ppb
  ) |> 
  summarise(
    # Calculates the number of overcrowded and non-overcrowded households in each crosstab group.
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    NONRELATIVE.flag
  ) |> 
  mutate(
    # Calculates the total number of households in the crosstab group (OC + Non-OC)
    hh = sum(oc.hh)
  ) |> 
  ungroup() |>
  mutate(
    # Create a percent of overcrowded and non-overcrowded households within each crosstab group.
    # Round to three digits.
    pct = round(oc.hh/hh, digits = 3)
  )

# Creates a bar graph of using the dataframe created above.
BG.OC.NONRELATE.PPB <- OC.NONRELATE.PPB |> 
  # Filter for the overcrowded aggregates.
  filter(overcrowded.ppb == "1") |> 
  ggplot(aes(x = NONRELATIVE.flag, y = pct)) +
  geom_bar(stat = "identity", color = "black", fill = "steelblue") +
  geom_text(aes(label = scales::percent(pct)), vjust = -0.3, size = 3.5) +
  scale_x_discrete(limits = c(0,1)) +
  scale_y_continuous(label = scales::percent) +
  labs(
    title = "Households with Non-Relatives are More Often Overcrowded",
    x = "Presence of a Non-Relative in the Household",
    y = "Percent of Households Overcrowded"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black")
  )

# Print the bar graph created above.
BG.OC.NONRELATE.PPB

# Save an image of the bar graph created above.
ggsave(
  filename = "BG.OC.NONRELATE.PPB.jpeg",
  plot = BG.OC.NONRELATE.PPB,
  device = "jpeg",
  path = output_path,
  width = 10,
  height = 7,
  units = "in",
  dpi = 300
)

```

# 5.5 Ethnicity Group

```{r}
#===============================================================================
# 5.5 Overcrowding by Income Groups at the State-Level
OC.HHLDER_HISP.PPB <- pums |> 
  # Filters dataframe to households (non-group quarters units) and householders.
  filter(TYPEHUGQ == 1 & SPORDER == 1) |>  
  group_by(
    HHDER.HISP.Grp,
    overcrowded.ppb
  ) |> 
  summarise(
    # Calculates the number of overcrowded and non-overcrowded households in each crosstab group.
    oc.hh = sum(WGTP)
  ) |> 
  ungroup() |> 
  group_by(
    HHDER.HISP.Grp
  ) |> 
  mutate(
    # Calculates the total number of households in the crosstab group (OC + Non-OC)
    hh = sum(oc.hh)
  ) |> 
  ungroup() |>
  mutate(
    # Create a percent of overcrowded and non-overcrowded households within each crosstab group.
    # Round to three digits.
    pct = round(oc.hh/hh, digits = 3)
  )

# Creates the bar graph for the above table
BG.OC.HHLDER_HISP.PPB <- OC.HHLDER_HISP.PPB |> 
  # Filter for the overcrowded aggregates.
  filter(overcrowded.ppb == "1") |> 
  ggplot(aes(x = HHDER.HISP.Grp, y = pct)) +
  geom_bar(stat = "identity", color = "black", fill = "steelblue") +
  geom_text(aes(label = scales::percent(pct)), vjust = -0.3, size = 3.5) +
  scale_y_continuous(label = scales::percent) +
  labs(
    title = "Hispanic Households are More Often Overcrowded",
    x = "Ethnicity of Householder",
    y = "Percent of Households Overcrowded"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(color = "black"),
    axis.text.y = element_text(color = "black")
  )

# Print the bar graph created above.
BG.OC.HHLDER_HISP.PPB

# Save an image of the bar graph created above.
ggsave(
  filename = "BG.OC.HHLDER_HISP.PPB.jpeg",
  plot = BG.OC.HHLDER_HISP.PPB,
  device = "jpeg",
  path = output_path,
  width = 10,
  height = 7,
  units = "in",
  dpi = 300
)
```
